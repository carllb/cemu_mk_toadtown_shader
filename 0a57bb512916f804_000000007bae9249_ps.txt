#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 0a57bb512916f804
uniform ivec4 uf_remappedPS[17];
layout(binding = 0) uniform samplerCubeArray textureUnitPS0;// Tex0 addr 0x40366000 res 128x128x1 dim 3 tm: 4 format 0033 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x6) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2DArrayShadow textureUnitPS1;// Tex1 addr 0xf494a800 res 1536x1536x1 dim 5 tm: 4 format 0005 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 6 6 6 border: 2
layout(binding = 2) uniform samplerCubeArray textureUnitPS2;// Tex2 addr 0x46c2b800 res 32x32x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x6) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 3) uniform sampler2DArray textureUnitPS3;// Tex3 addr 0x30d05800 res 4x4x1 dim 5 tm: 2 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0x25f22000 res 4x4x1 dim 1 tm: 2 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 0 0 0 border: 1
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0x30d03000 res 4x4x1 dim 1 tm: 2 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 6) uniform sampler2D textureUnitPS6;// Tex6 addr 0x2afa5000 res 768x768x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler6 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 7) uniform sampler2D textureUnitPS7;// Tex7 addr 0x2ae18000 res 768x768x1 dim 1 tm: 4 format 0235 compSel: 0 1 4 5 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler7 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 8) uniform sampler2D textureUnitPS8;// Tex8 addr 0x2af00000 res 512x512x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler8 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem5;
layout(location = 6) in vec4 passParameterSem6;
layout(location = 7) in vec4 passParameterSem7;
layout(location = 8) in vec4 passParameterSem8;
layout(location = 9) in vec4 passParameterSem9;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex0 = 0.0;
float cubeMapArrayIndex2 = 0.0;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
R3i = floatBitsToInt(passParameterSem3);
R4i = floatBitsToInt(passParameterSem4);
R5i = floatBitsToInt(passParameterSem5);
R6i = floatBitsToInt(passParameterSem6);
R7i = floatBitsToInt(passParameterSem7);
R8i = floatBitsToInt(passParameterSem8);
R9i = floatBitsToInt(passParameterSem9);
R10i.xy = floatBitsToInt(texture(textureUnitPS7, intBitsToFloat(R0i.xy)).xy);
R13i.xyz = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R0i.xy)).xyz);
R14i.xyzw = floatBitsToInt(texture(textureUnitPS6, intBitsToFloat(R0i.xy)).xyzw);
// 0
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(R7i.y)));
PV0i.y = ((-(intBitsToFloat(R0i.z)) > intBitsToFloat(uf_remappedPS[0].x))?int(0xFFFFFFFF):int(0x0));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(R7i.z)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.x), intBitsToFloat(R10i.x)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R2i.w));
// 1
R11i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(PS0i)));
R11i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PS0i)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(R7i.x)));
R123i.w = ((PV0i.y == 0)?(0):(0x3f800000));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R9i.z));
// 2
backupReg0i = R9i.x;
backupReg1i = R9i.y;
backupReg2i = R127i.w;
R9i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
R9i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS1i)));
PV0i.z = ((intBitsToFloat(PV1i.w) == 0.0)?int(0xFFFFFFFF):int(0x0));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),intBitsToFloat(R10i.y)) + intBitsToFloat(backupReg2i)));
R12i.z = floatBitsToInt(roundEven(intBitsToFloat(PV1i.w)));
PS0i = R12i.z;
// 3
backupReg0i = R127i.x;
R127i.x = ((PV0i.z == 0)?(R4i.x):(R3i.x));
R127i.y = ((PV0i.z == 0)?(R4i.y):(R3i.y));
R123i.z = ((PV0i.z == 0)?(R4i.w):(R3i.w));
PV1i.z = R123i.z;
R126i.w = ((PV0i.z == 0)?(R4i.z):(R3i.z));
R122i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.y)),intBitsToFloat(R7i.z)) + intBitsToFloat(backupReg0i)));
PS1i = R122i.x;
// 4
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(PS1i)));
R126i.y = floatBitsToInt(-(intBitsToFloat(R127i.w)) + 1.0);
R126i.y = clampFI32(R126i.y);
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.x)),intBitsToFloat(R7i.y)) + intBitsToFloat(R126i.z)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.z)),intBitsToFloat(R7i.x)) + intBitsToFloat(R127i.z)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.z));
// 5
R12i.x = floatBitsToInt(intBitsToFloat(R127i.x) * intBitsToFloat(PS0i));
PV1i.y = floatBitsToInt(intBitsToFloat(R126i.w) * intBitsToFloat(PS0i));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(PV0i.w)));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(PV0i.z)));
R12i.y = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(PS0i));
PS1i = R12i.y;
// 6
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(R10i.x)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(R10i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(R10i.x)));
R12i.w = PV1i.y;
R12i.w = clampFI32(R12i.w);
R6i.x = floatBitsToInt(sqrt(intBitsToFloat(R126i.y)));
PS0i = R6i.x;
// 7
backupReg0i = R2i.z;
R2i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[1].z) * intBitsToFloat(0x40c00000) + 2.0));
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),intBitsToFloat(R126i.w)) + intBitsToFloat(PV0i.x)));
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),intBitsToFloat(R127i.z)) + intBitsToFloat(PV0i.y)));
R2i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),intBitsToFloat(R126i.x)) + intBitsToFloat(PV0i.z)));
R6i.w = backupReg0i;
R6i.w = clampFI32(R6i.w);
PS1i = R6i.w;
R11i.xy = floatBitsToInt(texture(textureUnitPS5, intBitsToFloat(R11i.xy)).xy);
R9i.x = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R9i.xy)).x);
R12i.x = floatBitsToInt(texture(textureUnitPS1, vec4(intBitsToFloat(R12i.x),intBitsToFloat(R12i.y),intBitsToFloat(R12i.z),intBitsToFloat(R12i.w))));
// 0
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.x),intBitsToFloat(R6i.x)) + intBitsToFloat(R2i.w)));
PV0i.x = R126i.x;
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(R6i.x)) + intBitsToFloat(R2i.z)));
PV0i.y = R126i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(R6i.x)) + intBitsToFloat(R2i.y)));
PV0i.z = R127i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R11i.x)),intBitsToFloat(R11i.x)) + intBitsToFloat(R11i.y)));
PV0i.w = R127i.w;
R127i.x = floatBitsToInt(intBitsToFloat(R6i.w) + -(intBitsToFloat(R11i.x)));
PS0i = R127i.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(PS0i)) + intBitsToFloat(PV0i.w)));
PS1i = R126i.w;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 3
backupReg0i = R126i.y;
backupReg1i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS0i)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
PV1i.y = R126i.y;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS0i)));
PV1i.z = R125i.z;
R125i.w = floatBitsToInt((0.0 > intBitsToFloat(backupReg1i))?1.0:0.0);
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 4
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.x), intBitsToFloat(PS1i)));
PV0i.x = R126i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(PS1i)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(PS1i)));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) * 1.0);
R124i.y = floatBitsToInt(intBitsToFloat(PV1i.y) * 1.0);
PS0i = R124i.y;
// 5
PV1i.x = floatBitsToInt(intBitsToFloat(R125i.z) * 1.0);
R125i.y = floatBitsToInt(intBitsToFloat(R127i.x) * 1.0);
PV1i.y = R125i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.w)));
PV1i.w = floatBitsToInt(intBitsToFloat(R126i.y) * 1.0);
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R126i.w));
// 6
R127i.x = PV1i.x;
R127i.x = floatBitsToInt(intBitsToFloat(R127i.x) * 2.0);
R126i.y = PV1i.w;
R126i.y = floatBitsToInt(intBitsToFloat(R126i.y) * 2.0);
R127i.z = PV1i.y;
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) * 2.0);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R124i.y)) + intBitsToFloat(PV1i.z)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(intBitsToFloat(R127i.w) * intBitsToFloat(PS1i));
// 7
backupReg0i = R125i.w;
PV1i.x = floatBitsToInt(-(intBitsToFloat(R9i.x)) + 1.0);
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(R125i.y)) + intBitsToFloat(PV0i.w)));
PV1i.y = R123i.y;
R8i.z = uf_remappedPS[2].x;
R125i.w = floatBitsToInt(max(intBitsToFloat(PS0i), intBitsToFloat(backupReg0i)));
R2i.z = uf_remappedPS[2].y;
PS1i = R2i.z;
// 8
backupReg0i = R126i.y;
R6i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + 1.0);
R6i.x = clampFI32(R6i.x);
PV0i.x = R6i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(R127i.z)) + intBitsToFloat(R126i.z)));
PV0i.y = R123i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_remappedPS[3].x)) + 0.0));
R126i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(R127i.x)) + intBitsToFloat(R126i.x)));
R126i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(backupReg0i)) + intBitsToFloat(R127i.y)));
PS0i = R126i.y;
// 9
PV1i.x = floatBitsToInt(min(intBitsToFloat(R125i.w), 1.0));
R126i.z = floatBitsToInt(-(intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(-(intBitsToFloat(R12i.x)) + 1.0);
tempResultf = log2(intBitsToFloat(PV0i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 10
backupReg0i = R125i.y;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(PS1i)));
R125i.y = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV1i.w));
R124i.z = floatBitsToInt(-(intBitsToFloat(backupReg0i)));
R125i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
R124i.x = floatBitsToInt(intBitsToFloat(R125i.z) * 1.0);
PS0i = R124i.x;
// 11
backupReg0i = R126i.z;
backupReg1i = R126i.y;
backupReg0i = R126i.z;
redcCUBE(vec4(intBitsToFloat(R126i.z),intBitsToFloat(R126i.z),intBitsToFloat(R126i.w),intBitsToFloat(backupReg1i)),vec4(intBitsToFloat(R126i.y),intBitsToFloat(R126i.w),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg0i)),cubeMapSTM,cubeMapFaceId);
R126i.x = floatBitsToInt(cubeMapSTM.x);
R126i.y = floatBitsToInt(cubeMapSTM.y);
R126i.z = floatBitsToInt(cubeMapSTM.z);
R126i.w = cubeMapFaceId;
PV1i.x = R126i.x;
PV1i.y = R126i.y;
PV1i.z = R126i.z;
PV1i.w = R126i.w;
R2i.w = floatBitsToInt(exp2(intBitsToFloat(PV0i.x)));
R2i.w = floatBitsToInt(intBitsToFloat(R2i.w) * 4.0);
R2i.w = clampFI32(R2i.w);
PS1i = R2i.w;
// 12
R12i.z = PV1i.w;
R6i.w = floatBitsToInt(intBitsToFloat(R125i.y) + intBitsToFloat(R125i.w));
R6i.w = clampFI32(R6i.w);
PS0i = floatBitsToInt(1.0 / abs(intBitsToFloat(PV1i.z)));
// 13
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(PS0i)) + 1.5));
PV1i.x = R123i.x;
R7i.z = floatBitsToInt(roundEven(0.0));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(PS0i)) + 1.5));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R5i.w));
// 14
R12i.x = PV1i.w;
R12i.y = PV1i.x;
R7i.w = floatBitsToInt(intBitsToFloat(R5i.x) * intBitsToFloat(PS1i));
R7i.y = floatBitsToInt(intBitsToFloat(R5i.y) * intBitsToFloat(PS1i));
PS0i = R7i.y;
// 15
backupReg0i = R124i.x;
backupReg0i = R124i.x;
backupReg1i = R124i.z;
backupReg2i = R124i.y;
backupReg1i = R124i.z;
redcCUBE(vec4(intBitsToFloat(R124i.z),intBitsToFloat(R124i.z),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg2i)),vec4(intBitsToFloat(R124i.y),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg1i)),cubeMapSTM,cubeMapFaceId);
R124i.x = floatBitsToInt(cubeMapSTM.x);
R124i.y = floatBitsToInt(cubeMapSTM.y);
R124i.z = floatBitsToInt(cubeMapSTM.z);
R124i.w = cubeMapFaceId;
PV1i.x = R124i.x;
PV1i.y = R124i.y;
PV1i.z = R124i.z;
PV1i.w = R124i.w;
R10i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(R14i.w)));
R10i.w = clampFI32(R10i.w);
PS1i = R10i.w;
// 16
R0i.z = PV1i.w;
PS0i = floatBitsToInt(1.0 / abs(intBitsToFloat(PV1i.z)));
// 17
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(PS0i)) + 1.5));
PV1i.x = R123i.x;
R5i.y = R7i.y;
R5i.z = floatBitsToInt(roundEven(1.0));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.y),intBitsToFloat(PS0i)) + 1.5));
PV1i.w = R123i.w;
R5i.w = R7i.w;
PS1i = R5i.w;
// 18
R0i.x = PV1i.w;
R0i.y = PV1i.x;
R6i.z = uf_remappedPS[2].z;
// 0
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.x), intBitsToFloat(uf_remappedPS[4].x)));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.y), intBitsToFloat(uf_remappedPS[4].y)));
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[1].y)),intBitsToFloat(R2i.w)) + intBitsToFloat(uf_remappedPS[1].y)));
PV0i.z = R123i.z;
R2i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[1].y) * 0.5 + 1.0));
// 1
backupReg0i = R13i.z;
R124i.y = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
R13i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_remappedPS[4].z)));
PV1i.z = R13i.z;
R123i.w = floatBitsToInt((intBitsToFloat(PV0i.z) * intBitsToFloat(0x3ecccccd) + intBitsToFloat(uf_remappedPS[1].x)));
R123i.w = clampFI32(R123i.w);
PV1i.w = R123i.w;
// 2
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].w), intBitsToFloat(uf_remappedPS[6].w)));
R12i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x40a00000));
PS0i = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3dea7371));
// 3
backupReg0i = R6i.w;
R123i.x = floatBitsToInt((intBitsToFloat(R2i.y) * intBitsToFloat(0x3f162c23) + intBitsToFloat(PS0i)));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[1].w)) + 1.0);
PV1i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[7].w) + 1.0);
R6i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(backupReg0i)));
PV1i.w = R6i.w;
// 4
R13i.x = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(0x3e990afe) + intBitsToFloat(PV1i.x)));
R13i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R124i.y)) + intBitsToFloat(uf_remappedPS[1].w)));
R3i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(uf_remappedPS[8].z)) + 1.0));
R0i.w = PV1i.w;
R11i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + 1.0);
PS0i = R11i.y;
cubeMapArrayIndex0 = intBitsToFloat(R8i.z);
R8i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, vec4(redcCUBEReverse(intBitsToFloat(R12i.xy),R12i.z),cubeMapArrayIndex0),intBitsToFloat(R12i.w)).xyzw);
cubeMapArrayIndex0 = intBitsToFloat(R2i.z);
R12i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, vec4(redcCUBEReverse(intBitsToFloat(R12i.xy),R12i.z),cubeMapArrayIndex0),intBitsToFloat(R12i.w)).xyzw);
R7i.xyz = floatBitsToInt(texture(textureUnitPS3, vec3(intBitsToFloat(R7i.w),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z))).xyz);
R0i.xyz = floatBitsToInt(textureLod(textureUnitPS2, vec4(redcCUBEReverse(intBitsToFloat(R0i.xy),R0i.z),cubeMapArrayIndex2),intBitsToFloat(R0i.w)).xyz);
R9i.xyz = floatBitsToInt(texture(textureUnitPS3, vec3(intBitsToFloat(R5i.w),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z))).xyz);
// 0
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(uf_remappedPS[9].y)));
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.y), intBitsToFloat(R2i.w)));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.x),intBitsToFloat(R3i.z)) + 0.0));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].w), intBitsToFloat(R13i.x)));
tempResultf = log2(intBitsToFloat(R8i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].y), intBitsToFloat(PS0i)));
R123i.y = floatBitsToInt((-(intBitsToFloat(PV0i.w)) * intBitsToFloat(0x3fd55554) + 1.0));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(R3i.z)) + 0.0));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(R3i.z)) + 0.0));
tempResultf = log2(intBitsToFloat(R12i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 2
backupReg0i = R124i.z;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].w), intBitsToFloat(R124i.y)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].y), intBitsToFloat(PS1i)));
R124i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(R124i.x)) + 1.0));
R127i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R0i.x));
PS0i = floatBitsToInt(exp2(intBitsToFloat(PV1i.x)));
// 3
R125i.x = floatBitsToInt(intBitsToFloat(R124i.w) + intBitsToFloat(R0i.y));
R125i.y = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(R0i.z));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].x), intBitsToFloat(PS0i)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.x),intBitsToFloat(R3i.z)) + 0.0));
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.y)));
// 4
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(PV1i.z)));
PV0i.x = R124i.x;
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.x), intBitsToFloat(PV1i.z)));
PV0i.y = R124i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].x), intBitsToFloat(PS1i)));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(PV1i.z)));
PV0i.w = R124i.w;
R8i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.y),intBitsToFloat(R3i.z)) + 0.0));
PS0i = R8i.x;
// 5
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[11].z), intBitsToFloat(uf_remappedPS[5].x)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.y),intBitsToFloat(PV0i.z)) + -(intBitsToFloat(PV0i.x))));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.x),intBitsToFloat(PV0i.z)) + -(intBitsToFloat(PV0i.y))));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[11].z), intBitsToFloat(uf_remappedPS[5].y)));
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.z),intBitsToFloat(PV0i.z)) + -(intBitsToFloat(PV0i.w))));
PS1i = R126i.x;
// 6
backupReg0i = R124i.y;
backupReg1i = R124i.x;
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R14i.y), intBitsToFloat(PV1i.w)));
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R14i.x), intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[11].z), intBitsToFloat(uf_remappedPS[5].z)));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R6i.z)) + intBitsToFloat(backupReg0i)));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R6i.z)) + intBitsToFloat(backupReg1i)));
PS0i = R126i.z;
// 7
backupReg0i = R127i.x;
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(backupReg0i)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R6i.z)) + intBitsToFloat(R124i.w)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(backupReg0i)));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R14i.z), intBitsToFloat(PV0i.z)));
R14i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.z), intBitsToFloat(backupReg0i)));
PS1i = R14i.w;
// 8
backupReg0i = R124i.y;
backupReg1i = R124i.x;
backupReg2i = R125i.x;
R125i.x = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(R125i.w));
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[9].x), intBitsToFloat(R124i.z)));
PV0i.y = R124i.y;
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R127i.w)) + 0.0));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.z),intBitsToFloat(R3i.z)) + 0.0));
PV0i.w = R123i.w;
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i)) + 0.0));
PS0i = R124i.x;
// 9
backupReg0i = R127i.x;
backupReg1i = R127i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(R125i.y)) + 0.0));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.y)));
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(R126i.y));
PV1i.w = floatBitsToInt(intBitsToFloat(R8i.x) + intBitsToFloat(R126i.z));
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PV0i.y)));
// 10
backupReg0i = R124i.y;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(R11i.y)));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(PV1i.y)) + intBitsToFloat(R124i.z)));
PV0i.y = R124i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R14i.w), intBitsToFloat(backupReg0i)));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(PS1i)) + intBitsToFloat(R124i.x)));
PV0i.w = R124i.w;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].w), intBitsToFloat(uf_remappedPS[13].x)));
PS0i = R126i.y;
// 11
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(PV0i.z)) + intBitsToFloat(backupReg0i)));
PV1i.x = R127i.x;
PV1i.z = floatBitsToInt(intBitsToFloat(R1i.y) + -(intBitsToFloat(PV0i.w)));
PV1i.w = floatBitsToInt(intBitsToFloat(R1i.x) + -(intBitsToFloat(PV0i.y)));
tempResultf = log2(intBitsToFloat(PV0i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 12
backupReg0i = R124i.w;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R1i.w)) + intBitsToFloat(R124i.y)));
PV0i.x = R125i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(R1i.z) + -(intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[14].x), intBitsToFloat(PS1i)));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R1i.w)) + intBitsToFloat(backupReg0i)));
PV0i.w = R124i.w;
// 13
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[15].w),intBitsToFloat(uf_remappedPS[12].x)) + -(intBitsToFloat(PV0i.x))));
PV1i.x = R123i.x;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R1i.w)) + intBitsToFloat(R127i.x)));
PV1i.z = R127i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[15].w),intBitsToFloat(uf_remappedPS[12].y)) + -(intBitsToFloat(PV0i.w))));
PV1i.w = R123i.w;
R124i.y = floatBitsToInt(exp2(intBitsToFloat(PV0i.z)));
R124i.y = clampFI32(R124i.y);
PS1i = R124i.y;
// 14
backupReg0i = R125i.x;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R126i.y)) + intBitsToFloat(R124i.w)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R126i.y)) + intBitsToFloat(backupReg0i)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[15].w),intBitsToFloat(uf_remappedPS[12].z)) + -(intBitsToFloat(PV1i.z))));
PV0i.z = R123i.z;
// 15
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(uf_remappedPS[16].w)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(R127i.z)));
// 16
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[13].x), intBitsToFloat(PV1i.x)));
// 17
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[15].w),intBitsToFloat(uf_remappedPS[7].y)) + -(intBitsToFloat(R125i.x))));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[15].w),intBitsToFloat(uf_remappedPS[7].x)) + -(intBitsToFloat(R125i.y))));
PV1i.z = R123i.z;
// 18
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[15].w),intBitsToFloat(uf_remappedPS[7].z)) + -(intBitsToFloat(R127i.w))));
PV0i.x = R123i.x;
R10i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R124i.w)) + intBitsToFloat(R125i.x)));
R10i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R124i.w)) + intBitsToFloat(R125i.y)));
PS0i = R10i.x;
// 19
R10i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R124i.w)) + intBitsToFloat(R127i.w)));
// export
//passPixelColor0 = vec4(intBitsToFloat(R10i.x), intBitsToFloat(R10i.y), intBitsToFloat(R10i.z), intBitsToFloat(R10i.w));
passPixelColor0 = vec4( 0.0, 0.0, 1.0, 1.0);
}
