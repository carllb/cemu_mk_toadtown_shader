#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 66513c4be5245804
uniform ivec4 uf_uniformRegisterPS[256];
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 4) out vec4 passPixelColor4;
layout(location = 5) out vec4 passPixelColor5;
layout(location = 6) out vec4 passPixelColor6;
layout(location = 7) out vec4 passPixelColor7;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R17i = ivec4(0);
ivec4 R18i = ivec4(0);
ivec4 R19i = ivec4(0);
ivec4 R20i = ivec4(0);
ivec4 R21i = ivec4(0);
ivec4 R22i = ivec4(0);
ivec4 R23i = ivec4(0);
ivec4 R24i = ivec4(0);
ivec4 R25i = ivec4(0);
ivec4 R26i = ivec4(0);
ivec4 R27i = ivec4(0);
ivec4 R28i = ivec4(0);
ivec4 R29i = ivec4(0);
ivec4 R30i = ivec4(0);
ivec4 R31i = ivec4(0);
ivec4 R32i = ivec4(0);
ivec4 R33i = ivec4(0);
ivec4 R34i = ivec4(0);
ivec4 R35i = ivec4(0);
ivec4 R36i = ivec4(0);
ivec4 R37i = ivec4(0);
ivec4 R38i = ivec4(0);
ivec4 R39i = ivec4(0);
ivec4 R40i = ivec4(0);
ivec4 R41i = ivec4(0);
ivec4 R42i = ivec4(0);
ivec4 R43i = ivec4(0);
ivec4 R44i = ivec4(0);
ivec4 R45i = ivec4(0);
ivec4 R46i = ivec4(0);
ivec4 R47i = ivec4(0);
ivec4 R48i = ivec4(0);
ivec4 R49i = ivec4(0);
ivec4 R50i = ivec4(0);
ivec4 R51i = ivec4(0);
ivec4 R52i = ivec4(0);
ivec4 R53i = ivec4(0);
ivec4 R54i = ivec4(0);
ivec4 R55i = ivec4(0);
ivec4 R56i = ivec4(0);
ivec4 R57i = ivec4(0);
ivec4 R58i = ivec4(0);
ivec4 R59i = ivec4(0);
ivec4 R60i = ivec4(0);
ivec4 R61i = ivec4(0);
ivec4 R62i = ivec4(0);
ivec4 R63i = ivec4(0);
ivec4 R64i = ivec4(0);
ivec4 R65i = ivec4(0);
ivec4 R66i = ivec4(0);
ivec4 R67i = ivec4(0);
ivec4 R68i = ivec4(0);
ivec4 R69i = ivec4(0);
ivec4 R70i = ivec4(0);
ivec4 R71i = ivec4(0);
ivec4 R72i = ivec4(0);
ivec4 R73i = ivec4(0);
ivec4 R74i = ivec4(0);
ivec4 R75i = ivec4(0);
ivec4 R76i = ivec4(0);
ivec4 R77i = ivec4(0);
ivec4 R78i = ivec4(0);
ivec4 R79i = ivec4(0);
ivec4 R80i = ivec4(0);
ivec4 R81i = ivec4(0);
ivec4 R82i = ivec4(0);
ivec4 R83i = ivec4(0);
ivec4 R84i = ivec4(0);
ivec4 R85i = ivec4(0);
ivec4 R86i = ivec4(0);
ivec4 R87i = ivec4(0);
ivec4 R88i = ivec4(0);
ivec4 R89i = ivec4(0);
ivec4 R90i = ivec4(0);
ivec4 R91i = ivec4(0);
ivec4 R92i = ivec4(0);
ivec4 R93i = ivec4(0);
ivec4 R94i = ivec4(0);
ivec4 R95i = ivec4(0);
ivec4 R96i = ivec4(0);
ivec4 R97i = ivec4(0);
ivec4 R98i = ivec4(0);
ivec4 R99i = ivec4(0);
ivec4 R100i = ivec4(0);
ivec4 R101i = ivec4(0);
ivec4 R102i = ivec4(0);
ivec4 R103i = ivec4(0);
ivec4 R104i = ivec4(0);
ivec4 R105i = ivec4(0);
ivec4 R106i = ivec4(0);
ivec4 R107i = ivec4(0);
ivec4 R108i = ivec4(0);
ivec4 R109i = ivec4(0);
ivec4 R110i = ivec4(0);
ivec4 R111i = ivec4(0);
ivec4 R112i = ivec4(0);
ivec4 R113i = ivec4(0);
ivec4 R114i = ivec4(0);
ivec4 R115i = ivec4(0);
ivec4 R116i = ivec4(0);
ivec4 R117i = ivec4(0);
ivec4 R118i = ivec4(0);
ivec4 R119i = ivec4(0);
ivec4 R120i = ivec4(0);
ivec4 R121i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
// 0
R15i.x = floatBitsToInt(max(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y)));
PV0i.x = R15i.x;
R15i.y = uf_uniformRegisterPS[16].x;
R15i.z = 0x3f800000;
R5i.w = floatBitsToInt(min(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y)));
PV0i.w = R5i.w;
R22i.x = 0;
PS0i = R22i.x;
// 1
R1i.x = PS0i;
PV1i.y = floatBitsToInt(min(intBitsToFloat(PV0i.w), 0.0));
R0i.z = floatBitsToInt(max(intBitsToFloat(PV0i.x), 0.0));
PV1i.z = R0i.z;
R4i.w = floatBitsToInt(max(intBitsToFloat(PV0i.x), intBitsToFloat(0x3e124925)));
R22i.y = 0x3f800000;
PS1i = R22i.y;
// 2
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + -(intBitsToFloat(PV1i.y)));
R127i.y = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(PV1i.z)));
R127i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(PV1i.z)));
R127i.w = floatBitsToInt(-(intBitsToFloat(PV1i.z)));
R1i.z = PS1i;
PS0i = R1i.z;
// 3
R3i.x = R22i.y;
R2i.y = R22i.x;
R2i.z = R22i.y;
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterPS[16].y)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
// 4
backupReg0i = R127i.y;
backupReg1i = R127i.z;
R4i.x = R22i.y;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PS1i)));
PV0i.y = R127i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
PV0i.z = R127i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS1i)));
PV0i.w = R127i.w;
R3i.y = R22i.x;
PS0i = R3i.y;
// 5
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + 2.0);
R126i.y = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
R126i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.w) + 4.0);
R127i.x = floatBitsToInt(floor(intBitsToFloat(PV0i.w)));
PS1i = R127i.x;
// 6
PV0i.x = floatBitsToInt(intBitsToFloat(R127i.z) + -(intBitsToFloat(R127i.y)));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R127i.w)) + intBitsToFloat(PV1i.x));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R127i.z)) + intBitsToFloat(PV1i.w));
R127i.w = floatBitsToInt(min(intBitsToFloat(R5i.w), intBitsToFloat(0x3e124925)));
R4i.z = R22i.x;
PS0i = R4i.z;
// 7
backupReg0i = R126i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R126i.y),intBitsToFloat(backupReg0i),intBitsToFloat(R15i.y)),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),intBitsToFloat(R15i.z))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.z = tempi.x;
R5i.y = R22i.y;
PS1i = R5i.y;
// 8
backupReg0i = R127i.w;
backupReg1i = R0i.x;
PV0i.x = 0x3e124925;
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(0x40c00000)));
R5i.z = R22i.x;
R127i.w = floatBitsToInt(intBitsToFloat(R4i.w) + -(intBitsToFloat(backupReg0i)));
PV0i.w = R127i.w;
R126i.y = floatBitsToInt(intBitsToFloat(backupReg1i) + -(intBitsToFloat(R4i.w)));
PS0i = R126i.y;
// 9
backupReg0i = R0i.y;
R123i.x = floatBitsToInt((intBitsToFloat(PV0i.y) * intBitsToFloat(0x3e2aaaab) + 1.0));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R4i.w)));
R9i.z = R22i.y;
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(R4i.w)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 10
backupReg0i = R126i.y;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PS1i)));
PV0i.x = R127i.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
PV0i.y = R126i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PS1i)));
PV0i.z = R127i.z;
PV0i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.x)));
R9i.x = R22i.x;
PS0i = R9i.x;
// 11
backupReg0i = R126i.z;
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + 2.0);
R7i.y = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
R126i.z = floatBitsToInt((-(intBitsToFloat(PV0i.w)) * intBitsToFloat(0x40c00000) + intBitsToFloat(backupReg0i)));
PV1i.z = R126i.z;
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + 4.0);
R7i.x = floatBitsToInt(floor(intBitsToFloat(PV0i.y)));
PS1i = R7i.x;
// 12
R8i.x = floatBitsToInt(intBitsToFloat(R127i.z) + -(intBitsToFloat(R127i.x)));
R8i.y = floatBitsToInt(-(intBitsToFloat(R126i.y)) + intBitsToFloat(PV1i.x));
R7i.z = floatBitsToInt(floor(intBitsToFloat(R127i.x)));
PV0i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.z)));
R8i.z = floatBitsToInt(-(intBitsToFloat(R127i.z)) + intBitsToFloat(PV1i.w));
PS0i = R8i.z;
// 13
R11i.x = R22i.y;
R10i.y = R22i.x;
R10i.z = R22i.y;
PV1i.w = floatBitsToInt(intBitsToFloat(R126i.z) + -(intBitsToFloat(PV0i.w)));
R6i.x = int(intBitsToFloat(PV0i.w));
PS1i = R6i.x;
// 14
R12i.x = R22i.y;
R11i.y = R22i.x;
R22i.z = PV1i.w;
PV0i.z = R22i.z;
R126i.w = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
PV0i.w = R126i.w;
R12i.z = R22i.x;
PS0i = R12i.z;
// 15
R2i.x = PV0i.z;
R1i.y = PV0i.w;
R3i.z = PV0i.w;
R3i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(uf_uniformRegisterPS[16].y)));
R4i.y = PV0i.z;
PS1i = R4i.y;
// 16
R5i.x = R126i.w;
R13i.y = R22i.y;
R13i.z = R22i.x;
R7i.w = floatBitsToInt(max(intBitsToFloat(R15i.x), intBitsToFloat(0x3e924925)));
R14i.x = R22i.x;
PS0i = R14i.x;
// 17
R45i.xyz = ivec3(R1i.x,R1i.y,R1i.z);
// 18
R46i.xyz = ivec3(R2i.x,R2i.y,R2i.z);
// 19
R47i.xyz = ivec3(R3i.x,R3i.y,R3i.z);
// 20
R48i.xyz = ivec3(R4i.x,R4i.y,R4i.z);
// 21
R49i.xyz = ivec3(R5i.x,R5i.y,R5i.z);
// 22
R50i.xyz = ivec3(R22i.x,R22i.y,R22i.z);
// 23
tempResulti = R6i.x;
tempResulti = clamp(tempResulti, -256, 255);
ARi.x = tempResulti;
PV1i.x = tempResulti;
// 24
R6i.xyz = ivec3(((ARi.x==0)?R45i.x:(ARi.x==1)?R46i.x:(ARi.x==2)?R47i.x:(ARi.x==3)?R48i.x:(ARi.x==4)?R49i.x:(ARi.x==5)?R50i.x:(ARi.x==6)?R51i.x:(ARi.x==7)?R52i.x:(ARi.x==8)?R53i.x:(ARi.x==9)?R54i.x:(ARi.x==10)?R55i.x:(ARi.x==11)?R56i.x:(ARi.x==12)?R57i.x:(ARi.x==78)?R123i.x:(ARi.x==79)?R124i.x:(ARi.x==80)?R125i.x:(ARi.x==81)?R126i.x:(ARi.x==82)?R127i.x:0),((ARi.x==0)?R45i.y:(ARi.x==1)?R46i.y:(ARi.x==2)?R47i.y:(ARi.x==3)?R48i.y:(ARi.x==4)?R49i.y:(ARi.x==5)?R50i.y:(ARi.x==6)?R51i.y:(ARi.x==7)?R52i.y:(ARi.x==8)?R53i.y:(ARi.x==9)?R54i.y:(ARi.x==10)?R55i.y:(ARi.x==11)?R56i.y:(ARi.x==12)?R57i.y:(ARi.x==78)?R123i.y:(ARi.x==79)?R124i.y:(ARi.x==80)?R125i.y:(ARi.x==81)?R126i.y:(ARi.x==82)?R127i.y:0),((ARi.x==0)?R45i.z:(ARi.x==1)?R46i.z:(ARi.x==2)?R47i.z:(ARi.x==3)?R48i.z:(ARi.x==4)?R49i.z:(ARi.x==5)?R50i.z:(ARi.x==6)?R51i.z:(ARi.x==7)?R52i.z:(ARi.x==8)?R53i.z:(ARi.x==9)?R54i.z:(ARi.x==10)?R55i.z:(ARi.x==11)?R56i.z:(ARi.x==12)?R57i.z:(ARi.x==78)?R123i.z:(ARi.x==79)?R124i.z:(ARi.x==80)?R125i.z:(ARi.x==81)?R126i.z:(ARi.x==82)?R127i.z:0));
// 0
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R0i.w)),intBitsToFloat(R6i.y)) + intBitsToFloat(R0i.z)));
PV0i.x = R123i.x;
R14i.y = R22i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R0i.w)),intBitsToFloat(R6i.z)) + intBitsToFloat(R0i.z)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R0i.w)),intBitsToFloat(R6i.x)) + intBitsToFloat(R0i.z)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(min(intBitsToFloat(R5i.w), intBitsToFloat(0x3e924925)));
// 1
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.x = clampFI32(R127i.x);
PV1i.x = R127i.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R126i.y = clampFI32(R126i.y);
PV1i.y = R126i.y;
PV1i.z = 0x3e924925;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R126i.w = clampFI32(R126i.w);
PV1i.w = R126i.w;
R0i.w = floatBitsToInt(intBitsToFloat(R7i.w) + -(intBitsToFloat(PS0i)));
PS1i = R0i.w;
// 2
R126i.x = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R7i.w)));
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(uf_uniformRegisterPS[22].y)) + intBitsToFloat(uf_uniformRegisterPS[22].y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(uf_uniformRegisterPS[22].x)) + intBitsToFloat(uf_uniformRegisterPS[22].x)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.x)),intBitsToFloat(uf_uniformRegisterPS[22].z)) + intBitsToFloat(uf_uniformRegisterPS[22].z)));
PV0i.w = R123i.w;
R125i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + -(intBitsToFloat(R7i.w)));
PS0i = R125i.x;
// 3
PV1i.x = floatBitsToInt(intBitsToFloat(R126i.y) + intBitsToFloat(PV0i.z));
R126i.yzw = floatBitsToInt(vec3(intBitsToFloat(R127i.x),intBitsToFloat(R126i.w),intBitsToFloat(R0i.y)) + vec3(intBitsToFloat(PV0i.w),intBitsToFloat(PV0i.y),-(intBitsToFloat(R7i.w))));
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(R0i.w));
PS1i = R127i.w;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),intBitsToFloat(R15i.y)),vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),intBitsToFloat(R15i.z))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
tempResultf = log2(intBitsToFloat(PV1i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 5
backupReg0i = R126i.z;
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(0x40c00000)));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(R127i.w)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].x)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(R127i.w)));
PV1i.w = R125i.w;
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 6
backupReg0i = R126i.y;
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x3e2aaaab) + 1.0));
PV0i.x = R123i.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(R127i.w)));
PV0i.y = R126i.y;
R127i.z = floatBitsToInt(intBitsToFloat(PV1i.w) + 2.0);
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[19].y)));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 7
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].z)));
R7i.y = floatBitsToInt(floor(intBitsToFloat(PV0i.y)));
PV1i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.x)));
R126i.w = floatBitsToInt(intBitsToFloat(R125i.y) + 4.0);
R125i.x = floatBitsToInt(exp2(intBitsToFloat(R126i.z)));
PS1i = R125i.x;
// 8
backupReg0i = R127i.y;
R127i.x = floatBitsToInt(floor(intBitsToFloat(R125i.y)));
R127i.y = floatBitsToInt((-(intBitsToFloat(PV1i.z)) * intBitsToFloat(0x40c00000) + intBitsToFloat(backupReg0i)));
PV0i.y = R127i.y;
R126i.z = floatBitsToInt(floor(intBitsToFloat(R125i.w)));
R124i.w = floatBitsToInt(intBitsToFloat(R126i.y) + -(intBitsToFloat(R125i.w)));
R124i.y = floatBitsToInt(exp2(intBitsToFloat(R127i.w)));
PS0i = R124i.y;
// 9
backupReg0i = R126i.y;
R1i.x = R22i.x;
R126i.y = floatBitsToInt(-(intBitsToFloat(R125i.y)) + intBitsToFloat(R127i.z));
R125i.z = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(R126i.w));
R1i.w = floatBitsToInt(floor(intBitsToFloat(PV0i.y)));
PV1i.w = R1i.w;
R127i.z = floatBitsToInt(exp2(intBitsToFloat(R126i.x)));
PS1i = R127i.z;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R124i.y),intBitsToFloat(PS1i),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.w = tempi.x;
PS0i = floatBitsToInt(intBitsToFloat(R127i.y) + -(intBitsToFloat(PV1i.w)));
// 11
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.z) + -(intBitsToFloat(PV0i.x)));
PV1i.y = floatBitsToInt(intBitsToFloat(R124i.y) + -(intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(intBitsToFloat(R125i.x) + -(intBitsToFloat(PV0i.x)));
R127i.w = floatBitsToInt(-(intBitsToFloat(PS0i)) + 1.0);
PV1i.w = R127i.w;
R125i.w = PS0i;
PS1i = R125i.w;
// 12
backupReg0i = R126i.w;
R10i.x = PS1i;
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(R126i.w)));
R124i.y = clampFI32(R124i.y);
PV0i.y = R124i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(R126i.w)));
R127i.z = clampFI32(R127i.z);
PV0i.z = R127i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R126i.w = clampFI32(R126i.w);
PV0i.w = R126i.w;
R9i.y = PV1i.w;
PS0i = R9i.y;
// 13
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.w)),intBitsToFloat(uf_uniformRegisterPS[23].x)) + intBitsToFloat(uf_uniformRegisterPS[23].x)));
PV1i.x = R123i.x;
R12i.y = R125i.w;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.y)),intBitsToFloat(uf_uniformRegisterPS[23].z)) + intBitsToFloat(uf_uniformRegisterPS[23].z)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.z)),intBitsToFloat(uf_uniformRegisterPS[23].y)) + intBitsToFloat(uf_uniformRegisterPS[23].y)));
PV1i.w = R123i.w;
R11i.z = R127i.w;
PS1i = R11i.z;
// 14
backupReg0i = R127i.w;
R125i.x = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV1i.w));
PV0i.y = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(PV1i.x));
R14i.z = R125i.w;
R127i.w = floatBitsToInt(intBitsToFloat(R124i.y) + intBitsToFloat(PV1i.z));
R13i.x = backupReg0i;
PS0i = R13i.x;
// 15
backupReg0i = R125i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R7i.y),intBitsToFloat(R126i.z),intBitsToFloat(R15i.y)),vec4(intBitsToFloat(R124i.w),intBitsToFloat(R126i.y),intBitsToFloat(backupReg0i),intBitsToFloat(R15i.z))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R125i.z = tempi.x;
tempResultf = log2(intBitsToFloat(PV0i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 16
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(0x40c00000)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].x)));
R1i.z = R22i.y;
R6i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(uf_uniformRegisterPS[16].y)));
tempResultf = log2(intBitsToFloat(R125i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 17
R123i.x = floatBitsToInt((intBitsToFloat(PV0i.x) * intBitsToFloat(0x3e2aaaab) + 1.0));
PV1i.x = R123i.x;
R16i.y = R22i.x;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[20].y)));
R8i.w = floatBitsToInt(max(intBitsToFloat(R15i.x), intBitsToFloat(0x3edb6db8)));
tempResultf = log2(intBitsToFloat(R127i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 18
backupReg0i = R126i.y;
R17i.x = R22i.y;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].z)));
R16i.z = R22i.y;
PV0i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.x)));
R7i.x = floatBitsToInt(exp2(intBitsToFloat(backupReg0i)));
PS0i = R7i.x;
// 19
R18i.x = R22i.y;
R17i.y = R22i.x;
R8i.z = floatBitsToInt((-(intBitsToFloat(PV0i.w)) * intBitsToFloat(0x40c00000) + intBitsToFloat(R125i.z)));
PV1i.z = R8i.z;
R0i.w = floatBitsToInt(min(intBitsToFloat(R5i.w), intBitsToFloat(0x3edb6db8)));
R7i.y = floatBitsToInt(exp2(intBitsToFloat(R126i.z)));
PS1i = R7i.y;
// 20
R20i.x = R22i.x;
R8i.y = floatBitsToInt(floor(intBitsToFloat(PV1i.z)));
R18i.z = R22i.x;
R2i.w = 0x3edb6db8;
R7i.z = floatBitsToInt(exp2(intBitsToFloat(R126i.y)));
PS0i = R7i.z;
// 21
backupReg0i = R1i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(PS0i),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R1i.w = tempi.x;
R8i.x = int(intBitsToFloat(backupReg0i));
PS1i = R8i.x;
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R7i.x) + -(intBitsToFloat(R1i.w)));
PV0i.y = floatBitsToInt(intBitsToFloat(R7i.z) + -(intBitsToFloat(R1i.w)));
PV0i.z = floatBitsToInt(intBitsToFloat(R7i.y) + -(intBitsToFloat(R1i.w)));
PV0i.w = floatBitsToInt(intBitsToFloat(R8i.z) + -(intBitsToFloat(R8i.y)));
R19i.y = R22i.y;
PS0i = R19i.y;
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R1i.w)));
R123i.x = clampFI32(R123i.x);
PV1i.x = R123i.x;
R126i.y = floatBitsToInt(-(intBitsToFloat(PV0i.w)) + 1.0);
PV1i.y = R126i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R1i.w)));
R123i.z = clampFI32(R123i.z);
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R1i.w)));
R123i.w = clampFI32(R123i.w);
PV1i.w = R123i.w;
R127i.w = PV0i.w;
PS1i = R127i.w;
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + -(0.5));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.w) + -(0.5));
R17i.z = PV1i.y;
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + -(0.5));
R1i.y = PV1i.y;
PS0i = R1i.y;
// 3
R16i.x = R127i.w;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.w = R123i.w;
R18i.y = R127i.w;
PS1i = R18i.y;
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(uf_uniformRegisterPS[21].x)));
PV0i.x = clampFI32(PV0i.x);
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(uf_uniformRegisterPS[21].z)));
PV0i.y = clampFI32(PV0i.y);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(uf_uniformRegisterPS[21].y)));
PV0i.z = clampFI32(PV0i.z);
R126i.w = floatBitsToInt(intBitsToFloat(R8i.w) + -(intBitsToFloat(R0i.w)));
R19i.x = R126i.y;
PS0i = R19i.x;
// 5
R125i.x = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x40e00000));
PV1i.x = R125i.x;
R20i.y = R22i.y;
R126i.z = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x40e00000));
PV1i.z = R126i.z;
R124i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x40e00000));
PV1i.w = R124i.w;
R19i.z = R22i.x;
PS1i = R19i.z;
// 6
R127i.x = floatBitsToInt(floor(intBitsToFloat(PV1i.z)));
PV0i.x = R127i.x;
PV0i.y = floatBitsToInt(floor(intBitsToFloat(PV1i.w)));
R20i.z = R127i.w;
R127i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.x)));
PV0i.w = R127i.w;
R21i.x = int(intBitsToFloat(R8i.y));
PS0i = R21i.x;
// 7
backupReg0i = R125i.x;
R125i.x = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R8i.w)));
R8i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(PV0i.w)));
R124i.z = floatBitsToInt(intBitsToFloat(R124i.w) + -(intBitsToFloat(PV0i.y)));
R125i.w = floatBitsToInt(intBitsToFloat(R126i.z) + -(intBitsToFloat(PV0i.x)));
R126i.z = int(intBitsToFloat(PV0i.y));
PS1i = R126i.z;
// 8
backupReg0i = R127i.w;
R23i.x = R22i.x;
R24i.y = R22i.x;
R127i.z = floatBitsToInt(intBitsToFloat(R2i.w) + -(intBitsToFloat(R8i.w)));
R124i.w = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R8i.w)));
R127i.w = int(intBitsToFloat(backupReg0i));
PS0i = R127i.w;
// 9
R25i.x = R22i.y;
R25i.y = R22i.x;
R23i.z = R22i.y;
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(uf_uniformRegisterPS[16].y)));
R125i.z = int(intBitsToFloat(R127i.x));
PS1i = R125i.z;
// 10
R26i.x = R22i.y;
R27i.y = R22i.y;
R24i.z = R22i.y;
R10i.w = floatBitsToInt(max(intBitsToFloat(R15i.x), intBitsToFloat(0x3f124925)));
R126i.y = floatBitsToInt(float(R126i.z));
PS0i = R126i.y;
// 11
backupReg0i = R127i.w;
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV1i.x = floatBitsToInt(tempResultf);
R28i.y = R22i.y;
R26i.z = R22i.x;
R127i.w = floatBitsToInt(min(intBitsToFloat(R5i.w), intBitsToFloat(0x3f124925)));
R127i.x = floatBitsToInt(float(backupReg0i));
PS1i = R127i.x;
// 12
R28i.x = R22i.x;
tempResultf = intBitsToFloat(PS1i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
R27i.z = R22i.x;
PV0i.w = 0x3f124925;
R127i.y = floatBitsToInt(float(R125i.z));
PS0i = R127i.y;
// 13
R6i.x = floatBitsToInt(intBitsToFloat(R10i.w) + -(intBitsToFloat(R127i.w)));
PV1i.x = R6i.x;
R124i.y = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R10i.w)));
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV1i.z = floatBitsToInt(tempResultf);
R127i.w = floatBitsToInt(intBitsToFloat(PV0i.w) + -(intBitsToFloat(R10i.w)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R126i.w));
// 14
backupReg0i = R125i.x;
backupReg1i = R127i.z;
backupReg2i = R124i.w;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
PV0i.x = R125i.x;
R125i.y = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R10i.w)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS1i)));
PV0i.z = R127i.z;
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(PS1i)));
PV0i.w = R124i.w;
R125i.z = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R125i.z;
// 15
R5i.x = floatBitsToInt(floor(intBitsToFloat(PV0i.x)));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + 2.0);
R7i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + 4.0);
R7i.y = floatBitsToInt(floor(intBitsToFloat(PV0i.w)));
PS1i = R7i.y;
// 16
R4i.x = floatBitsToInt(intBitsToFloat(R124i.w) + -(intBitsToFloat(R127i.z)));
PV0i.y = uf_uniformRegisterPS[ARi.x+8].x;
R0i.z = floatBitsToInt(-(intBitsToFloat(R124i.w)) + intBitsToFloat(PV1i.w));
R124i.w = uf_uniformRegisterPS[ARi.x+0].x;
PV0i.w = R124i.w;
R6i.y = floatBitsToInt(-(intBitsToFloat(R125i.x)) + intBitsToFloat(PV1i.y));
PS0i = R6i.y;
// 17
backupReg0i = R127i.w;
R127i.x = uf_uniformRegisterPS[ARi.y+0].y;
PV1i.x = R127i.x;
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.y));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R125i.z)));
PV1i.w = uf_uniformRegisterPS[ARi.y+8].y;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R125i.z)));
PS1i = R127i.w;
// 18
backupReg0i = R125i.z;
PV0i.x = uf_uniformRegisterPS[ARi.z+8].z;
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.w));
R125i.z = uf_uniformRegisterPS[ARi.z+0].z;
PV0i.z = R125i.z;
R2i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(backupReg0i)));
R38i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R124i.z)) + intBitsToFloat(R124i.w)));
R38i.x = clampFI32(R38i.x);
PS0i = R38i.x;
// 19
R7i.x = floatBitsToInt(intBitsToFloat(R127i.z) + 4.0);
R38i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R8i.y)) + intBitsToFloat(R127i.x)));
R38i.y = clampFI32(R38i.y);
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.w) + 2.0);
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.x));
R3i.x = floatBitsToInt(floor(intBitsToFloat(R127i.z)));
PS1i = R3i.x;
// 20
R2i.x = floatBitsToInt(floor(intBitsToFloat(R127i.w)));
R5i.y = floatBitsToInt(floor(intBitsToFloat(R2i.w)));
R38i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R125i.w)) + intBitsToFloat(R125i.z)));
R38i.z = clampFI32(R38i.z);
R0i.w = floatBitsToInt(intBitsToFloat(R2i.w) + -(intBitsToFloat(R127i.w)));
R4i.y = floatBitsToInt(-(intBitsToFloat(R127i.z)) + intBitsToFloat(PV1i.z));
PS0i = R4i.y;
// 21
R51i.xyz = ivec3(R38i.x,R38i.y,R38i.z);
// 22
R45i.xyz = ivec3(R9i.x,R9i.y,R9i.z);
// 23
R46i.xyz = ivec3(R10i.x,R10i.y,R10i.z);
// 24
R47i.xyz = ivec3(R11i.x,R11i.y,R11i.z);
// 25
R48i.xyz = ivec3(R12i.x,R12i.y,R12i.z);
// 0
R49i.xyz = ivec3(R13i.x,R13i.y,R13i.z);
// 1
R50i.xyz = ivec3(R14i.x,R14i.y,R14i.z);
// 2
tempResulti = R8i.x;
tempResulti = clamp(tempResulti, -256, 255);
ARi.x = tempResulti;
PV0i.x = tempResulti;
// 3
R8i.xyz = ivec3(((ARi.x==0)?R45i.x:(ARi.x==1)?R46i.x:(ARi.x==2)?R47i.x:(ARi.x==3)?R48i.x:(ARi.x==4)?R49i.x:(ARi.x==5)?R50i.x:(ARi.x==6)?R51i.x:(ARi.x==7)?R52i.x:(ARi.x==8)?R53i.x:(ARi.x==9)?R54i.x:(ARi.x==10)?R55i.x:(ARi.x==11)?R56i.x:(ARi.x==12)?R57i.x:(ARi.x==78)?R123i.x:(ARi.x==79)?R124i.x:(ARi.x==80)?R125i.x:(ARi.x==81)?R126i.x:(ARi.x==82)?R127i.x:0),((ARi.x==0)?R45i.y:(ARi.x==1)?R46i.y:(ARi.x==2)?R47i.y:(ARi.x==3)?R48i.y:(ARi.x==4)?R49i.y:(ARi.x==5)?R50i.y:(ARi.x==6)?R51i.y:(ARi.x==7)?R52i.y:(ARi.x==8)?R53i.y:(ARi.x==9)?R54i.y:(ARi.x==10)?R55i.y:(ARi.x==11)?R56i.y:(ARi.x==12)?R57i.y:(ARi.x==78)?R123i.y:(ARi.x==79)?R124i.y:(ARi.x==80)?R125i.y:(ARi.x==81)?R126i.y:(ARi.x==82)?R127i.y:0),((ARi.x==0)?R45i.z:(ARi.x==1)?R46i.z:(ARi.x==2)?R47i.z:(ARi.x==3)?R48i.z:(ARi.x==4)?R49i.z:(ARi.x==5)?R50i.z:(ARi.x==6)?R51i.z:(ARi.x==7)?R52i.z:(ARi.x==8)?R53i.z:(ARi.x==9)?R54i.z:(ARi.x==10)?R55i.z:(ARi.x==11)?R56i.z:(ARi.x==12)?R57i.z:(ARi.x==78)?R123i.z:(ARi.x==79)?R124i.z:(ARi.x==80)?R125i.z:(ARi.x==81)?R126i.z:(ARi.x==82)?R127i.z:0));
// 0
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.w)),intBitsToFloat(R8i.y)) + intBitsToFloat(R4i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.w)),intBitsToFloat(R8i.x)) + intBitsToFloat(R4i.w)));
PV0i.y = R123i.y;
R125i.z = floatBitsToInt(-(intBitsToFloat(R2i.w)) + intBitsToFloat(R7i.x));
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.w)),intBitsToFloat(R8i.z)) + intBitsToFloat(R4i.w)));
PV0i.w = R123i.w;
R14i.x = R22i.x;
PS0i = R14i.x;
// 1
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.x = clampFI32(R127i.x);
PV1i.x = R127i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.y = clampFI32(R127i.y);
PV1i.y = R127i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.z = clampFI32(R127i.z);
PV1i.z = R127i.z;
R9i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(uf_uniformRegisterPS[16].y)));
R14i.z = R22i.y;
PS1i = R14i.z;
// 2
R12i.x = R22i.y;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.x)),intBitsToFloat(uf_uniformRegisterPS[22].z)) + intBitsToFloat(uf_uniformRegisterPS[22].z)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(uf_uniformRegisterPS[22].y)) + intBitsToFloat(uf_uniformRegisterPS[22].y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.z)),intBitsToFloat(uf_uniformRegisterPS[22].x)) + intBitsToFloat(uf_uniformRegisterPS[22].x)));
PV0i.w = R123i.w;
R13i.y = R22i.x;
PS0i = R13i.y;
// 3
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV0i.w));
R12i.y = R22i.x;
R127i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.y));
PV1i.w = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV0i.z));
R13i.z = R22i.y;
PS1i = R13i.z;
// 4
backupReg0i = R0i.z;
R125i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),intBitsToFloat(R15i.y)),vec4(intBitsToFloat(R4i.x),intBitsToFloat(R6i.y),intBitsToFloat(backupReg0i),intBitsToFloat(R15i.z))));
PV0i.x = R125i.x;
PV0i.y = R125i.x;
PV0i.z = R125i.x;
PV0i.w = R125i.x;
tempResultf = log2(intBitsToFloat(PV1i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 5
backupReg0i = R127i.z;
R11i.x = R22i.y;
R10i.y = R22i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].y)));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(0x40c00000)));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 6
R9i.x = R22i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[19].z)));
R123i.z = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x3e2aaaab) + 1.0));
PV0i.z = R123i.z;
R12i.w = floatBitsToInt(max(intBitsToFloat(R15i.x), intBitsToFloat(0x3f36db6e)));
tempResultf = log2(intBitsToFloat(R127i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 7
PV1i.x = floatBitsToInt(min(intBitsToFloat(R5i.w), intBitsToFloat(0x3f36db6e)));
PV1i.y = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
R11i.z = R22i.x;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].x)));
R125i.y = floatBitsToInt(exp2(intBitsToFloat(R127i.z)));
PS1i = R125i.y;
// 8
R4i.x = floatBitsToInt(intBitsToFloat(R12i.w) + -(intBitsToFloat(PV1i.x)));
R9i.y = R22i.y;
R10i.z = R22i.x;
R125i.w = floatBitsToInt((-(intBitsToFloat(PV1i.y)) * intBitsToFloat(0x40c00000) + intBitsToFloat(R125i.x)));
PV0i.w = R125i.w;
R127i.z = floatBitsToInt(exp2(intBitsToFloat(R127i.y)));
PS0i = R127i.z;
// 9
backupReg0i = R127i.w;
R5i.x = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R12i.w)));
R7i.y = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R12i.w)));
R126i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.w)));
PV1i.z = R126i.z;
R127i.w = 0x3f36db6e;
R125i.x = floatBitsToInt(exp2(intBitsToFloat(backupReg0i)));
PS1i = R125i.x;
// 10
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS1i),intBitsToFloat(R125i.y),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV0i.x = R127i.x;
PV0i.y = R127i.x;
PV0i.z = R127i.x;
PV0i.w = R127i.x;
PS0i = floatBitsToInt(intBitsToFloat(R125i.w) + -(intBitsToFloat(PV1i.z)));
// 11
backupReg0i = R125i.x;
R125i.x = floatBitsToInt(-(intBitsToFloat(PS0i)) + 1.0);
PV1i.x = R125i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.z) + -(intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(intBitsToFloat(R125i.y) + -(intBitsToFloat(PV0i.x)));
PV1i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(PV0i.x)));
R124i.w = PS0i;
PS1i = R124i.w;
// 12
backupReg0i = R127i.x;
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R127i.x = clampFI32(R127i.x);
PV0i.x = R127i.x;
R23i.y = PV1i.x;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R127i.z = clampFI32(R127i.z);
PV0i.z = R127i.z;
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R125i.w = clampFI32(R125i.w);
PV0i.w = R125i.w;
R24i.x = PS1i;
PS0i = R24i.x;
// 13
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.w)),intBitsToFloat(uf_uniformRegisterPS[23].y)) + intBitsToFloat(uf_uniformRegisterPS[23].y)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(uf_uniformRegisterPS[23].x)) + intBitsToFloat(uf_uniformRegisterPS[23].x)));
PV1i.y = R123i.y;
R25i.z = R125i.x;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.z)),intBitsToFloat(uf_uniformRegisterPS[23].z)) + intBitsToFloat(uf_uniformRegisterPS[23].z)));
PV1i.w = R123i.w;
R26i.y = R124i.w;
PS1i = R26i.y;
// 14
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV1i.w));
PV0i.y = floatBitsToInt(intBitsToFloat(R125i.w) + intBitsToFloat(PV1i.x));
R127i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.y));
R2i.w = floatBitsToInt(intBitsToFloat(R127i.w) + -(intBitsToFloat(R12i.w)));
R27i.x = R125i.x;
PS0i = R27i.x;
// 15
R29i.x = R22i.x;
R30i.y = R22i.x;
R28i.z = R124i.w;
R11i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(uf_uniformRegisterPS[16].y)));
tempResultf = log2(intBitsToFloat(PV0i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 16
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].y)));
R31i.y = R22i.x;
R29i.z = R22i.y;
R13i.w = floatBitsToInt(max(intBitsToFloat(R15i.x), intBitsToFloat(0x3f5b6db7)));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 17
backupReg0i = R127i.z;
R31i.x = R22i.y;
R33i.y = R22i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[20].z)));
PV1i.w = floatBitsToInt(min(intBitsToFloat(R5i.w), intBitsToFloat(0x3f5b6db7)));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 18
R32i.x = R22i.y;
R34i.y = R22i.y;
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].x)));
R3i.w = floatBitsToInt(intBitsToFloat(R13i.w) + -(intBitsToFloat(PV1i.w)));
R6i.y = floatBitsToInt(exp2(intBitsToFloat(R127i.x)));
PS0i = R6i.y;
// 19
backupReg0i = R5i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R2i.x),intBitsToFloat(R15i.y)),vec4(intBitsToFloat(R0i.w),intBitsToFloat(R4i.y),intBitsToFloat(R125i.z),intBitsToFloat(R15i.z))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R5i.y = tempi.x;
R0i.z = floatBitsToInt(exp2(intBitsToFloat(R127i.z)));
PS1i = R0i.z;
// 20
R3i.x = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(0x40c00000)));
R8i.y = 0x3f5b6db7;
R30i.z = R22i.y;
R0i.w = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R13i.w)));
R2i.x = floatBitsToInt(exp2(intBitsToFloat(R124i.z)));
PS0i = R2i.x;
// 21
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS0i),intBitsToFloat(R6i.y),intBitsToFloat(backupReg0i),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R4i.y = tempi.x;
R6i.x = int(intBitsToFloat(R126i.z));
PS1i = R6i.x;
// 0
backupReg0i = R0i.z;
PV0i.x = floatBitsToInt(intBitsToFloat(R2i.x) + -(intBitsToFloat(R4i.y)));
R123i.y = floatBitsToInt((intBitsToFloat(R3i.x) * intBitsToFloat(0x3e2aaaab) + 1.0));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R4i.y)));
PV0i.w = floatBitsToInt(intBitsToFloat(R6i.y) + -(intBitsToFloat(R4i.y)));
R127i.x = floatBitsToInt(1.0 / intBitsToFloat(R4i.x));
PS0i = R127i.x;
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R4i.y)));
R123i.x = clampFI32(R123i.x);
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R4i.y)));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.y)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R4i.y)));
R123i.w = clampFI32(R123i.w);
PV1i.w = R123i.w;
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(PS0i)));
PS1i = R124i.y;
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + -(0.5));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + -(0.5));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.y) + -(0.5));
R124i.w = floatBitsToInt((-(intBitsToFloat(PV1i.z)) * intBitsToFloat(0x40c00000) + intBitsToFloat(R5i.y)));
PV0i.w = R124i.w;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(R127i.x)));
PS0i = R126i.w;
// 3
PV1i.x = floatBitsToInt(floor(intBitsToFloat(PV0i.w)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.w = R123i.w;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.y), intBitsToFloat(R127i.x)));
PS1i = R127i.z;
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(uf_uniformRegisterPS[21].x)));
PV0i.x = clampFI32(PV0i.x);
PV0i.y = floatBitsToInt(intBitsToFloat(R124i.w) + -(intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(uf_uniformRegisterPS[21].z)));
PV0i.z = clampFI32(PV0i.z);
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(uf_uniformRegisterPS[21].y)));
PV0i.w = clampFI32(PV0i.w);
R2i.x = int(intBitsToFloat(PV1i.x));
PS0i = R2i.x;
// 5
R127i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x40e00000));
PV1i.x = R127i.x;
R125i.y = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x40e00000));
PV1i.y = R125i.y;
R124i.z = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
PV1i.z = R124i.z;
R124i.w = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x40e00000));
PV1i.w = R124i.w;
R127i.w = PV0i.y;
PS1i = R127i.w;
// 6
PV0i.x = floatBitsToInt(floor(intBitsToFloat(PV1i.w)));
R127i.y = floatBitsToInt(floor(intBitsToFloat(PV1i.x)));
PV0i.y = R127i.y;
R126i.z = floatBitsToInt(floor(intBitsToFloat(PV1i.y)));
PV0i.z = R126i.z;
R125i.w = floatBitsToInt(intBitsToFloat(R124i.y) + 2.0);
R14i.y = PV1i.z;
PS0i = R14i.y;
// 7
R13i.x = R127i.w;
R7i.y = floatBitsToInt(intBitsToFloat(R124i.w) + -(intBitsToFloat(PV0i.x)));
R125i.z = floatBitsToInt(intBitsToFloat(R127i.x) + -(intBitsToFloat(PV0i.y)));
R4i.w = floatBitsToInt(intBitsToFloat(R125i.y) + -(intBitsToFloat(PV0i.z)));
R2i.w = int(intBitsToFloat(PV0i.x));
PS1i = R2i.w;
// 8
R10i.x = R124i.z;
R11i.y = R127i.w;
R12i.z = R124i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(R126i.w) + 4.0);
R124i.w = int(intBitsToFloat(R126i.z));
PS0i = R124i.w;
// 9
backupReg0i = R127i.y;
R125i.x = floatBitsToInt(-(intBitsToFloat(R127i.z)) + intBitsToFloat(PV0i.w));
R125i.y = floatBitsToInt(floor(intBitsToFloat(R127i.z)));
R9i.z = R127i.w;
R127i.w = floatBitsToInt(floor(intBitsToFloat(R124i.y)));
R127i.y = int(intBitsToFloat(backupReg0i));
PS1i = R127i.y;
// 10
R127i.x = floatBitsToInt(intBitsToFloat(R127i.z) + -(intBitsToFloat(R124i.y)));
R124i.y = floatBitsToInt(-(intBitsToFloat(R126i.w)) + intBitsToFloat(R125i.w));
R127i.z = floatBitsToInt(floor(intBitsToFloat(R126i.w)));
R14i.w = floatBitsToInt(max(intBitsToFloat(R15i.x), 1.0));
R126i.z = floatBitsToInt(float(R124i.w));
PS0i = R126i.z;
// 11
backupReg0i = R127i.y;
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV1i.x = floatBitsToInt(tempResultf);
R127i.y = floatBitsToInt(intBitsToFloat(R8i.y) + -(intBitsToFloat(R13i.w)));
R32i.z = R22i.x;
R126i.w = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R13i.w)));
R126i.x = floatBitsToInt(float(backupReg0i));
PS1i = R126i.x;
// 12
backupReg0i = R2i.w;
R34i.x = R22i.x;
tempResultf = intBitsToFloat(PS1i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
R33i.z = R22i.x;
R2i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(uf_uniformRegisterPS[16].y)));
R124i.z = floatBitsToInt(float(backupReg0i));
PS0i = R124i.z;
// 13
backupReg0i = R3i.w;
R4i.x = R22i.x;
R35i.y = R22i.x;
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV1i.z = floatBitsToInt(tempResultf);
R3i.w = floatBitsToInt(min(intBitsToFloat(R5i.w), 1.0));
R126i.y = floatBitsToInt(1.0 / intBitsToFloat(backupReg0i));
PS1i = R126i.y;
// 14
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.z),intBitsToFloat(R125i.y),intBitsToFloat(R127i.w),intBitsToFloat(R15i.y)),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R124i.y),intBitsToFloat(R125i.x),intBitsToFloat(R15i.z))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = tempi.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(PS1i)));
PS0i = R127i.x;
// 15
backupReg0i = R126i.w;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R126i.y)));
PV1i.x = R125i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(PS0i) + 4.0);
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(0x40c00000)));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R126i.y)));
PV1i.w = R126i.w;
R15i.x = floatBitsToInt(floor(intBitsToFloat(PS0i)));
PS1i = R15i.x;
// 16
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.z) * intBitsToFloat(0x3e2aaaab) + 1.0));
PV0i.x = R123i.x;
R127i.y = uf_uniformRegisterPS[ARi.x+0].x;
PV0i.y = R127i.y;
PV0i.z = uf_uniformRegisterPS[ARi.x+8].x;
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + 2.0);
R7i.z = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.y));
PS0i = R7i.z;
// 17
backupReg0i = R127i.x;
R127i.x = uf_uniformRegisterPS[ARi.y+0].y;
PV1i.x = R127i.x;
PV1i.y = uf_uniformRegisterPS[ARi.y+8].y;
PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(floor(intBitsToFloat(PV0i.x)));
R5i.y = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.w));
PS1i = R5i.y;
// 18
PV0i.x = uf_uniformRegisterPS[ARi.z+8].z;
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.y));
R124i.z = floatBitsToInt((-(intBitsToFloat(PV1i.w)) * intBitsToFloat(0x40c00000) + intBitsToFloat(R127i.w)));
PV0i.z = R124i.z;
R127i.w = uf_uniformRegisterPS[ARi.z+0].z;
PV0i.w = R127i.w;
R37i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R4i.w)) + intBitsToFloat(R127i.y)));
R37i.x = clampFI32(R37i.x);
PS0i = R37i.x;
// 19
PV1i.x = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
R37i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R125i.z)) + intBitsToFloat(R127i.x)));
R37i.y = clampFI32(R37i.y);
R0i.z = floatBitsToInt(floor(intBitsToFloat(R125i.x)));
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.x));
R8i.y = floatBitsToInt(floor(intBitsToFloat(R126i.w)));
PS1i = R8i.y;
// 20
R5i.x = floatBitsToInt(intBitsToFloat(R126i.w) + -(intBitsToFloat(R125i.x)));
R36i.y = R22i.x;
R37i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R7i.y)) + intBitsToFloat(R127i.w)));
R37i.z = clampFI32(R37i.z);
R4i.w = floatBitsToInt(intBitsToFloat(R124i.z) + -(intBitsToFloat(PV1i.x)));
R3i.x = int(intBitsToFloat(PV1i.x));
PS0i = R3i.x;
// 21
R52i.xyz = ivec3(R37i.x,R37i.y,R37i.z);
// 22
R45i.xyz = ivec3(R1i.x,R1i.y,R1i.z);
// 23
R46i.xyz = ivec3(R16i.x,R16i.y,R16i.z);
// 24
R47i.xyz = ivec3(R17i.x,R17i.y,R17i.z);
// 25
R48i.xyz = ivec3(R18i.x,R18i.y,R18i.z);
// 0
R49i.xyz = ivec3(R19i.x,R19i.y,R19i.z);
// 1
R50i.xyz = ivec3(R20i.x,R20i.y,R20i.z);
// 2
tempResulti = R21i.x;
tempResulti = clamp(tempResulti, -256, 255);
ARi.x = tempResulti;
PV0i.x = tempResulti;
// 3
R21i.xyz = ivec3(((ARi.x==0)?R45i.x:(ARi.x==1)?R46i.x:(ARi.x==2)?R47i.x:(ARi.x==3)?R48i.x:(ARi.x==4)?R49i.x:(ARi.x==5)?R50i.x:(ARi.x==6)?R51i.x:(ARi.x==7)?R52i.x:(ARi.x==8)?R53i.x:(ARi.x==9)?R54i.x:(ARi.x==10)?R55i.x:(ARi.x==11)?R56i.x:(ARi.x==12)?R57i.x:(ARi.x==78)?R123i.x:(ARi.x==79)?R124i.x:(ARi.x==80)?R125i.x:(ARi.x==81)?R126i.x:(ARi.x==82)?R127i.x:0),((ARi.x==0)?R45i.y:(ARi.x==1)?R46i.y:(ARi.x==2)?R47i.y:(ARi.x==3)?R48i.y:(ARi.x==4)?R49i.y:(ARi.x==5)?R50i.y:(ARi.x==6)?R51i.y:(ARi.x==7)?R52i.y:(ARi.x==8)?R53i.y:(ARi.x==9)?R54i.y:(ARi.x==10)?R55i.y:(ARi.x==11)?R56i.y:(ARi.x==12)?R57i.y:(ARi.x==78)?R123i.y:(ARi.x==79)?R124i.y:(ARi.x==80)?R125i.y:(ARi.x==81)?R126i.y:(ARi.x==82)?R127i.y:0),((ARi.x==0)?R45i.z:(ARi.x==1)?R46i.z:(ARi.x==2)?R47i.z:(ARi.x==3)?R48i.z:(ARi.x==4)?R49i.z:(ARi.x==5)?R50i.z:(ARi.x==6)?R51i.z:(ARi.x==7)?R52i.z:(ARi.x==8)?R53i.z:(ARi.x==9)?R54i.z:(ARi.x==10)?R55i.z:(ARi.x==11)?R56i.z:(ARi.x==12)?R57i.z:(ARi.x==78)?R123i.z:(ARi.x==79)?R124i.z:(ARi.x==80)?R125i.z:(ARi.x==81)?R126i.z:(ARi.x==82)?R127i.z:0));
// 0
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.w)),intBitsToFloat(R21i.x)) + intBitsToFloat(R7i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.w)),intBitsToFloat(R21i.z)) + intBitsToFloat(R7i.w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.w)),intBitsToFloat(R21i.y)) + intBitsToFloat(R7i.w)));
PV0i.z = R123i.z;
R126i.w = floatBitsToInt(-(intBitsToFloat(R4i.w)) + 1.0);
PV0i.w = R126i.w;
R125i.w = R4i.w;
PS0i = R125i.w;
// 1
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R125i.x = clampFI32(R125i.x);
PV1i.x = R125i.x;
R29i.y = PV0i.w;
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R124i.z = clampFI32(R124i.z);
PV1i.z = R124i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.w = clampFI32(R127i.w);
PV1i.w = R127i.w;
R30i.x = PS0i;
PS1i = R30i.x;
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.z)),intBitsToFloat(uf_uniformRegisterPS[22].z)) + intBitsToFloat(uf_uniformRegisterPS[22].z)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(uf_uniformRegisterPS[22].x)) + intBitsToFloat(uf_uniformRegisterPS[22].x)));
PV0i.y = R123i.y;
R31i.z = R126i.w;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.x)),intBitsToFloat(uf_uniformRegisterPS[22].y)) + intBitsToFloat(uf_uniformRegisterPS[22].y)));
PV0i.w = R123i.w;
R32i.y = R125i.w;
PS0i = R32i.y;
// 3
backupReg0i = R124i.z;
R33i.x = R126i.w;
PV1i.y = floatBitsToInt(intBitsToFloat(R125i.x) + intBitsToFloat(PV0i.w));
R124i.z = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(PV0i.y));
R127i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.x));
R34i.z = R125i.w;
PS1i = R34i.z;
// 4
backupReg0i = R0i.z;
R125i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R15i.x),intBitsToFloat(R8i.y),intBitsToFloat(backupReg0i),intBitsToFloat(R15i.y)),vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R7i.z),intBitsToFloat(R15i.z))));
PV0i.x = R125i.x;
PV0i.y = R125i.x;
PV0i.z = R125i.x;
PV0i.w = R125i.x;
tempResultf = log2(intBitsToFloat(PV1i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 5
backupReg0i = R127i.w;
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(0x40c00000)));
R7i.y = R22i.y;
R4i.z = R22i.y;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].y)));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 6
R36i.x = R22i.y;
R8i.y = R22i.y;
R123i.z = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x3e2aaaab) + 1.0));
PV0i.z = R123i.z;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[19].z)));
tempResultf = log2(intBitsToFloat(R124i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 7
PV1i.x = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].x)));
R35i.z = R22i.y;
R124i.w = floatBitsToInt(intBitsToFloat(R14i.w) + -(intBitsToFloat(R3i.w)));
R126i.y = floatBitsToInt(exp2(intBitsToFloat(R127i.w)));
PS1i = R126i.y;
// 8
backupReg0i = R125i.x;
R125i.x = floatBitsToInt((-(intBitsToFloat(PV1i.x)) * intBitsToFloat(0x40c00000) + intBitsToFloat(backupReg0i)));
PV0i.x = R125i.x;
PV0i.y = 0x3f800000;
R5i.z = R22i.x;
R3i.w = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R14i.w)));
R124i.z = floatBitsToInt(exp2(intBitsToFloat(R126i.w)));
PS0i = R124i.z;
// 9
backupReg0i = R127i.y;
R5i.x = R22i.y;
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + -(intBitsToFloat(R14i.w)));
R7i.z = R22i.x;
R125i.w = floatBitsToInt(floor(intBitsToFloat(PV0i.x)));
PV1i.w = R125i.w;
R127i.x = floatBitsToInt(exp2(intBitsToFloat(backupReg0i)));
PS1i = R127i.x;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS1i),intBitsToFloat(R126i.y),intBitsToFloat(R124i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.z = tempi.x;
PS0i = floatBitsToInt(intBitsToFloat(R125i.x) + -(intBitsToFloat(PV1i.w)));
// 11
backupReg0i = R124i.z;
PV1i.x = floatBitsToInt(intBitsToFloat(R126i.y) + -(intBitsToFloat(PV0i.x)));
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.x) + -(intBitsToFloat(PV0i.x)));
R124i.z = floatBitsToInt(-(intBitsToFloat(PS0i)) + 1.0);
PV1i.z = R124i.z;
PV1i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(PV0i.x)));
R126i.w = PS0i;
PS1i = R126i.w;
// 12
backupReg0i = R125i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(R125i.z)));
R127i.x = clampFI32(R127i.x);
PV0i.x = R127i.x;
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(R125i.z)));
R126i.y = clampFI32(R126i.y);
PV0i.y = R126i.y;
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R125i.z = clampFI32(R125i.z);
PV0i.z = R125i.z;
R4i.w = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R14i.w)));
R4i.y = PV1i.z;
PS0i = R4i.y;
// 13
R35i.x = R126i.w;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(uf_uniformRegisterPS[23].z)) + intBitsToFloat(uf_uniformRegisterPS[23].z)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.y)),intBitsToFloat(uf_uniformRegisterPS[23].y)) + intBitsToFloat(uf_uniformRegisterPS[23].y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.z)),intBitsToFloat(uf_uniformRegisterPS[23].x)) + intBitsToFloat(uf_uniformRegisterPS[23].x)));
PV1i.w = R123i.w;
R36i.z = R124i.z;
PS1i = R36i.z;
// 14
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(intBitsToFloat(R125i.z) + intBitsToFloat(PV1i.w));
R5i.y = R126i.w;
R125i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.y));
PV0i.w = floatBitsToInt(intBitsToFloat(R126i.y) + intBitsToFloat(PV1i.z));
R7i.x = R124i.z;
PS0i = R7i.x;
// 15
R8i.x = R22i.x;
R20i.y = R22i.x;
R8i.z = R126i.w;
R6i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(uf_uniformRegisterPS[16].y)));
tempResultf = log2(intBitsToFloat(PV0i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 16
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].y)));
R19i.y = R22i.x;
R21i.z = R22i.y;
tempResultf = log2(intBitsToFloat(R125i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 17
R21i.x = R22i.x;
R17i.y = R22i.y;
R20i.z = R22i.y;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[20].z)));
tempResultf = log2(intBitsToFloat(R127i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 18
R19i.x = R22i.y;
R16i.y = R22i.y;
R18i.z = R22i.x;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].x)));
R126i.y = floatBitsToInt(exp2(intBitsToFloat(R125i.x)));
PS0i = R126i.y;
// 19
R18i.x = R22i.y;
R17i.z = R22i.x;
R125i.z = floatBitsToInt(exp2(intBitsToFloat(R126i.w)));
PS1i = R125i.z;
// 20
R16i.x = R22i.x;
R125i.x = floatBitsToInt(exp2(intBitsToFloat(R127i.w)));
PS0i = R125i.x;
// 21
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS0i),intBitsToFloat(R126i.y),intBitsToFloat(R125i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV1i.x = R127i.x;
PV1i.y = R127i.x;
PV1i.z = R127i.x;
PV1i.w = R127i.x;
R15i.x = int(intBitsToFloat(R125i.w));
PS1i = R15i.x;
// 22
backupReg0i = R124i.w;
PV0i.y = floatBitsToInt(intBitsToFloat(R126i.y) + -(intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(R125i.x) + -(intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(intBitsToFloat(R125i.z) + -(intBitsToFloat(PV1i.x)));
R124i.w = floatBitsToInt(1.0 / intBitsToFloat(backupReg0i));
PS0i = R124i.w;
// 23
backupReg0i = R3i.w;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R127i.x)));
R123i.x = clampFI32(R123i.x);
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R127i.x)));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R127i.x)));
R123i.z = clampFI32(R123i.z);
PV1i.z = R123i.z;
R3i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS0i)));
PV1i.w = R3i.w;
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
PS1i = R0i.z;
// 24
R22i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + -(0.5));
R22i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(R124i.w)));
R22i.z = floatBitsToInt(intBitsToFloat(PV1i.y) + -(0.5));
R4i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + -(0.5));
R0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + 2.0);
PS0i = R0i.x;
// 0
backupReg0i = R0i.z;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R22i.z),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.w),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + 4.0);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R22i.x),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV0i.w = R123i.w;
R126i.y = floatBitsToInt(floor(intBitsToFloat(R22i.y)));
PS0i = R126i.y;
// 1
R126i.x = floatBitsToInt(-(intBitsToFloat(R22i.y)) + intBitsToFloat(PV0i.z));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_uniformRegisterPS[21].y)));
PV1i.y = clampFI32(PV1i.y);
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_uniformRegisterPS[21].x)));
PV1i.z = clampFI32(PV1i.z);
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterPS[21].z)));
PV1i.w = clampFI32(PV1i.w);
R124i.z = floatBitsToInt(floor(intBitsToFloat(R3i.w)));
PS1i = R124i.z;
// 2
R127i.x = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x40e00000));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x40e00000));
PV0i.y = R127i.y;
R125i.z = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(0x40e00000));
PV0i.z = R125i.z;
R125i.w = floatBitsToInt(intBitsToFloat(R22i.y) + -(intBitsToFloat(R3i.w)));
R125i.y = floatBitsToInt(-(intBitsToFloat(R0i.z)) + intBitsToFloat(R0i.x));
PS0i = R125i.y;
// 3
backupReg0i = R0i.z;
R124i.x = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
PV1i.x = R124i.x;
PV1i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.y)));
R124i.w = floatBitsToInt(floor(intBitsToFloat(PV0i.x)));
PV1i.w = R124i.w;
R125i.x = floatBitsToInt(floor(intBitsToFloat(backupReg0i)));
PS1i = R125i.x;
// 4
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(intBitsToFloat(R127i.y) + -(intBitsToFloat(PV1i.z)));
R124i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(PV1i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.y), intBitsToFloat(R15i.z)));
R127i.w = floatBitsToInt(intBitsToFloat(R125i.z) + -(intBitsToFloat(PV1i.x)));
R127i.y = int(intBitsToFloat(PV1i.z));
PS0i = R127i.y;
// 5
backupReg0i = R124i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R126i.y),intBitsToFloat(backupReg0i),intBitsToFloat(PV0i.z)),vec4(intBitsToFloat(R125i.w),intBitsToFloat(R125i.y),intBitsToFloat(R126i.x),1.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.z = tempi.x;
R126i.y = int(intBitsToFloat(R124i.w));
PS1i = R126i.y;
// 6
backupReg0i = R124i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(0x40c00000)));
R124i.x = int(intBitsToFloat(backupReg0i));
PS0i = R124i.x;
// 7
R123i.x = floatBitsToInt((intBitsToFloat(PV0i.y) * intBitsToFloat(0x3e2aaaab) + 1.0));
PV1i.x = R123i.x;
R125i.w = floatBitsToInt(float(R126i.y));
PS1i = R125i.w;
// 8
tempResultf = intBitsToFloat(PS1i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV0i.x = floatBitsToInt(tempResultf);
PV0i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.x)));
R125i.z = floatBitsToInt(float(R124i.x));
PS0i = R125i.z;
// 9
backupReg0i = R124i.z;
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV1i.y = floatBitsToInt(tempResultf);
R124i.z = floatBitsToInt((-(intBitsToFloat(PV0i.w)) * intBitsToFloat(0x40c00000) + intBitsToFloat(backupReg0i)));
PV1i.z = R124i.z;
R124i.w = floatBitsToInt(float(R127i.y));
PS1i = R124i.w;
// 10
PV0i.y = floatBitsToInt(floor(intBitsToFloat(PV1i.z)));
tempResultf = intBitsToFloat(PS1i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV0i.z = floatBitsToInt(tempResultf);
// 11
PV1i.w = floatBitsToInt(intBitsToFloat(R124i.z) + -(intBitsToFloat(PV0i.y)));
R0i.x = int(intBitsToFloat(PV0i.y));
PS1i = R0i.x;
// 12
R126i.x = PV1i.w;
PV0i.x = R126i.x;
R126i.w = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
PV0i.w = R126i.w;
// 13
R124i.x = uf_uniformRegisterPS[ARi.x+0].x;
PV1i.x = R124i.x;
R21i.y = PV0i.w;
R19i.z = PV0i.w;
PV1i.w = uf_uniformRegisterPS[ARi.x+8].x;
R20i.x = PV0i.x;
PS1i = R20i.x;
// 14
PV0i.x = uf_uniformRegisterPS[ARi.y+8].y;
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.w));
R125i.z = uf_uniformRegisterPS[ARi.y+0].y;
PV0i.z = R125i.z;
R18i.y = R126i.x;
PS0i = R18i.y;
// 15
backupReg0i = R124i.y;
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.x));
R124i.y = uf_uniformRegisterPS[ARi.z+0].z;
PV1i.y = R124i.y;
PV1i.z = uf_uniformRegisterPS[ARi.z+8].z;
R22i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(backupReg0i)) + intBitsToFloat(R124i.x)));
R22i.x = clampFI32(R22i.x);
PS1i = R22i.x;
// 16
R17i.x = R126i.w;
R22i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R127i.w)) + intBitsToFloat(R125i.z)));
R22i.y = clampFI32(R22i.y);
R16i.z = R126i.x;
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.z));
// 17
R22i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R127i.x)) + intBitsToFloat(R124i.y)));
R22i.z = clampFI32(R22i.z);
// 18
R53i.xyz = ivec3(R22i.x,R22i.y,R22i.z);
// 19
R45i.xyz = ivec3(R23i.x,R23i.y,R23i.z);
// 20
R46i.xyz = ivec3(R24i.x,R24i.y,R24i.z);
// 21
R47i.xyz = ivec3(R25i.x,R25i.y,R25i.z);
// 22
R48i.xyz = ivec3(R26i.x,R26i.y,R26i.z);
// 23
R49i.xyz = ivec3(R27i.x,R27i.y,R27i.z);
// 24
R50i.xyz = ivec3(R28i.x,R28i.y,R28i.z);
// 25
tempResulti = R6i.x;
tempResulti = clamp(tempResulti, -256, 255);
ARi.x = tempResulti;
PV1i.x = tempResulti;
// 26
R6i.xyz = ivec3(((ARi.x==0)?R45i.x:(ARi.x==1)?R46i.x:(ARi.x==2)?R47i.x:(ARi.x==3)?R48i.x:(ARi.x==4)?R49i.x:(ARi.x==5)?R50i.x:(ARi.x==6)?R51i.x:(ARi.x==7)?R52i.x:(ARi.x==8)?R53i.x:(ARi.x==9)?R54i.x:(ARi.x==10)?R55i.x:(ARi.x==11)?R56i.x:(ARi.x==12)?R57i.x:(ARi.x==78)?R123i.x:(ARi.x==79)?R124i.x:(ARi.x==80)?R125i.x:(ARi.x==81)?R126i.x:(ARi.x==82)?R127i.x:0),((ARi.x==0)?R45i.y:(ARi.x==1)?R46i.y:(ARi.x==2)?R47i.y:(ARi.x==3)?R48i.y:(ARi.x==4)?R49i.y:(ARi.x==5)?R50i.y:(ARi.x==6)?R51i.y:(ARi.x==7)?R52i.y:(ARi.x==8)?R53i.y:(ARi.x==9)?R54i.y:(ARi.x==10)?R55i.y:(ARi.x==11)?R56i.y:(ARi.x==12)?R57i.y:(ARi.x==78)?R123i.y:(ARi.x==79)?R124i.y:(ARi.x==80)?R125i.y:(ARi.x==81)?R126i.y:(ARi.x==82)?R127i.y:0),((ARi.x==0)?R45i.z:(ARi.x==1)?R46i.z:(ARi.x==2)?R47i.z:(ARi.x==3)?R48i.z:(ARi.x==4)?R49i.z:(ARi.x==5)?R50i.z:(ARi.x==6)?R51i.z:(ARi.x==7)?R52i.z:(ARi.x==8)?R53i.z:(ARi.x==9)?R54i.z:(ARi.x==10)?R55i.z:(ARi.x==11)?R56i.z:(ARi.x==12)?R57i.z:(ARi.x==78)?R123i.z:(ARi.x==79)?R124i.z:(ARi.x==80)?R125i.z:(ARi.x==81)?R126i.z:(ARi.x==82)?R127i.z:0));
// 0
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.w)),intBitsToFloat(R6i.x)) + intBitsToFloat(R8i.w)));
PV0i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.w)),intBitsToFloat(R6i.z)) + intBitsToFloat(R8i.w)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.w)),intBitsToFloat(R6i.y)) + intBitsToFloat(R8i.w)));
PV0i.w = R123i.w;
// 1
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.x = clampFI32(R127i.x);
PV1i.x = R127i.x;
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R124i.y = clampFI32(R124i.y);
PV1i.y = R124i.y;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.w = clampFI32(R127i.w);
PV1i.w = R127i.w;
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(uf_uniformRegisterPS[22].z)) + intBitsToFloat(uf_uniformRegisterPS[22].z)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.x)),intBitsToFloat(uf_uniformRegisterPS[22].y)) + intBitsToFloat(uf_uniformRegisterPS[22].y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(uf_uniformRegisterPS[22].x)) + intBitsToFloat(uf_uniformRegisterPS[22].x)));
PV0i.z = R123i.z;
// 3
backupReg0i = R124i.y;
R124i.y = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(PV0i.x));
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV0i.y));
R127i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.z));
// 4
tempResultf = log2(intBitsToFloat(PV1i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 5
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].y)));
tempResultf = log2(intBitsToFloat(R124i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 6
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[19].z)));
tempResultf = log2(intBitsToFloat(R127i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 7
backupReg0i = R126i.w;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].x)));
R124i.y = floatBitsToInt(exp2(intBitsToFloat(backupReg0i)));
PS1i = R124i.y;
// 8
R125i.z = floatBitsToInt(exp2(intBitsToFloat(R127i.x)));
PS0i = R125i.z;
// 9
R127i.x = floatBitsToInt(exp2(intBitsToFloat(R126i.w)));
PS1i = R127i.x;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS1i),intBitsToFloat(R124i.y),intBitsToFloat(R125i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.w = tempi.x;
// 11
PV1i.x = floatBitsToInt(intBitsToFloat(R125i.z) + -(intBitsToFloat(PV0i.x)));
PV1i.y = floatBitsToInt(intBitsToFloat(R124i.y) + -(intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.x) + -(intBitsToFloat(PV0i.x)));
// 12
backupReg0i = R126i.w;
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(R126i.w)));
R124i.y = clampFI32(R124i.y);
PV0i.y = R124i.y;
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(R126i.w)));
R125i.z = clampFI32(R125i.z);
PV0i.z = R125i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R126i.w = clampFI32(R126i.w);
PV0i.w = R126i.w;
// 13
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.w)),intBitsToFloat(uf_uniformRegisterPS[23].x)) + intBitsToFloat(uf_uniformRegisterPS[23].x)));
PV1i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.y)),intBitsToFloat(uf_uniformRegisterPS[23].z)) + intBitsToFloat(uf_uniformRegisterPS[23].z)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.z)),intBitsToFloat(uf_uniformRegisterPS[23].y)) + intBitsToFloat(uf_uniformRegisterPS[23].y)));
PV1i.w = R123i.w;
// 14
backupReg0i = R124i.y;
PV0i.x = floatBitsToInt(intBitsToFloat(R125i.z) + intBitsToFloat(PV1i.w));
R124i.y = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(PV1i.x));
R126i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.z));
// 15
tempResultf = log2(intBitsToFloat(PV0i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 16
backupReg0i = R126i.w;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].y)));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 17
backupReg0i = R124i.y;
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[20].z)));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 18
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].x)));
R126i.y = floatBitsToInt(exp2(intBitsToFloat(R126i.w)));
PS0i = R126i.y;
// 19
R125i.z = floatBitsToInt(exp2(intBitsToFloat(R124i.y)));
PS1i = R125i.z;
// 20
R127i.x = floatBitsToInt(exp2(intBitsToFloat(R127i.y)));
PS0i = R127i.x;
// 21
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS0i),intBitsToFloat(R126i.y),intBitsToFloat(R125i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV1i.x = R126i.x;
PV1i.y = R126i.x;
PV1i.z = R126i.x;
PV1i.w = R126i.x;
// 22
PV0i.y = floatBitsToInt(intBitsToFloat(R125i.z) + -(intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(R126i.y) + -(intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(intBitsToFloat(R127i.x) + -(intBitsToFloat(PV1i.x)));
// 23
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R126i.x)));
R123i.x = clampFI32(R123i.x);
PV1i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R126i.x)));
R123i.z = clampFI32(R123i.z);
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R126i.x)));
R123i.w = clampFI32(R123i.w);
PV1i.w = R123i.w;
// 24
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + -(0.5));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + -(0.5));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + -(0.5));
// 25
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.z = R123i.z;
// 26
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_uniformRegisterPS[21].z)));
PV0i.y = clampFI32(PV0i.y);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(uf_uniformRegisterPS[21].y)));
PV0i.z = clampFI32(PV0i.z);
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(uf_uniformRegisterPS[21].x)));
PV0i.w = clampFI32(PV0i.w);
// 27
R126i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x40e00000));
PV1i.x = R126i.x;
R125i.z = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x40e00000));
PV1i.z = R125i.z;
R126i.w = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x40e00000));
PV1i.w = R126i.w;
// 28
R127i.x = floatBitsToInt(floor(intBitsToFloat(PV1i.w)));
PV0i.x = R127i.x;
R126i.y = floatBitsToInt(floor(intBitsToFloat(PV1i.x)));
PV0i.y = R126i.y;
PV0i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.z)));
// 29
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(intBitsToFloat(R125i.z) + -(intBitsToFloat(PV0i.w)));
R124i.y = floatBitsToInt(intBitsToFloat(R126i.w) + -(intBitsToFloat(PV0i.x)));
R126i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(PV0i.y)));
R124i.z = int(intBitsToFloat(PV0i.w));
PS1i = R124i.z;
// 30
R125i.z = int(intBitsToFloat(R126i.y));
PS0i = R125i.z;
// 31
backupReg0i = R127i.x;
R127i.x = int(intBitsToFloat(backupReg0i));
PS1i = R127i.x;
// 32
R126i.y = floatBitsToInt(float(R125i.z));
PS0i = R126i.y;
// 33
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV1i.x = floatBitsToInt(tempResultf);
R126i.w = floatBitsToInt(float(R127i.x));
PS1i = R126i.w;
// 34
tempResultf = intBitsToFloat(PS1i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
R127i.y = floatBitsToInt(float(R124i.z));
PS0i = R127i.y;
// 35
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV1i.z = floatBitsToInt(tempResultf);
// 36
R127i.x = uf_uniformRegisterPS[ARi.x+0].x;
PV0i.x = R127i.x;
PV0i.y = uf_uniformRegisterPS[ARi.x+8].x;
// 37
PV1i.x = uf_uniformRegisterPS[ARi.y+8].y;
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(PV0i.y));
R126i.w = uf_uniformRegisterPS[ARi.y+0].y;
PV1i.w = R126i.w;
// 38
backupReg0i = R126i.z;
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.x));
R126i.z = uf_uniformRegisterPS[ARi.z+0].z;
PV0i.z = R126i.z;
PV0i.w = uf_uniformRegisterPS[ARi.z+8].z;
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(backupReg0i)) + intBitsToFloat(R127i.x)));
R6i.x = clampFI32(R6i.x);
PS0i = R6i.x;
// 39
R6i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R124i.y)) + intBitsToFloat(R126i.w)));
R6i.y = clampFI32(R6i.y);
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.w));
// 40
R6i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R126i.x)) + intBitsToFloat(R126i.z)));
R6i.z = clampFI32(R6i.z);
// 41
R54i.xyz = ivec3(R6i.x,R6i.y,R6i.z);
// 42
R45i.xyz = ivec3(R14i.x,R14i.y,R14i.z);
// 43
R46i.xyz = ivec3(R13i.x,R13i.y,R13i.z);
// 44
R47i.xyz = ivec3(R12i.x,R12i.y,R12i.z);
// 45
R48i.xyz = ivec3(R11i.x,R11i.y,R11i.z);
// 46
R49i.xyz = ivec3(R10i.x,R10i.y,R10i.z);
// 47
R50i.xyz = ivec3(R9i.x,R9i.y,R9i.z);
// 48
tempResulti = R2i.x;
tempResulti = clamp(tempResulti, -256, 255);
ARi.x = tempResulti;
PV0i.x = tempResulti;
// 49
R2i.xyz = ivec3(((ARi.x==0)?R45i.x:(ARi.x==1)?R46i.x:(ARi.x==2)?R47i.x:(ARi.x==3)?R48i.x:(ARi.x==4)?R49i.x:(ARi.x==5)?R50i.x:(ARi.x==6)?R51i.x:(ARi.x==7)?R52i.x:(ARi.x==8)?R53i.x:(ARi.x==9)?R54i.x:(ARi.x==10)?R55i.x:(ARi.x==11)?R56i.x:(ARi.x==12)?R57i.x:(ARi.x==78)?R123i.x:(ARi.x==79)?R124i.x:(ARi.x==80)?R125i.x:(ARi.x==81)?R126i.x:(ARi.x==82)?R127i.x:0),((ARi.x==0)?R45i.y:(ARi.x==1)?R46i.y:(ARi.x==2)?R47i.y:(ARi.x==3)?R48i.y:(ARi.x==4)?R49i.y:(ARi.x==5)?R50i.y:(ARi.x==6)?R51i.y:(ARi.x==7)?R52i.y:(ARi.x==8)?R53i.y:(ARi.x==9)?R54i.y:(ARi.x==10)?R55i.y:(ARi.x==11)?R56i.y:(ARi.x==12)?R57i.y:(ARi.x==78)?R123i.y:(ARi.x==79)?R124i.y:(ARi.x==80)?R125i.y:(ARi.x==81)?R126i.y:(ARi.x==82)?R127i.y:0),((ARi.x==0)?R45i.z:(ARi.x==1)?R46i.z:(ARi.x==2)?R47i.z:(ARi.x==3)?R48i.z:(ARi.x==4)?R49i.z:(ARi.x==5)?R50i.z:(ARi.x==6)?R51i.z:(ARi.x==7)?R52i.z:(ARi.x==8)?R53i.z:(ARi.x==9)?R54i.z:(ARi.x==10)?R55i.z:(ARi.x==11)?R56i.z:(ARi.x==12)?R57i.z:(ARi.x==78)?R123i.z:(ARi.x==79)?R124i.z:(ARi.x==80)?R125i.z:(ARi.x==81)?R126i.z:(ARi.x==82)?R127i.z:0));
// 0
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R9i.w)),intBitsToFloat(R2i.y)) + intBitsToFloat(R10i.w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R9i.w)),intBitsToFloat(R2i.x)) + intBitsToFloat(R10i.w)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R9i.w)),intBitsToFloat(R2i.z)) + intBitsToFloat(R10i.w)));
PV0i.w = R123i.w;
// 1
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R126i.x = clampFI32(R126i.x);
PV1i.x = R126i.x;
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R124i.y = clampFI32(R124i.y);
PV1i.y = R124i.y;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R126i.z = clampFI32(R126i.z);
PV1i.z = R126i.z;
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.z)),intBitsToFloat(uf_uniformRegisterPS[22].y)) + intBitsToFloat(uf_uniformRegisterPS[22].y)));
PV0i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(uf_uniformRegisterPS[22].z)) + intBitsToFloat(uf_uniformRegisterPS[22].z)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.x)),intBitsToFloat(uf_uniformRegisterPS[22].x)) + intBitsToFloat(uf_uniformRegisterPS[22].x)));
PV0i.w = R123i.w;
// 3
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(intBitsToFloat(R124i.y) + intBitsToFloat(PV0i.z));
R124i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.w));
PV1i.w = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(PV0i.x));
// 4
tempResultf = log2(intBitsToFloat(PV1i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 5
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].y)));
tempResultf = log2(intBitsToFloat(R126i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 6
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[19].z)));
tempResultf = log2(intBitsToFloat(R124i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 7
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].x)));
R127i.y = floatBitsToInt(exp2(intBitsToFloat(R126i.z)));
PS1i = R127i.y;
// 8
R126i.z = floatBitsToInt(exp2(intBitsToFloat(R126i.w)));
PS0i = R126i.z;
// 9
R126i.x = floatBitsToInt(exp2(intBitsToFloat(R124i.y)));
PS1i = R126i.x;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS1i),intBitsToFloat(R127i.y),intBitsToFloat(R126i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.y = tempi.x;
// 11
PV1i.x = floatBitsToInt(intBitsToFloat(R126i.x) + -(intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(intBitsToFloat(R126i.z) + -(intBitsToFloat(PV0i.x)));
PV1i.w = floatBitsToInt(intBitsToFloat(R127i.y) + -(intBitsToFloat(PV0i.x)));
// 12
backupReg0i = R124i.y;
backupReg0i = R124i.y;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(R124i.y)));
R126i.x = clampFI32(R126i.x);
PV0i.x = R126i.x;
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R124i.y = clampFI32(R124i.y);
PV0i.y = R124i.y;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R126i.w = clampFI32(R126i.w);
PV0i.w = R126i.w;
// 13
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.w)),intBitsToFloat(uf_uniformRegisterPS[23].z)) + intBitsToFloat(uf_uniformRegisterPS[23].z)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(uf_uniformRegisterPS[23].y)) + intBitsToFloat(uf_uniformRegisterPS[23].y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.y)),intBitsToFloat(uf_uniformRegisterPS[23].x)) + intBitsToFloat(uf_uniformRegisterPS[23].x)));
PV1i.z = R123i.z;
// 14
backupReg0i = R124i.y;
R124i.y = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(PV1i.x));
PV0i.z = floatBitsToInt(intBitsToFloat(R126i.x) + intBitsToFloat(PV1i.y));
R126i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.z));
// 15
tempResultf = log2(intBitsToFloat(PV0i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 16
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].y)));
tempResultf = log2(intBitsToFloat(R124i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 17
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[20].z)));
tempResultf = log2(intBitsToFloat(R126i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 18
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].x)));
R124i.y = floatBitsToInt(exp2(intBitsToFloat(R126i.x)));
PS0i = R124i.y;
// 19
R124i.z = floatBitsToInt(exp2(intBitsToFloat(R127i.x)));
PS1i = R124i.z;
// 20
R127i.x = floatBitsToInt(exp2(intBitsToFloat(R126i.z)));
PS0i = R127i.x;
// 21
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS0i),intBitsToFloat(R124i.y),intBitsToFloat(R124i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.z = tempi.x;
// 22
PV0i.x = floatBitsToInt(intBitsToFloat(R124i.z) + -(intBitsToFloat(PV1i.x)));
PV0i.y = floatBitsToInt(intBitsToFloat(R127i.x) + -(intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(intBitsToFloat(R124i.y) + -(intBitsToFloat(PV1i.x)));
// 23
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R126i.z)));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R126i.z)));
R123i.z = clampFI32(R123i.z);
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R126i.z)));
R123i.w = clampFI32(R123i.w);
PV1i.w = R123i.w;
// 24
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + -(0.5));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.w) + -(0.5));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.y) + -(0.5));
// 25
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.w = R123i.w;
// 26
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(uf_uniformRegisterPS[21].z)));
PV0i.x = clampFI32(PV0i.x);
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(uf_uniformRegisterPS[21].x)));
PV0i.y = clampFI32(PV0i.y);
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_uniformRegisterPS[21].y)));
PV0i.w = clampFI32(PV0i.w);
// 27
R124i.y = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x40e00000));
PV1i.y = R124i.y;
R126i.z = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x40e00000));
PV1i.z = R126i.z;
R126i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x40e00000));
PV1i.w = R126i.w;
// 28
PV0i.x = floatBitsToInt(floor(intBitsToFloat(PV1i.z)));
R127i.y = floatBitsToInt(floor(intBitsToFloat(PV1i.w)));
PV0i.y = R127i.y;
R124i.z = floatBitsToInt(floor(intBitsToFloat(PV1i.y)));
PV0i.z = R124i.z;
// 29
backupReg0i = R126i.z;
R124i.x = floatBitsToInt(intBitsToFloat(R124i.y) + -(intBitsToFloat(PV0i.z)));
R126i.z = floatBitsToInt(intBitsToFloat(R126i.w) + -(intBitsToFloat(PV0i.y)));
R124i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(PV0i.x)));
R127i.w = int(intBitsToFloat(PV0i.x));
PS1i = R127i.w;
// 30
backupReg0i = R124i.z;
R124i.z = int(intBitsToFloat(backupReg0i));
PS0i = R124i.z;
// 31
R126i.w = int(intBitsToFloat(R127i.y));
PS1i = R126i.w;
// 32
R127i.y = floatBitsToInt(float(R124i.z));
PS0i = R127i.y;
// 33
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV1i.x = floatBitsToInt(tempResultf);
R127i.x = floatBitsToInt(float(R126i.w));
PS1i = R127i.x;
// 34
tempResultf = intBitsToFloat(PS1i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
R126i.x = floatBitsToInt(float(R127i.w));
PS0i = R126i.x;
// 35
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV1i.z = floatBitsToInt(tempResultf);
// 36
R127i.y = uf_uniformRegisterPS[ARi.x+0].y;
PV0i.y = R127i.y;
PV0i.z = uf_uniformRegisterPS[ARi.x+8].y;
// 37
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.z));
PV1i.y = uf_uniformRegisterPS[ARi.y+8].z;
R127i.w = uf_uniformRegisterPS[ARi.y+0].z;
PV1i.w = R127i.w;
// 38
PV0i.x = uf_uniformRegisterPS[ARi.z+8].x;
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.y));
R124i.z = uf_uniformRegisterPS[ARi.z+0].x;
PV0i.z = R124i.z;
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R124i.x)) + intBitsToFloat(R127i.y)));
R2i.y = clampFI32(R2i.y);
PS0i = R2i.y;
// 39
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.x));
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R126i.z)) + intBitsToFloat(R127i.w)));
R2i.z = clampFI32(R2i.z);
// 40
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R124i.w)) + intBitsToFloat(R124i.z)));
R2i.x = clampFI32(R2i.x);
// 41
R55i.xyz = ivec3(R2i.x,R2i.y,R2i.z);
// 42
R45i.xyz = ivec3(R29i.x,R29i.y,R29i.z);
// 43
R46i.xyz = ivec3(R30i.x,R30i.y,R30i.z);
// 44
R47i.xyz = ivec3(R31i.x,R31i.y,R31i.z);
// 45
R48i.xyz = ivec3(R32i.x,R32i.y,R32i.z);
// 46
R49i.xyz = ivec3(R33i.x,R33i.y,R33i.z);
// 47
R50i.xyz = ivec3(R34i.x,R34i.y,R34i.z);
// 48
tempResulti = R3i.x;
tempResulti = clamp(tempResulti, -256, 255);
ARi.x = tempResulti;
PV0i.x = tempResulti;
// 49
R3i.xyz = ivec3(((ARi.x==0)?R45i.x:(ARi.x==1)?R46i.x:(ARi.x==2)?R47i.x:(ARi.x==3)?R48i.x:(ARi.x==4)?R49i.x:(ARi.x==5)?R50i.x:(ARi.x==6)?R51i.x:(ARi.x==7)?R52i.x:(ARi.x==8)?R53i.x:(ARi.x==9)?R54i.x:(ARi.x==10)?R55i.x:(ARi.x==11)?R56i.x:(ARi.x==12)?R57i.x:(ARi.x==78)?R123i.x:(ARi.x==79)?R124i.x:(ARi.x==80)?R125i.x:(ARi.x==81)?R126i.x:(ARi.x==82)?R127i.x:0),((ARi.x==0)?R45i.y:(ARi.x==1)?R46i.y:(ARi.x==2)?R47i.y:(ARi.x==3)?R48i.y:(ARi.x==4)?R49i.y:(ARi.x==5)?R50i.y:(ARi.x==6)?R51i.y:(ARi.x==7)?R52i.y:(ARi.x==8)?R53i.y:(ARi.x==9)?R54i.y:(ARi.x==10)?R55i.y:(ARi.x==11)?R56i.y:(ARi.x==12)?R57i.y:(ARi.x==78)?R123i.y:(ARi.x==79)?R124i.y:(ARi.x==80)?R125i.y:(ARi.x==81)?R126i.y:(ARi.x==82)?R127i.y:0),((ARi.x==0)?R45i.z:(ARi.x==1)?R46i.z:(ARi.x==2)?R47i.z:(ARi.x==3)?R48i.z:(ARi.x==4)?R49i.z:(ARi.x==5)?R50i.z:(ARi.x==6)?R51i.z:(ARi.x==7)?R52i.z:(ARi.x==8)?R53i.z:(ARi.x==9)?R54i.z:(ARi.x==10)?R55i.z:(ARi.x==11)?R56i.z:(ARi.x==12)?R57i.z:(ARi.x==78)?R123i.z:(ARi.x==79)?R124i.z:(ARi.x==80)?R125i.z:(ARi.x==81)?R126i.z:(ARi.x==82)?R127i.z:0));
// 0
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R11i.w)),intBitsToFloat(R3i.z)) + intBitsToFloat(R12i.w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R11i.w)),intBitsToFloat(R3i.y)) + intBitsToFloat(R12i.w)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R11i.w)),intBitsToFloat(R3i.x)) + intBitsToFloat(R12i.w)));
PV0i.w = R123i.w;
// 1
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R126i.x = clampFI32(R126i.x);
PV1i.x = R126i.x;
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R124i.z = clampFI32(R124i.z);
PV1i.z = R124i.z;
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R124i.w = clampFI32(R124i.w);
PV1i.w = R124i.w;
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(uf_uniformRegisterPS[22].y)) + intBitsToFloat(uf_uniformRegisterPS[22].y)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.x)),intBitsToFloat(uf_uniformRegisterPS[22].x)) + intBitsToFloat(uf_uniformRegisterPS[22].x)));
PV0i.y = R123i.y;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.z)),intBitsToFloat(uf_uniformRegisterPS[22].z)) + intBitsToFloat(uf_uniformRegisterPS[22].z)));
PV0i.w = R123i.w;
// 3
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(intBitsToFloat(R124i.z) + intBitsToFloat(PV0i.w));
PV1i.y = floatBitsToInt(intBitsToFloat(R124i.w) + intBitsToFloat(PV0i.x));
R124i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.y));
// 4
tempResultf = log2(intBitsToFloat(PV1i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 5
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].y)));
tempResultf = log2(intBitsToFloat(R126i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 6
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[19].z)));
tempResultf = log2(intBitsToFloat(R124i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 7
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].x)));
R127i.y = floatBitsToInt(exp2(intBitsToFloat(R124i.w)));
PS1i = R127i.y;
// 8
R126i.z = floatBitsToInt(exp2(intBitsToFloat(R127i.w)));
PS0i = R126i.z;
// 9
R126i.x = floatBitsToInt(exp2(intBitsToFloat(R124i.z)));
PS1i = R126i.x;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS1i),intBitsToFloat(R127i.y),intBitsToFloat(R126i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.z = tempi.x;
// 11
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.y) + -(intBitsToFloat(PV0i.x)));
PV1i.y = floatBitsToInt(intBitsToFloat(R126i.x) + -(intBitsToFloat(PV0i.x)));
PV1i.w = floatBitsToInt(intBitsToFloat(R126i.z) + -(intBitsToFloat(PV0i.x)));
// 12
backupReg0i = R124i.z;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(R124i.z)));
R126i.x = clampFI32(R126i.x);
PV0i.x = R126i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(R124i.z)));
R127i.y = clampFI32(R127i.y);
PV0i.y = R127i.y;
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R124i.z = clampFI32(R124i.z);
PV0i.z = R124i.z;
// 13
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(uf_uniformRegisterPS[23].z)) + intBitsToFloat(uf_uniformRegisterPS[23].z)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.y)),intBitsToFloat(uf_uniformRegisterPS[23].y)) + intBitsToFloat(uf_uniformRegisterPS[23].y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.z)),intBitsToFloat(uf_uniformRegisterPS[23].x)) + intBitsToFloat(uf_uniformRegisterPS[23].x)));
PV1i.w = R123i.w;
// 14
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(intBitsToFloat(R124i.z) + intBitsToFloat(PV1i.w));
R124i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.y));
PV0i.w = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV1i.z));
// 15
tempResultf = log2(intBitsToFloat(PV0i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 16
backupReg0i = R124i.z;
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].y)));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 17
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[20].z)));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 18
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].x)));
R127i.y = floatBitsToInt(exp2(intBitsToFloat(R124i.z)));
PS0i = R127i.y;
// 19
R124i.z = floatBitsToInt(exp2(intBitsToFloat(R126i.x)));
PS1i = R124i.z;
// 20
backupReg0i = R124i.x;
R124i.x = floatBitsToInt(exp2(intBitsToFloat(backupReg0i)));
PS0i = R124i.x;
// 21
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS0i),intBitsToFloat(R127i.y),intBitsToFloat(R124i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.w = tempi.x;
// 22
PV0i.x = floatBitsToInt(intBitsToFloat(R124i.z) + -(intBitsToFloat(PV1i.x)));
PV0i.y = floatBitsToInt(intBitsToFloat(R127i.y) + -(intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(R124i.x) + -(intBitsToFloat(PV1i.x)));
// 23
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R127i.w)));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R127i.w)));
R123i.z = clampFI32(R123i.z);
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R127i.w)));
R123i.w = clampFI32(R123i.w);
PV1i.w = R123i.w;
// 24
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + -(0.5));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.y) + -(0.5));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + -(0.5));
// 25
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.y = R123i.y;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.w = R123i.w;
// 26
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(uf_uniformRegisterPS[21].z)));
PV0i.x = clampFI32(PV0i.x);
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_uniformRegisterPS[21].y)));
PV0i.y = clampFI32(PV0i.y);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(uf_uniformRegisterPS[21].x)));
PV0i.z = clampFI32(PV0i.z);
// 27
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x40e00000));
PV1i.y = R127i.y;
R124i.z = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x40e00000));
PV1i.z = R124i.z;
R127i.w = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x40e00000));
PV1i.w = R127i.w;
// 28
R124i.x = floatBitsToInt(floor(intBitsToFloat(PV1i.w)));
PV0i.x = R124i.x;
PV0i.z = floatBitsToInt(floor(intBitsToFloat(PV1i.y)));
R124i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.z)));
PV0i.w = R124i.w;
// 29
R127i.x = floatBitsToInt(intBitsToFloat(R124i.z) + -(intBitsToFloat(PV0i.w)));
R126i.y = floatBitsToInt(intBitsToFloat(R127i.w) + -(intBitsToFloat(PV0i.x)));
R127i.w = floatBitsToInt(intBitsToFloat(R127i.y) + -(intBitsToFloat(PV0i.z)));
R124i.y = int(intBitsToFloat(PV0i.z));
PS1i = R124i.y;
// 30
R127i.y = int(intBitsToFloat(R124i.x));
PS0i = R127i.y;
// 31
backupReg0i = R124i.w;
R124i.w = int(intBitsToFloat(backupReg0i));
PS1i = R124i.w;
// 32
R124i.x = floatBitsToInt(float(R127i.y));
PS0i = R124i.x;
// 33
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV1i.x = floatBitsToInt(tempResultf);
R124i.z = floatBitsToInt(float(R124i.w));
PS1i = R124i.z;
// 34
tempResultf = intBitsToFloat(PS1i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
R126i.x = floatBitsToInt(float(R124i.y));
PS0i = R126i.x;
// 35
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV1i.z = floatBitsToInt(tempResultf);
// 36
PV0i.x = uf_uniformRegisterPS[ARi.x+8].x;
R124i.w = uf_uniformRegisterPS[ARi.x+0].x;
PV0i.w = R124i.w;
// 37
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.x));
R124i.z = uf_uniformRegisterPS[ARi.y+0].y;
PV1i.z = R124i.z;
PV1i.w = uf_uniformRegisterPS[ARi.y+8].y;
// 38
backupReg0i = R126i.y;
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.w));
R126i.y = uf_uniformRegisterPS[ARi.z+0].z;
PV0i.y = R126i.y;
PV0i.z = uf_uniformRegisterPS[ARi.z+8].z;
R3i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(R124i.w)));
R3i.x = clampFI32(R3i.x);
PS0i = R3i.x;
// 39
R3i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R127i.x)) + intBitsToFloat(R124i.z)));
R3i.y = clampFI32(R3i.y);
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.z));
// 40
R3i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R127i.w)) + intBitsToFloat(R126i.y)));
R3i.z = clampFI32(R3i.z);
// 41
R56i.xyz = ivec3(R3i.x,R3i.y,R3i.z);
// 42
R45i.xyz = ivec3(R4i.x,R4i.y,R4i.z);
// 43
R46i.xyz = ivec3(R35i.x,R35i.y,R35i.z);
// 44
R47i.xyz = ivec3(R36i.x,R36i.y,R36i.z);
// 45
R48i.xyz = ivec3(R5i.x,R5i.y,R5i.z);
// 46
R49i.xyz = ivec3(R7i.x,R7i.y,R7i.z);
// 47
R50i.xyz = ivec3(R8i.x,R8i.y,R8i.z);
// 48
tempResulti = R15i.x;
tempResulti = clamp(tempResulti, -256, 255);
ARi.x = tempResulti;
PV0i.x = tempResulti;
// 49
R15i.xyz = ivec3(((ARi.x==0)?R45i.x:(ARi.x==1)?R46i.x:(ARi.x==2)?R47i.x:(ARi.x==3)?R48i.x:(ARi.x==4)?R49i.x:(ARi.x==5)?R50i.x:(ARi.x==6)?R51i.x:(ARi.x==7)?R52i.x:(ARi.x==8)?R53i.x:(ARi.x==9)?R54i.x:(ARi.x==10)?R55i.x:(ARi.x==11)?R56i.x:(ARi.x==12)?R57i.x:(ARi.x==78)?R123i.x:(ARi.x==79)?R124i.x:(ARi.x==80)?R125i.x:(ARi.x==81)?R126i.x:(ARi.x==82)?R127i.x:0),((ARi.x==0)?R45i.y:(ARi.x==1)?R46i.y:(ARi.x==2)?R47i.y:(ARi.x==3)?R48i.y:(ARi.x==4)?R49i.y:(ARi.x==5)?R50i.y:(ARi.x==6)?R51i.y:(ARi.x==7)?R52i.y:(ARi.x==8)?R53i.y:(ARi.x==9)?R54i.y:(ARi.x==10)?R55i.y:(ARi.x==11)?R56i.y:(ARi.x==12)?R57i.y:(ARi.x==78)?R123i.y:(ARi.x==79)?R124i.y:(ARi.x==80)?R125i.y:(ARi.x==81)?R126i.y:(ARi.x==82)?R127i.y:0),((ARi.x==0)?R45i.z:(ARi.x==1)?R46i.z:(ARi.x==2)?R47i.z:(ARi.x==3)?R48i.z:(ARi.x==4)?R49i.z:(ARi.x==5)?R50i.z:(ARi.x==6)?R51i.z:(ARi.x==7)?R52i.z:(ARi.x==8)?R53i.z:(ARi.x==9)?R54i.z:(ARi.x==10)?R55i.z:(ARi.x==11)?R56i.z:(ARi.x==12)?R57i.z:(ARi.x==78)?R123i.z:(ARi.x==79)?R124i.z:(ARi.x==80)?R125i.z:(ARi.x==81)?R126i.z:(ARi.x==82)?R127i.z:0));
// 0
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.w)),intBitsToFloat(R15i.z)) + intBitsToFloat(R13i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.w)),intBitsToFloat(R15i.x)) + intBitsToFloat(R13i.w)));
PV0i.y = R123i.y;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.w)),intBitsToFloat(R15i.y)) + intBitsToFloat(R13i.w)));
PV0i.w = R123i.w;
// 1
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R126i.y = clampFI32(R126i.y);
PV1i.y = R126i.y;
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R124i.z = clampFI32(R124i.z);
PV1i.z = R124i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.w = clampFI32(R127i.w);
PV1i.w = R127i.w;
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.z)),intBitsToFloat(uf_uniformRegisterPS[22].x)) + intBitsToFloat(uf_uniformRegisterPS[22].x)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(uf_uniformRegisterPS[22].z)) + intBitsToFloat(uf_uniformRegisterPS[22].z)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(uf_uniformRegisterPS[22].y)) + intBitsToFloat(uf_uniformRegisterPS[22].y)));
PV0i.z = R123i.z;
// 3
backupReg0i = R124i.z;
PV1i.x = floatBitsToInt(intBitsToFloat(R126i.y) + intBitsToFloat(PV0i.z));
R124i.z = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(PV0i.y));
R127i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.x));
// 4
tempResultf = log2(intBitsToFloat(PV1i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 5
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].y)));
tempResultf = log2(intBitsToFloat(R124i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 6
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[19].z)));
tempResultf = log2(intBitsToFloat(R127i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 7
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].x)));
R124i.y = floatBitsToInt(exp2(intBitsToFloat(R127i.x)));
PS1i = R124i.y;
// 8
R124i.z = floatBitsToInt(exp2(intBitsToFloat(R126i.y)));
PS0i = R124i.z;
// 9
R127i.x = floatBitsToInt(exp2(intBitsToFloat(R127i.w)));
PS1i = R127i.x;
// 10
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS1i),intBitsToFloat(R124i.y),intBitsToFloat(R124i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV0i.x = R126i.x;
PV0i.y = R126i.x;
PV0i.z = R126i.x;
PV0i.w = R126i.x;
// 11
PV1i.y = floatBitsToInt(intBitsToFloat(R124i.z) + -(intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(intBitsToFloat(R124i.y) + -(intBitsToFloat(PV0i.x)));
PV1i.w = floatBitsToInt(intBitsToFloat(R127i.x) + -(intBitsToFloat(PV0i.x)));
// 12
backupReg0i = R126i.x;
backupReg0i = R126i.x;
backupReg0i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R126i.x = clampFI32(R126i.x);
PV0i.x = R126i.x;
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R124i.z = clampFI32(R124i.z);
PV0i.z = R124i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R127i.w = clampFI32(R127i.w);
PV0i.w = R127i.w;
// 13
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.w)),intBitsToFloat(uf_uniformRegisterPS[23].y)) + intBitsToFloat(uf_uniformRegisterPS[23].y)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(uf_uniformRegisterPS[23].x)) + intBitsToFloat(uf_uniformRegisterPS[23].x)));
PV1i.y = R123i.y;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.z)),intBitsToFloat(uf_uniformRegisterPS[23].z)) + intBitsToFloat(uf_uniformRegisterPS[23].z)));
PV1i.w = R123i.w;
// 14
backupReg0i = R124i.z;
PV0i.y = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(PV1i.x));
R124i.z = floatBitsToInt(intBitsToFloat(R126i.x) + intBitsToFloat(PV1i.y));
R127i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.w));
// 15
tempResultf = log2(intBitsToFloat(PV0i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 16
backupReg0i = R127i.w;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].y)));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 17
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[20].z)));
tempResultf = log2(intBitsToFloat(R124i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 18
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].x)));
R126i.y = floatBitsToInt(exp2(intBitsToFloat(R127i.w)));
PS0i = R126i.y;
// 19
R124i.z = floatBitsToInt(exp2(intBitsToFloat(R126i.x)));
PS1i = R124i.z;
// 20
R126i.x = floatBitsToInt(exp2(intBitsToFloat(R124i.y)));
PS0i = R126i.x;
// 21
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS0i),intBitsToFloat(R126i.y),intBitsToFloat(R124i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.y = tempi.x;
// 22
PV0i.x = floatBitsToInt(intBitsToFloat(R126i.y) + -(intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(R124i.z) + -(intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(intBitsToFloat(R126i.x) + -(intBitsToFloat(PV1i.x)));
// 23
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R124i.y)));
R123i.x = clampFI32(R123i.x);
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R124i.y)));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R124i.y)));
R123i.w = clampFI32(R123i.w);
PV1i.w = R123i.w;
// 24
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.w) + -(0.5));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.y) + -(0.5));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + -(0.5));
// 25
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.z = R123i.z;
// 26
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(uf_uniformRegisterPS[21].y)));
PV0i.x = clampFI32(PV0i.x);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(uf_uniformRegisterPS[21].z)));
PV0i.z = clampFI32(PV0i.z);
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_uniformRegisterPS[21].x)));
PV0i.w = clampFI32(PV0i.w);
// 27
R126i.x = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x40e00000));
PV1i.x = R126i.x;
R124i.y = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x40e00000));
PV1i.y = R124i.y;
R127i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x40e00000));
PV1i.w = R127i.w;
// 28
R126i.y = floatBitsToInt(floor(intBitsToFloat(PV1i.w)));
PV0i.y = R126i.y;
R124i.z = floatBitsToInt(floor(intBitsToFloat(PV1i.y)));
PV0i.z = R124i.z;
PV0i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.x)));
// 29
R124i.x = floatBitsToInt(intBitsToFloat(R124i.y) + -(intBitsToFloat(PV0i.z)));
R124i.y = floatBitsToInt(intBitsToFloat(R126i.x) + -(intBitsToFloat(PV0i.w)));
R125i.z = floatBitsToInt(intBitsToFloat(R127i.w) + -(intBitsToFloat(PV0i.y)));
R127i.x = int(intBitsToFloat(PV0i.w));
PS1i = R127i.x;
// 30
R126i.x = int(intBitsToFloat(R124i.z));
PS0i = R126i.x;
// 31
backupReg0i = R126i.y;
R126i.y = int(intBitsToFloat(backupReg0i));
PS1i = R126i.y;
// 32
R124i.z = floatBitsToInt(float(R126i.x));
PS0i = R124i.z;
// 33
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV1i.x = floatBitsToInt(tempResultf);
R127i.w = floatBitsToInt(float(R126i.y));
PS1i = R127i.w;
// 34
tempResultf = intBitsToFloat(PS1i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
R126i.z = floatBitsToInt(float(R127i.x));
PS0i = R126i.z;
// 35
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV1i.z = floatBitsToInt(tempResultf);
// 36
R126i.y = uf_uniformRegisterPS[ARi.x+0].x;
PV0i.y = R126i.y;
PV0i.z = uf_uniformRegisterPS[ARi.x+8].x;
// 37
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.z));
PV1i.y = uf_uniformRegisterPS[ARi.y+8].y;
R127i.w = uf_uniformRegisterPS[ARi.y+0].y;
PV1i.w = R127i.w;
// 38
backupReg0i = R124i.x;
R124i.x = uf_uniformRegisterPS[ARi.z+0].z;
PV0i.x = R124i.x;
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.y));
PV0i.w = uf_uniformRegisterPS[ARi.z+8].z;
R15i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(R126i.y)));
R15i.x = clampFI32(R15i.x);
PS0i = R15i.x;
// 39
R15i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R125i.z)) + intBitsToFloat(R127i.w)));
R15i.y = clampFI32(R15i.y);
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(PV0i.w));
// 40
R15i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R124i.y)) + intBitsToFloat(R124i.x)));
R15i.z = clampFI32(R15i.z);
// 41
R57i.xyz = ivec3(R15i.x,R15i.y,R15i.z);
// 42
R45i.xyz = ivec3(R21i.x,R21i.y,R21i.z);
// 43
R46i.xyz = ivec3(R20i.x,R20i.y,R20i.z);
// 44
R47i.xyz = ivec3(R19i.x,R19i.y,R19i.z);
// 45
R48i.xyz = ivec3(R18i.x,R18i.y,R18i.z);
// 46
R49i.xyz = ivec3(R17i.x,R17i.y,R17i.z);
// 47
R50i.xyz = ivec3(R16i.x,R16i.y,R16i.z);
// 48
backupReg0i = R0i.x;
tempResulti = backupReg0i;
tempResulti = clamp(tempResulti, -256, 255);
ARi.x = tempResulti;
PV0i.x = tempResulti;
// 49
R0i.xyz = ivec3(((ARi.x==0)?R45i.x:(ARi.x==1)?R46i.x:(ARi.x==2)?R47i.x:(ARi.x==3)?R48i.x:(ARi.x==4)?R49i.x:(ARi.x==5)?R50i.x:(ARi.x==6)?R51i.x:(ARi.x==7)?R52i.x:(ARi.x==8)?R53i.x:(ARi.x==9)?R54i.x:(ARi.x==10)?R55i.x:(ARi.x==11)?R56i.x:(ARi.x==12)?R57i.x:(ARi.x==78)?R123i.x:(ARi.x==79)?R124i.x:(ARi.x==80)?R125i.x:(ARi.x==81)?R126i.x:(ARi.x==82)?R127i.x:0),((ARi.x==0)?R45i.y:(ARi.x==1)?R46i.y:(ARi.x==2)?R47i.y:(ARi.x==3)?R48i.y:(ARi.x==4)?R49i.y:(ARi.x==5)?R50i.y:(ARi.x==6)?R51i.y:(ARi.x==7)?R52i.y:(ARi.x==8)?R53i.y:(ARi.x==9)?R54i.y:(ARi.x==10)?R55i.y:(ARi.x==11)?R56i.y:(ARi.x==12)?R57i.y:(ARi.x==78)?R123i.y:(ARi.x==79)?R124i.y:(ARi.x==80)?R125i.y:(ARi.x==81)?R126i.y:(ARi.x==82)?R127i.y:0),((ARi.x==0)?R45i.z:(ARi.x==1)?R46i.z:(ARi.x==2)?R47i.z:(ARi.x==3)?R48i.z:(ARi.x==4)?R49i.z:(ARi.x==5)?R50i.z:(ARi.x==6)?R51i.z:(ARi.x==7)?R52i.z:(ARi.x==8)?R53i.z:(ARi.x==9)?R54i.z:(ARi.x==10)?R55i.z:(ARi.x==11)?R56i.z:(ARi.x==12)?R57i.z:(ARi.x==78)?R123i.z:(ARi.x==79)?R124i.z:(ARi.x==80)?R125i.z:(ARi.x==81)?R126i.z:(ARi.x==82)?R127i.z:0));
// 0
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.w)),intBitsToFloat(R0i.z)) + intBitsToFloat(R14i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.w)),intBitsToFloat(R0i.y)) + intBitsToFloat(R14i.w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.w)),intBitsToFloat(R0i.x)) + intBitsToFloat(R14i.w)));
PV0i.z = R123i.z;
// 1
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R124i.y = clampFI32(R124i.y);
PV1i.y = R124i.y;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R125i.z = clampFI32(R125i.z);
PV1i.z = R125i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.w = clampFI32(R127i.w);
PV1i.w = R127i.w;
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(uf_uniformRegisterPS[22].x)) + intBitsToFloat(uf_uniformRegisterPS[22].x)));
PV0i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(uf_uniformRegisterPS[22].z)) + intBitsToFloat(uf_uniformRegisterPS[22].z)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.z)),intBitsToFloat(uf_uniformRegisterPS[22].y)) + intBitsToFloat(uf_uniformRegisterPS[22].y)));
PV0i.w = R123i.w;
// 3
backupReg0i = R124i.y;
PV1i.x = floatBitsToInt(intBitsToFloat(R125i.z) + intBitsToFloat(PV0i.w));
R124i.y = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(PV0i.x));
R127i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.z));
// 4
tempResultf = log2(intBitsToFloat(PV1i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 5
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].y)));
tempResultf = log2(intBitsToFloat(R127i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 6
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[19].z)));
tempResultf = log2(intBitsToFloat(R124i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 7
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[19].x)));
R126i.y = floatBitsToInt(exp2(intBitsToFloat(R124i.x)));
PS1i = R126i.y;
// 8
R125i.z = floatBitsToInt(exp2(intBitsToFloat(R127i.w)));
PS0i = R125i.z;
// 9
R124i.x = floatBitsToInt(exp2(intBitsToFloat(R124i.y)));
PS1i = R124i.x;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS1i),intBitsToFloat(R126i.y),intBitsToFloat(R125i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.y = tempi.x;
// 11
PV1i.x = floatBitsToInt(intBitsToFloat(R124i.x) + -(intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(intBitsToFloat(R125i.z) + -(intBitsToFloat(PV0i.x)));
PV1i.w = floatBitsToInt(intBitsToFloat(R126i.y) + -(intBitsToFloat(PV0i.x)));
// 12
backupReg0i = R124i.y;
backupReg0i = R124i.y;
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(R124i.y)));
R124i.x = clampFI32(R124i.x);
PV0i.x = R124i.x;
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R124i.y = clampFI32(R124i.y);
PV0i.y = R124i.y;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_uniformRegisterPS[24].x)) + intBitsToFloat(backupReg0i)));
R127i.w = clampFI32(R127i.w);
PV0i.w = R127i.w;
// 13
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.w)),intBitsToFloat(uf_uniformRegisterPS[23].z)) + intBitsToFloat(uf_uniformRegisterPS[23].z)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(uf_uniformRegisterPS[23].y)) + intBitsToFloat(uf_uniformRegisterPS[23].y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.y)),intBitsToFloat(uf_uniformRegisterPS[23].x)) + intBitsToFloat(uf_uniformRegisterPS[23].x)));
PV1i.z = R123i.z;
// 14
backupReg0i = R124i.y;
R124i.y = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(PV1i.x));
R125i.z = floatBitsToInt(intBitsToFloat(R124i.x) + intBitsToFloat(PV1i.y));
PV0i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.z));
// 15
tempResultf = log2(intBitsToFloat(PV0i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 16
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].x)));
tempResultf = log2(intBitsToFloat(R125i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 17
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_uniformRegisterPS[20].y)));
tempResultf = log2(intBitsToFloat(R124i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 18
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_uniformRegisterPS[20].z)));
R124i.y = floatBitsToInt(exp2(intBitsToFloat(PV1i.y)));
PS0i = R124i.y;
// 19
R125i.z = floatBitsToInt(exp2(intBitsToFloat(PV0i.w)));
PS1i = R125i.z;
// 20
R124i.x = floatBitsToInt(exp2(intBitsToFloat(R127i.w)));
PS0i = R124i.x;
// 21
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PS0i),intBitsToFloat(R124i.y),intBitsToFloat(R125i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.z = tempi.x;
// 22
PV0i.x = floatBitsToInt(intBitsToFloat(R124i.y) + -(intBitsToFloat(PV1i.x)));
PV0i.y = floatBitsToInt(intBitsToFloat(R124i.x) + -(intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(intBitsToFloat(R125i.z) + -(intBitsToFloat(PV1i.x)));
// 23
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R126i.z)));
R123i.x = clampFI32(R123i.x);
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R126i.z)));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[25].x)) + intBitsToFloat(R126i.z)));
R123i.z = clampFI32(R123i.z);
PV1i.z = R123i.z;
// 24
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + -(0.5));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.y) + -(0.5));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + -(0.5));
// 25
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_uniformRegisterPS[18].x)) + intBitsToFloat(uf_uniformRegisterPS[17].x)));
PV1i.w = R123i.w;
// 26
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(uf_uniformRegisterPS[21].y)));
PV0i.x = clampFI32(PV0i.x);
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_uniformRegisterPS[21].x)));
PV0i.y = clampFI32(PV0i.y);
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(uf_uniformRegisterPS[21].z)));
PV0i.w = clampFI32(PV0i.w);
// 27
R124i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x40e00000));
PV1i.x = R124i.x;
R124i.y = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x40e00000));
PV1i.y = R124i.y;
R126i.z = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x40e00000));
PV1i.z = R126i.z;
// 28
R126i.y = floatBitsToInt(floor(intBitsToFloat(PV1i.x)));
PV0i.y = R126i.y;
R125i.z = floatBitsToInt(floor(intBitsToFloat(PV1i.y)));
PV0i.z = R125i.z;
PV0i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.z)));
// 29
R126i.xzw = floatBitsToInt(vec3(intBitsToFloat(R126i.z),intBitsToFloat(R124i.x),intBitsToFloat(R124i.y)) + vec3(-(intBitsToFloat(PV0i.w)),-(intBitsToFloat(PV0i.y)),-(intBitsToFloat(PV0i.z))));
R124i.x = int(intBitsToFloat(PV0i.w));
PS1i = R124i.x;
// 30
backupReg0i = R125i.z;
R125i.z = int(intBitsToFloat(backupReg0i));
PS0i = R125i.z;
// 31
R127i.x = int(intBitsToFloat(R126i.y));
PS1i = R127i.x;
// 32
R127i.w = floatBitsToInt(float(R124i.x));
PS0i = R127i.w;
// 33
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV1i.x = floatBitsToInt(tempResultf);
R126i.y = floatBitsToInt(float(R125i.z));
PS1i = R126i.y;
// 34
tempResultf = intBitsToFloat(PS1i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
R124i.w = floatBitsToInt(float(R127i.x));
PS0i = R124i.w;
// 35
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV1i.z = floatBitsToInt(tempResultf);
// 36
R125i.z = uf_uniformRegisterPS[ARi.x+0].x;
PV0i.z = R125i.z;
PV0i.w = uf_uniformRegisterPS[ARi.x+8].x;
// 37
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.w));
R126i.y = uf_uniformRegisterPS[ARi.y+0].y;
PV1i.y = R126i.y;
PV1i.z = uf_uniformRegisterPS[ARi.y+8].y;
// 38
backupReg0i = R126i.x;
R126i.x = uf_uniformRegisterPS[ARi.z+0].z;
PV0i.x = R126i.x;
PV0i.y = uf_uniformRegisterPS[ARi.z+8].z;
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.z));
R0i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(R125i.z)));
R0i.w = clampFI32(R0i.w);
// 39
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R126i.w)) + intBitsToFloat(R126i.y)));
R0i.y = clampFI32(R0i.y);
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(PV0i.y));
// 40
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R126i.z)) + intBitsToFloat(R126i.x)));
R0i.z = clampFI32(R0i.z);
PV0i.z = R0i.z;
// 41
R14i.xyz = ivec3(R0i.w,R0i.y,PV0i.z);
R14i.w = R0i.w;
// 42
R13i.xyz = ivec3(R15i.x,R15i.y,R15i.z);
R13i.w = R15i.w;
// 43
R12i.xyz = ivec3(R3i.x,R3i.y,R3i.z);
R12i.w = R3i.w;
// 44
R11i.xyz = ivec3(R2i.x,R2i.y,R2i.z);
R11i.w = R2i.w;
// 45
R10i.xyz = ivec3(R6i.x,R6i.y,R6i.z);
R10i.w = R6i.w;
// 46
R9i.xyz = ivec3(R22i.x,R22i.y,R22i.z);
R9i.w = R22i.w;
// 47
R8i.xyz = ivec3(R37i.x,R37i.y,R37i.z);
R8i.w = R37i.w;
// 0
R7i.xyz = ivec3(R38i.x,R38i.y,R38i.z);
R7i.w = R38i.w;
// export
passPixelColor0 = vec4( 1, 0, 0.0, 1.0 );
passPixelColor1 = vec4( 0.0, 1, 0.0, 1.0 );
passPixelColor2 = vec4( 0, 0, 1.0, 1.0 );
passPixelColor3 = vec4( 1.0, 1.0, 0.0, 1.0 );
passPixelColor4 = vec4( 0.0, 1.0, 1.0, 1.0 );
passPixelColor5 = vec4( 1.0, 0, 1.0, 1.0 );
passPixelColor6 = vec4 (intBitsToFloat(R13i.x), intBitsToFloat(R13i.y), intBitsToFloat(R13i.z), intBitsToFloat(R13i.w) );
passPixelColor6 = vec4( 1.0, 1.0, 1.0, 1.0 );
//passPixelColor0 = vec4(intBitsToFloat(R7i.x), intBitsToFloat(R7i.y), intBitsToFloat(R7i.z), intBitsToFloat(R7i.w));
//passPixelColor1 = vec4(intBitsToFloat(R8i.x), intBitsToFloat(R8i.y), intBitsToFloat(R8i.z), intBitsToFloat(R8i.w));
//passPixelColor2 = vec4(intBitsToFloat(R9i.x), intBitsToFloat(R9i.y), intBitsToFloat(R9i.z), intBitsToFloat(R9i.w));
//passPixelColor3 = vec4(intBitsToFloat(R10i.x), intBitsToFloat(R10i.y), intBitsToFloat(R10i.z), intBitsToFloat(R10i.w));
//passPixelColor4 = vec4(intBitsToFloat(R11i.x), intBitsToFloat(R11i.y), intBitsToFloat(R11i.z), intBitsToFloat(R11i.w));
//passPixelColor5 = vec4(intBitsToFloat(R12i.x), intBitsToFloat(R12i.y), intBitsToFloat(R12i.z), intBitsToFloat(R12i.w));
//passPixelColor6 = vec4(intBitsToFloat(R13i.x), intBitsToFloat(R13i.y), intBitsToFloat(R13i.z), intBitsToFloat(R13i.w));
//passPixelColor7 = vec4(intBitsToFloat(R14i.x), intBitsToFloat(R14i.y), intBitsToFloat(R14i.z), intBitsToFloat(R14i.w));
}
