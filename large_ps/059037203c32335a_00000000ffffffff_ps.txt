#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 059037203c32335a
uniform ivec4 uf_uniformRegisterPS[256];
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 4) out vec4 passPixelColor4;
layout(location = 5) out vec4 passPixelColor5;
layout(location = 6) out vec4 passPixelColor6;
layout(location = 7) out vec4 passPixelColor7;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R17i = ivec4(0);
ivec4 R18i = ivec4(0);
ivec4 R19i = ivec4(0);
ivec4 R20i = ivec4(0);
ivec4 R21i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
// 0
R127i.xyz = ivec3(0x3e124925,0x3edb6db8,0x3e924925);
R127i.w = floatBitsToInt(max(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y)));
PV0i.w = R127i.w;
R126i.y = 0x3f124925;
PS0i = R126i.y;
// 1
R124i.x = floatBitsToInt(max(intBitsToFloat(PV0i.w), intBitsToFloat(0x3edb6db8)));
R2i.y = floatBitsToInt(max(intBitsToFloat(PV0i.w), intBitsToFloat(0x3e924925)));
R124i.z = floatBitsToInt(max(intBitsToFloat(PV0i.w), 0.0));
R126i.w = floatBitsToInt(max(intBitsToFloat(PV0i.w), intBitsToFloat(0x3e124925)));
R1i.x = floatBitsToInt(max(intBitsToFloat(PV0i.w), intBitsToFloat(0x3f124925)));
PS1i = R1i.x;
// 2
R126i.x = 0x3f5b6db7;
R3i.y = floatBitsToInt(max(intBitsToFloat(R127i.w), intBitsToFloat(0x3f36db6e)));
R126i.z = 0x3f36db6e;
R1i.w = floatBitsToInt(max(intBitsToFloat(R127i.w), intBitsToFloat(0x3f5b6db7)));
R125i.y = floatBitsToInt(1.0);
PS0i = R125i.y;
// 3
R3i.x = floatBitsToInt(max(intBitsToFloat(R127i.w), 1.0));
R124i.y = floatBitsToInt(-(intBitsToFloat(R124i.z)));
R125i.z = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R124i.z)));
R127i.w = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R124i.z)));
R0i.z = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R126i.w)));
PS1i = R0i.z;
// 4
backupReg0i = R127i.x;
backupReg1i = R127i.z;
R127i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R126i.w)));
R1i.y = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R126i.w)));
R127i.z = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R2i.y)));
R125i.w = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R2i.y)));
R1i.z = floatBitsToInt(intBitsToFloat(backupReg1i) + -(intBitsToFloat(R2i.y)));
PS0i = R1i.z;
// 5
backupReg0i = R127i.y;
R125i.x = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R124i.x)));
R127i.y = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R124i.x)));
R2i.z = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R1i.x)));
R124i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R124i.x)));
R3i.z = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R1i.x)));
PS1i = R3i.z;
// 6
backupReg0i = R126i.y;
backupReg1i = R126i.z;
R2i.x = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R3i.y)));
R126i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R1i.x)));
R126i.z = floatBitsToInt(intBitsToFloat(backupReg1i) + -(intBitsToFloat(R3i.y)));
R0i.w = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R3i.y)));
R4i.z = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R1i.w)));
PS0i = R4i.z;
// 7
backupReg0i = R126i.x;
backupReg1i = R125i.y;
R126i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R1i.w)));
R125i.y = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R1i.w)));
R5i.z = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R3i.x)));
R2i.w = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(R3i.x)));
R0i.y = floatBitsToInt(intBitsToFloat(backupReg1i) + -(intBitsToFloat(R3i.x)));
PS1i = R0i.y;
// 8
backupReg0i = R125i.z;
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.y),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R124i.z)));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R124i.z)));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R124i.z)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R126i.w)));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R126i.w)));
PS0i = R124i.z;
// 9
backupReg0i = R127i.x;
backupReg1i = R127i.y;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R2i.y)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R126i.w)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.w),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R2i.y)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R2i.y)));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R124i.x)));
PS1i = R1i.z;
// 10
backupReg0i = R125i.x;
backupReg1i = R2i.z;
backupReg2i = R126i.y;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R124i.x)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R124i.x)));
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R1i.x)));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R1i.x)));
R3i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg2i),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R1i.x)));
PS0i = R3i.z;
// 11
backupReg0i = R126i.z;
backupReg1i = R125i.y;
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R3i.y)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R3i.y)));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R1i.w)));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R3i.y)));
R4i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R1i.w)));
PS1i = R4i.z;
// 12
backupReg0i = R126i.x;
backupReg1i = R0i.y;
backupReg2i = R125i.z;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R3i.x)));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R1i.w)));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R3i.x)));
R1i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.z),intBitsToFloat(uf_uniformRegisterPS[16].y)) + intBitsToFloat(R3i.x)));
R2i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R2i.w = clampFI32(R2i.w);
PS0i = R2i.w;
// 13
backupReg0i = R0i.x;
backupReg1i = R124i.z;
backupReg2i = R127i.y;
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R0i.x = clampFI32(R0i.x);
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.y = clampFI32(R127i.y);
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R124i.z = clampFI32(R124i.z);
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.w = clampFI32(R127i.w);
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R5i.z = clampFI32(R5i.z);
PS1i = R5i.z;
// 14
backupReg0i = R127i.x;
backupReg1i = R126i.y;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.x = clampFI32(R127i.x);
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R126i.y = clampFI32(R126i.y);
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R127i.z = clampFI32(R127i.z);
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R126i.w = clampFI32(R126i.w);
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R1i.z = clampFI32(R1i.z);
PS0i = R1i.z;
// 15
backupReg0i = R125i.x;
backupReg1i = R125i.y;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R125i.x = clampFI32(R125i.x);
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R125i.y = clampFI32(R125i.y);
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R2i.z = clampFI32(R2i.z);
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R124i.w = clampFI32(R124i.w);
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R3i.z = clampFI32(R3i.z);
PS1i = R3i.z;
// 16
backupReg0i = R124i.x;
backupReg1i = R126i.z;
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R124i.x = clampFI32(R124i.x);
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R124i.y = clampFI32(R124i.y);
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R126i.z = clampFI32(R126i.z);
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R125i.w = clampFI32(R125i.w);
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R4i.z = clampFI32(R4i.z);
PS0i = R4i.z;
// 17
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R126i.x = clampFI32(R126i.x);
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R0i.y = clampFI32(R0i.y);
R0i.z = floatBitsToInt(intBitsToFloat(R2i.w) * intBitsToFloat(0x40e00000));
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(uf_uniformRegisterPS[16].z)));
R1i.w = clampFI32(R1i.w);
R2i.w = floatBitsToInt(intBitsToFloat(R124i.z) * intBitsToFloat(0x40e00000));
PS1i = R2i.w;
// 18
backupReg0i = R0i.x;
backupReg1i = R5i.z;
R0i.x = floatBitsToInt(intBitsToFloat(R127i.w) * intBitsToFloat(0x40e00000));
R3i.y = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x40e00000));
R5i.z = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(0x40e00000));
R3i.w = floatBitsToInt(intBitsToFloat(backupReg1i) * intBitsToFloat(0x40e00000));
R4i.w = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(0x40e00000));
PS0i = R4i.w;
// 19
backupReg0i = R1i.z;
R3i.x = floatBitsToInt(intBitsToFloat(R126i.w) * intBitsToFloat(0x40e00000));
R2i.y = floatBitsToInt(intBitsToFloat(R127i.x) * intBitsToFloat(0x40e00000));
R1i.z = floatBitsToInt(intBitsToFloat(R126i.y) * intBitsToFloat(0x40e00000));
R5i.w = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x40e00000));
R6i.z = floatBitsToInt(intBitsToFloat(R125i.y) * intBitsToFloat(0x40e00000));
PS1i = R6i.z;
// 20
R2i.x = floatBitsToInt(intBitsToFloat(R124i.w) * intBitsToFloat(0x40e00000));
R1i.y = floatBitsToInt(intBitsToFloat(R2i.z) * intBitsToFloat(0x40e00000));
R2i.z = floatBitsToInt(intBitsToFloat(R125i.x) * intBitsToFloat(0x40e00000));
R6i.w = floatBitsToInt(intBitsToFloat(R3i.z) * intBitsToFloat(0x40e00000));
R3i.z = floatBitsToInt(intBitsToFloat(R124i.y) * intBitsToFloat(0x40e00000));
PS0i = R3i.z;
// 21
backupReg0i = R0i.y;
R1i.x = floatBitsToInt(intBitsToFloat(R126i.z) * intBitsToFloat(0x40e00000));
R0i.y = floatBitsToInt(intBitsToFloat(R124i.x) * intBitsToFloat(0x40e00000));
R7i.z = floatBitsToInt(intBitsToFloat(R125i.w) * intBitsToFloat(0x40e00000));
R7i.w = floatBitsToInt(intBitsToFloat(R4i.z) * intBitsToFloat(0x40e00000));
R8i.z = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x40e00000));
PS1i = R8i.z;
// 22
R4i.x = floatBitsToInt(intBitsToFloat(R1i.w) * intBitsToFloat(0x40e00000));
R4i.y = floatBitsToInt(intBitsToFloat(R126i.x) * intBitsToFloat(0x40e00000));
R4i.z = floatBitsToInt(floor(intBitsToFloat(R0i.z)));
R1i.w = floatBitsToInt(floor(intBitsToFloat(R2i.w)));
R0i.w = floatBitsToInt(floor(intBitsToFloat(R5i.z)));
PS0i = R0i.w;
// 0
R126i.x = floatBitsToInt(floor(intBitsToFloat(R3i.w)));
R124i.y = floatBitsToInt(floor(intBitsToFloat(R0i.x)));
R126i.z = floatBitsToInt(floor(intBitsToFloat(R3i.y)));
R125i.w = floatBitsToInt(floor(intBitsToFloat(R4i.w)));
R10i.z = int(intBitsToFloat(R4i.z));
PS0i = R10i.z;
// 1
R124i.x = floatBitsToInt(floor(intBitsToFloat(R5i.w)));
R126i.y = floatBitsToInt(floor(intBitsToFloat(R3i.x)));
R127i.z = floatBitsToInt(floor(intBitsToFloat(R2i.y)));
R124i.w = floatBitsToInt(floor(intBitsToFloat(R1i.z)));
R6i.x = int(intBitsToFloat(R1i.w));
PS1i = R6i.x;
// 2
R125i.x = floatBitsToInt(floor(intBitsToFloat(R2i.z)));
R125i.y = floatBitsToInt(floor(intBitsToFloat(R2i.x)));
R125i.z = floatBitsToInt(floor(intBitsToFloat(R1i.y)));
R126i.w = floatBitsToInt(floor(intBitsToFloat(R6i.z)));
R11i.z = int(intBitsToFloat(R0i.w));
PS0i = R11i.z;
// 3
R127i.x = floatBitsToInt(floor(intBitsToFloat(R6i.w)));
R127i.y = floatBitsToInt(floor(intBitsToFloat(R1i.x)));
R124i.z = floatBitsToInt(floor(intBitsToFloat(R0i.y)));
R127i.w = floatBitsToInt(floor(intBitsToFloat(R3i.z)));
R9i.w = int(intBitsToFloat(R126i.z));
PS1i = R9i.w;
// 4
R5i.x = floatBitsToInt(floor(intBitsToFloat(R7i.w)));
R5i.y = floatBitsToInt(floor(intBitsToFloat(R7i.z)));
R9i.z = floatBitsToInt(floor(intBitsToFloat(R4i.y)));
R8i.w = floatBitsToInt(floor(intBitsToFloat(R8i.z)));
R7i.y = int(intBitsToFloat(R124i.y));
PS0i = R7i.y;
// 5
backupReg0i = R0i.z;
R7i.x = floatBitsToInt(intBitsToFloat(R2i.w) + -(intBitsToFloat(R1i.w)));
R6i.y = floatBitsToInt(floor(intBitsToFloat(R4i.x)));
R0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R4i.z)));
R1i.w = floatBitsToInt(intBitsToFloat(R5i.z) + -(intBitsToFloat(R0i.w)));
R0i.w = int(intBitsToFloat(R126i.x));
PS1i = R0i.w;
// 6
backupReg0i = R0i.x;
backupReg1i = R3i.y;
R0i.x = floatBitsToInt(intBitsToFloat(R4i.w) + -(intBitsToFloat(R125i.w)));
R3i.y = floatBitsToInt(intBitsToFloat(R3i.w) + -(intBitsToFloat(R126i.x)));
R4i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R124i.y)));
R3i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + -(intBitsToFloat(R126i.z)));
R124i.y = int(intBitsToFloat(R125i.w));
PS0i = R124i.y;
// 7
backupReg0i = R124i.w;
R8i.x = floatBitsToInt(intBitsToFloat(R1i.z) + -(intBitsToFloat(R124i.w)));
R8i.y = floatBitsToInt(intBitsToFloat(R5i.w) + -(intBitsToFloat(R124i.x)));
R1i.z = floatBitsToInt(intBitsToFloat(R3i.x) + -(intBitsToFloat(R126i.y)));
R4i.w = floatBitsToInt(intBitsToFloat(R2i.y) + -(intBitsToFloat(R127i.z)));
R124i.w = int(intBitsToFloat(backupReg0i));
PS1i = R124i.w;
// 8
R9i.x = floatBitsToInt(intBitsToFloat(R6i.z) + -(intBitsToFloat(R126i.w)));
R9i.y = floatBitsToInt(intBitsToFloat(R2i.z) + -(intBitsToFloat(R125i.x)));
R2i.z = floatBitsToInt(intBitsToFloat(R2i.x) + -(intBitsToFloat(R125i.y)));
R10i.w = floatBitsToInt(intBitsToFloat(R6i.w) + -(intBitsToFloat(R127i.x)));
R2i.y = int(intBitsToFloat(R127i.z));
PS0i = R2i.y;
// 9
R10i.x = floatBitsToInt(intBitsToFloat(R3i.z) + -(intBitsToFloat(R127i.w)));
R10i.y = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R124i.z)));
R3i.z = floatBitsToInt(intBitsToFloat(R7i.w) + -(intBitsToFloat(R5i.x)));
R2i.w = floatBitsToInt(intBitsToFloat(R1i.y) + -(intBitsToFloat(R125i.z)));
R127i.z = int(intBitsToFloat(R126i.y));
PS1i = R127i.z;
// 10
backupReg0i = R7i.z;
backupReg1i = R124i.x;
R11i.x = floatBitsToInt(intBitsToFloat(R8i.z) + -(intBitsToFloat(R8i.w)));
R11i.y = floatBitsToInt(intBitsToFloat(R4i.y) + -(intBitsToFloat(R9i.z)));
R7i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R5i.y)));
R11i.w = floatBitsToInt(intBitsToFloat(R1i.x) + -(intBitsToFloat(R127i.y)));
R124i.x = int(intBitsToFloat(backupReg1i));
PS0i = R124i.x;
// 11
R8i.z = floatBitsToInt(intBitsToFloat(R4i.x) + -(intBitsToFloat(R6i.y)));
R126i.z = int(intBitsToFloat(R126i.w));
PS1i = R126i.z;
// 12
backupReg0i = R125i.x;
R125i.x = int(intBitsToFloat(backupReg0i));
PS0i = R125i.x;
// 13
backupReg0i = R125i.z;
R125i.z = int(intBitsToFloat(backupReg0i));
PS1i = R125i.z;
// 14
R4i.x = int(intBitsToFloat(R125i.y));
PS0i = R4i.x;
// 15
R4i.y = int(intBitsToFloat(R127i.x));
PS1i = R4i.y;
// 16
R7i.w = int(intBitsToFloat(R127i.w));
PS0i = R7i.w;
// 17
R0i.y = int(intBitsToFloat(R124i.z));
PS1i = R0i.y;
// 18
R6i.w = int(intBitsToFloat(R127i.y));
PS0i = R6i.w;
// 19
backupReg0i = R5i.y;
R5i.y = int(intBitsToFloat(backupReg0i));
PS1i = R5i.y;
// 20
R5i.w = int(intBitsToFloat(R5i.x));
PS0i = R5i.w;
// 21
R5i.x = int(intBitsToFloat(R8i.w));
PS1i = R5i.x;
// 22
backupReg0i = R9i.z;
R9i.z = int(intBitsToFloat(backupReg0i));
PS0i = R9i.z;
// 23
R1i.x = int(intBitsToFloat(R6i.y));
PS1i = R1i.x;
// 24
R127i.y = floatBitsToInt(float(R10i.z));
PS0i = R127i.y;
// 25
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV1i.x = floatBitsToInt(tempResultf);
R127i.w = floatBitsToInt(float(R6i.x));
PS1i = R127i.w;
// 26
tempResultf = intBitsToFloat(PS1i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
R125i.y = floatBitsToInt(float(R11i.z));
PS0i = R125i.y;
// 27
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV1i.z = floatBitsToInt(tempResultf);
R124i.z = floatBitsToInt(float(R9i.w));
PS1i = R124i.z;
// 28
tempResultf = intBitsToFloat(PS1i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.w = int(tempResultf);
PV0i.w = floatBitsToInt(tempResultf);
R6i.x = floatBitsToInt(float(R7i.y));
PS0i = R6i.x;
// 29
R11i.z = floatBitsToInt(float(R0i.w));
PS1i = R11i.z;
// 30
R127i.x = uf_uniformRegisterPS[ARi.x+0].x;
PV0i.x = R127i.x;
PV0i.y = uf_uniformRegisterPS[ARi.x+8].x;
R2i.x = floatBitsToInt(float(R124i.y));
PS0i = R2i.x;
// 31
backupReg0i = R124i.w;
tempResultf = intBitsToFloat(R6i.x);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV1i.x = floatBitsToInt(tempResultf);
R124i.w = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(PV0i.y));
R10i.z = floatBitsToInt(float(backupReg0i));
PS1i = R10i.z;
// 32
PV0i.x = uf_uniformRegisterPS[ARi.y+8].y;
R127i.w = uf_uniformRegisterPS[ARi.y+0].y;
PV0i.w = R127i.w;
R3i.x = floatBitsToInt(float(R2i.y));
PS0i = R3i.x;
// 33
R13i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(R0i.z)) + intBitsToFloat(R127i.x)));
R13i.x = clampFI32(R13i.x);
tempResultf = intBitsToFloat(R11i.z);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV1i.y = floatBitsToInt(tempResultf);
PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.x));
R7i.y = floatBitsToInt(float(R127i.z));
PS1i = R7i.y;
// 34
R13i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R7i.x)) + intBitsToFloat(R127i.w)));
R13i.y = clampFI32(R13i.y);
R127i.z = uf_uniformRegisterPS[ARi.z+0].z;
PV0i.z = R127i.z;
PV0i.w = uf_uniformRegisterPS[ARi.z+8].z;
R0i.w = floatBitsToInt(float(R124i.x));
PS0i = R0i.w;
// 35
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.w));
tempResultf = intBitsToFloat(R2i.x);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV1i.z = floatBitsToInt(tempResultf);
R6i.y = floatBitsToInt(float(R126i.z));
PS1i = R6i.y;
// 36
R2i.y = uf_uniformRegisterPS[ARi.w+0].x;
PV0i.y = R2i.y;
PV0i.z = uf_uniformRegisterPS[ARi.w+8].x;
R13i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R1i.w)) + intBitsToFloat(R127i.z)));
R13i.w = clampFI32(R13i.w);
R1i.w = floatBitsToInt(float(R125i.x));
PS0i = R1i.w;
// 37
R7i.x = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.z));
tempResultf = intBitsToFloat(R10i.z);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.w = int(tempResultf);
PV1i.w = floatBitsToInt(tempResultf);
R1i.y = floatBitsToInt(float(R125i.z));
PS1i = R1i.y;
// 0
tempResultf = intBitsToFloat(R6i.x);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV0i.x = floatBitsToInt(tempResultf);
R12i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.x),intBitsToFloat(R3i.w)) + intBitsToFloat(R2i.y)));
R12i.w = clampFI32(R12i.w);
R124i.w = floatBitsToInt(float(R4i.x));
PS0i = R124i.w;
// 1
tempResultf = intBitsToFloat(R11i.z);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV1i.y = floatBitsToInt(tempResultf);
R124i.x = floatBitsToInt(float(R4i.y));
PS1i = R124i.x;
// 2
tempResultf = intBitsToFloat(R2i.x);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV0i.z = floatBitsToInt(tempResultf);
R127i.z = floatBitsToInt(float(R7i.w));
PS0i = R127i.z;
// 3
tempResultf = intBitsToFloat(R10i.z);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.w = int(tempResultf);
PV1i.w = floatBitsToInt(tempResultf);
R127i.x = floatBitsToInt(float(R0i.y));
PS1i = R127i.x;
// 4
R124i.z = floatBitsToInt(float(R6i.w));
PS0i = R124i.z;
// 5
R125i.x = uf_uniformRegisterPS[ARi.x+0].y;
PV1i.x = R125i.x;
PV1i.y = uf_uniformRegisterPS[ARi.x+8].y;
R126i.x = floatBitsToInt(float(R5i.y));
PS1i = R126i.x;
// 6
tempResultf = intBitsToFloat(R3i.x);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV0i.x = floatBitsToInt(tempResultf);
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.y));
R126i.z = floatBitsToInt(float(R5i.w));
PS0i = R126i.z;
// 7
PV1i.x = uf_uniformRegisterPS[ARi.y+8].z;
R12i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R4i.z)) + intBitsToFloat(R125i.x)));
R12i.y = clampFI32(R12i.y);
R127i.w = uf_uniformRegisterPS[ARi.y+0].z;
PV1i.w = R127i.w;
R126i.w = floatBitsToInt(float(R5i.x));
PS1i = R126i.w;
// 8
tempResultf = intBitsToFloat(R7i.y);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.x));
R127i.y = floatBitsToInt(float(R9i.z));
PS0i = R127i.y;
// 9
PV1i.x = uf_uniformRegisterPS[ARi.z+8].x;
R12i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R3i.y)) + intBitsToFloat(R127i.w)));
R12i.z = clampFI32(R12i.z);
R127i.w = uf_uniformRegisterPS[ARi.z+0].x;
PV1i.w = R127i.w;
R125i.w = floatBitsToInt(float(R1i.x));
PS1i = R125i.w;
// 10
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.x));
tempResultf = intBitsToFloat(R0i.w);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV0i.z = floatBitsToInt(tempResultf);
// 11
R4i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R0i.x)) + intBitsToFloat(R127i.w)));
R4i.x = clampFI32(R4i.x);
R125i.z = uf_uniformRegisterPS[ARi.w+0].y;
PV1i.z = R125i.z;
PV1i.w = uf_uniformRegisterPS[ARi.w+8].y;
// 12
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.w));
tempResultf = intBitsToFloat(R6i.y);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.w = int(tempResultf);
PV0i.w = floatBitsToInt(tempResultf);
// 13
R125i.y = uf_uniformRegisterPS[ARi.x+0].z;
PV1i.y = R125i.y;
PV1i.z = uf_uniformRegisterPS[ARi.x+8].z;
R4i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R8i.x)) + intBitsToFloat(R125i.z)));
R4i.y = clampFI32(R4i.y);
PS1i = R4i.y;
// 14
tempResultf = intBitsToFloat(R1i.w);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV0i.x = floatBitsToInt(tempResultf);
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.z));
// 15
R125i.x = uf_uniformRegisterPS[ARi.y+0].x;
PV1i.x = R125i.x;
PV1i.y = uf_uniformRegisterPS[ARi.y+8].x;
R4i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R4i.w)) + intBitsToFloat(R125i.y)));
R4i.z = clampFI32(R4i.z);
// 16
tempResultf = intBitsToFloat(R1i.y);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.y));
// 17
PV1i.x = uf_uniformRegisterPS[ARi.z+8].y;
R127i.w = uf_uniformRegisterPS[ARi.z+0].y;
PV1i.w = R127i.w;
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R1i.z)) + intBitsToFloat(R125i.x)));
R0i.x = clampFI32(R0i.x);
PS1i = R0i.x;
// 18
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.x));
tempResultf = intBitsToFloat(R124i.w);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV0i.z = floatBitsToInt(tempResultf);
// 19
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R8i.y)) + intBitsToFloat(R127i.w)));
R0i.y = clampFI32(R0i.y);
R125i.z = uf_uniformRegisterPS[ARi.w+0].z;
PV1i.z = R125i.z;
PV1i.w = uf_uniformRegisterPS[ARi.w+8].z;
// 20
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.w));
tempResultf = intBitsToFloat(R124i.x);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.w = int(tempResultf);
PV0i.w = floatBitsToInt(tempResultf);
// 21
backupReg0i = R125i.z;
R125i.z = uf_uniformRegisterPS[ARi.x+0].x;
PV1i.z = R125i.z;
PV1i.w = uf_uniformRegisterPS[ARi.x+8].x;
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R9i.x)) + intBitsToFloat(backupReg0i)));
R0i.z = clampFI32(R0i.z);
PS1i = R0i.z;
// 22
tempResultf = intBitsToFloat(R127i.z);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV0i.x = floatBitsToInt(tempResultf);
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.w));
// 23
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R9i.y)) + intBitsToFloat(R125i.z)));
R1i.x = clampFI32(R1i.x);
R125i.y = uf_uniformRegisterPS[ARi.y+0].y;
PV1i.y = R125i.y;
PV1i.z = uf_uniformRegisterPS[ARi.y+8].y;
// 24
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.z));
tempResultf = intBitsToFloat(R127i.x);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
// 25
R125i.x = uf_uniformRegisterPS[ARi.z+0].z;
PV1i.x = R125i.x;
PV1i.y = uf_uniformRegisterPS[ARi.z+8].z;
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R2i.w)) + intBitsToFloat(R125i.y)));
R1i.y = clampFI32(R1i.y);
PS1i = R1i.y;
// 26
tempResultf = intBitsToFloat(R124i.z);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV0i.z = floatBitsToInt(tempResultf);
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.y));
// 27
PV1i.x = uf_uniformRegisterPS[ARi.w+8].x;
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R2i.z)) + intBitsToFloat(R125i.x)));
R1i.z = clampFI32(R1i.z);
R124i.w = uf_uniformRegisterPS[ARi.w+0].x;
PV1i.w = R124i.w;
// 28
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.x));
tempResultf = intBitsToFloat(R126i.x);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.w = int(tempResultf);
PV0i.w = floatBitsToInt(tempResultf);
// 29
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R10i.w)) + intBitsToFloat(R124i.w)));
R2i.x = clampFI32(R2i.x);
R127i.z = uf_uniformRegisterPS[ARi.x+0].y;
PV1i.z = R127i.z;
PV1i.w = uf_uniformRegisterPS[ARi.x+8].y;
// 30
tempResultf = intBitsToFloat(R126i.z);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV0i.x = floatBitsToInt(tempResultf);
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.w));
// 31
R125i.y = uf_uniformRegisterPS[ARi.y+0].z;
PV1i.y = R125i.y;
PV1i.z = uf_uniformRegisterPS[ARi.y+8].z;
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R10i.x)) + intBitsToFloat(R127i.z)));
R2i.y = clampFI32(R2i.y);
PS1i = R2i.y;
// 32
tempResultf = intBitsToFloat(R126i.w);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.y = int(tempResultf);
PV0i.y = floatBitsToInt(tempResultf);
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.z));
// 33
backupReg0i = R125i.y;
R125i.y = uf_uniformRegisterPS[ARi.z+0].x;
PV1i.y = R125i.y;
PV1i.z = uf_uniformRegisterPS[ARi.z+8].x;
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R10i.y)) + intBitsToFloat(backupReg0i)));
R2i.z = clampFI32(R2i.z);
PS1i = R2i.z;
// 34
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.z));
tempResultf = intBitsToFloat(R127i.y);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.z = int(tempResultf);
PV0i.z = floatBitsToInt(tempResultf);
// 35
R126i.x = uf_uniformRegisterPS[ARi.w+0].y;
PV1i.x = R126i.x;
PV1i.y = uf_uniformRegisterPS[ARi.w+8].y;
R10i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R11i.w)) + intBitsToFloat(R125i.y)));
R10i.w = clampFI32(R10i.w);
// 36
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.y));
tempResultf = intBitsToFloat(R125i.w);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.w = int(tempResultf);
PV0i.w = floatBitsToInt(tempResultf);
// 37
PV1i.x = uf_uniformRegisterPS[ARi.x+8].z;
R10i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R7i.z)) + intBitsToFloat(R126i.x)));
R10i.y = clampFI32(R10i.y);
R124i.w = uf_uniformRegisterPS[ARi.x+0].z;
PV1i.w = R124i.w;
// 38
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.x));
R126i.z = uf_uniformRegisterPS[ARi.y+0].x;
PV0i.z = R126i.z;
PV0i.w = uf_uniformRegisterPS[ARi.y+8].x;
// 39
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.w));
R127i.y = uf_uniformRegisterPS[ARi.z+0].y;
PV1i.y = R127i.y;
PV1i.z = uf_uniformRegisterPS[ARi.z+8].y;
R10i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R3i.z)) + intBitsToFloat(R124i.w)));
R10i.z = clampFI32(R10i.z);
PS1i = R10i.z;
// 40
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.z));
R3i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R11i.x)) + intBitsToFloat(R126i.z)));
R3i.w = clampFI32(R3i.w);
// 41
R126i.x = uf_uniformRegisterPS[ARi.w+0].z;
PV1i.x = R126i.x;
PV1i.y = uf_uniformRegisterPS[ARi.w+8].z;
R3i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R11i.y)) + intBitsToFloat(R127i.y)));
R3i.y = clampFI32(R3i.y);
PS1i = R3i.y;
// 42
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.y));
// 43
R3i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R8i.z)) + intBitsToFloat(R126i.x)));
R3i.z = clampFI32(R3i.z);
PV1i.z = R3i.z;
// 44
R21i.xyz = ivec3(R3i.w,R3i.y,PV1i.z);
R21i.w = R3i.w;
// 45
R20i.xyz = ivec3(R10i.w,R10i.y,R10i.z);
R20i.w = R10i.w;
// 46
R19i.xyz = ivec3(R2i.x,R2i.y,R2i.z);
R19i.w = R2i.w;
// 47
R18i.xyz = ivec3(R1i.x,R1i.y,R1i.z);
R18i.w = R1i.w;
// 0
R17i.xyz = ivec3(R0i.x,R0i.y,R0i.z);
R17i.w = R0i.w;
// 1
R16i.xyz = ivec3(R4i.x,R4i.y,R4i.z);
R16i.w = R4i.w;
// 2
R15i.xyz = ivec3(R12i.w,R12i.y,R12i.z);
R15i.w = R12i.w;
// 3
R14i.xyz = ivec3(R13i.x,R13i.y,R13i.w);
R14i.w = R13i.w;
// export
passPixelColor0 = vec4(intBitsToFloat(R14i.x), intBitsToFloat(R14i.y), intBitsToFloat(R14i.z), intBitsToFloat(R14i.w));
passPixelColor1 = vec4(intBitsToFloat(R15i.x), intBitsToFloat(R15i.y), intBitsToFloat(R15i.z), intBitsToFloat(R15i.w));
passPixelColor2 = vec4(intBitsToFloat(R16i.x), intBitsToFloat(R16i.y), intBitsToFloat(R16i.z), intBitsToFloat(R16i.w));
passPixelColor3 = vec4(intBitsToFloat(R17i.x), intBitsToFloat(R17i.y), intBitsToFloat(R17i.z), intBitsToFloat(R17i.w));
passPixelColor4 = vec4(intBitsToFloat(R18i.x), intBitsToFloat(R18i.y), intBitsToFloat(R18i.z), intBitsToFloat(R18i.w));
passPixelColor5 = vec4(intBitsToFloat(R19i.x), intBitsToFloat(R19i.y), intBitsToFloat(R19i.z), intBitsToFloat(R19i.w));
passPixelColor6 = vec4(intBitsToFloat(R20i.x), intBitsToFloat(R20i.y), intBitsToFloat(R20i.z), intBitsToFloat(R20i.w));
passPixelColor7 = vec4(intBitsToFloat(R21i.x), intBitsToFloat(R21i.y), intBitsToFloat(R21i.z), intBitsToFloat(R21i.w));
}
