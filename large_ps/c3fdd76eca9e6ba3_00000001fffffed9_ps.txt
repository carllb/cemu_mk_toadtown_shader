#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader c3fdd76eca9e6ba3
uniform ivec4 uf_remappedPS[10];
layout(binding = 0) uniform samplerCubeArray textureUnitPS0;// Tex0 addr 0x3fa08800 res 32x32x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x6) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform samplerCubeArray textureUnitPS1;// Tex1 addr 0x3fa3b800 res 32x32x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x6) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x3fa04000 res 32x32x1 dim 1 tm: 4 format 0823 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 4) out vec4 passPixelColor4;
layout(location = 5) out vec4 passPixelColor5;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R15f = vec4(0.0);
vec4 R16f = vec4(0.0);
vec4 R17f = vec4(0.0);
vec4 R18f = vec4(0.0);
vec4 R19f = vec4(0.0);
vec4 R20f = vec4(0.0);
vec4 R21f = vec4(0.0);
vec4 R22f = vec4(0.0);
vec4 R23f = vec4(0.0);
vec4 R24f = vec4(0.0);
vec4 R25f = vec4(0.0);
vec4 R26f = vec4(0.0);
vec4 R27f = vec4(0.0);
vec4 R28f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex0 = 0.0;
float cubeMapArrayIndex1 = 0.0;
R0f = passParameterSem0;
R6f.xyz = (texture(textureUnitPS2, R0f.xy).xyz);
// 0
R127f.x = -(R6f.x);
R4f.y = R6f.x;
R5f.z = -(R6f.z);
R127f.w = R6f.y;
R4f.x = -(R6f.z);
PS0f = R4f.x;
// 1
R126f.x = -(R6f.z);
R126f.y = -(R6f.x);
R127f.z = -(R6f.z);
R125f.w = R6f.z;
R125f.y = R6f.y;
PS1f = R125f.y;
// 2
R125f.x = -(R6f.x);
R5f.y = -(R6f.x);
R4f.z = -(R6f.y);
R126f.w = R6f.y;
R7f.z = R6f.z;
PS0f = R7f.z;
// 3
redcCUBE(vec4(R127f.z,R127f.z,R127f.x,R127f.w),vec4(R127f.w,R127f.x,R127f.z,R127f.z),cubeMapSTM,cubeMapFaceId);
R0f.x = cubeMapSTM.x;
R0f.y = cubeMapSTM.y;
R0f.z = cubeMapSTM.z;
R0f.w = intBitsToFloat(cubeMapFaceId);
PV1f.x = R0f.x;
PV1f.y = R0f.y;
PV1f.z = R0f.z;
PV1f.w = R0f.w;
R8f.x = -(R6f.z);
PS1f = R8f.x;
// 4
redcCUBE(vec4(R4f.z,R4f.z,R4f.x,R4f.y),vec4(R4f.y,R4f.x,R4f.z,R4f.z),cubeMapSTM,cubeMapFaceId);
R1f.x = cubeMapSTM.x;
R1f.y = cubeMapSTM.y;
R1f.z = cubeMapSTM.z;
R1f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R1f.x;
PV0f.y = R1f.y;
PV0f.z = R1f.z;
PV0f.w = R1f.w;
R4f.z = R6f.x;
PS0f = R4f.z;
// 5
redcCUBE(vec4(R126f.w,R126f.w,R126f.x,R126f.y),vec4(R126f.y,R126f.x,R126f.w,R126f.w),cubeMapSTM,cubeMapFaceId);
R2f.x = cubeMapSTM.x;
R2f.y = cubeMapSTM.y;
R2f.z = cubeMapSTM.z;
R2f.w = intBitsToFloat(cubeMapFaceId);
PV1f.x = R2f.x;
PV1f.y = R2f.y;
PV1f.z = R2f.z;
PV1f.w = R2f.w;
R126f.w = 1.0 / abs(R0f.z);
PS1f = R126f.w;
// 6
redcCUBE(vec4(R125f.x,R125f.x,R125f.w,R125f.y),vec4(R125f.y,R125f.w,R125f.x,R125f.x),cubeMapSTM,cubeMapFaceId);
R3f.x = cubeMapSTM.x;
R3f.y = cubeMapSTM.y;
R3f.z = cubeMapSTM.z;
R3f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R3f.x;
PV0f.y = R3f.y;
PV0f.z = R3f.z;
PV0f.w = R3f.w;
R125f.w = 1.0 / abs(R1f.z);
PS0f = R125f.w;
// 7
backupReg0f = R0f.x;
backupReg1f = R0f.y;
R0f.x = (mul_nonIEEE(backupReg0f,R126f.w) + 1.5);
R0f.y = (mul_nonIEEE(backupReg1f,R126f.w) + 1.5);
R8f.z = R4f.y;
R5f.w = R6f.y;
R126f.w = 1.0 / abs(R2f.z);
PS1f = R126f.w;
// 8
backupReg0f = R1f.x;
backupReg1f = R1f.y;
R1f.x = (mul_nonIEEE(backupReg0f,R125f.w) + 1.5);
R1f.y = (mul_nonIEEE(backupReg1f,R125f.w) + 1.5);
R11f.z = -(R6f.x);
R8f.w = -(R6f.y);
R125f.w = 1.0 / abs(R3f.z);
PS0f = R125f.w;
// 9
backupReg0f = R2f.x;
backupReg1f = R2f.y;
backupReg2f = R3f.x;
R2f.x = (mul_nonIEEE(backupReg0f,R126f.w) + 1.5);
R2f.y = (mul_nonIEEE(backupReg1f,R126f.w) + 1.5);
R14f.z = R6f.y;
R10f.w = -(R6f.x);
R3f.x = (mul_nonIEEE(backupReg2f,PS0f) + 1.5);
PS1f = R3f.x;
// 10
backupReg0f = R3f.y;
R10f.x = R6f.z;
R3f.y = (mul_nonIEEE(backupReg0f,R125f.w) + 1.5);
R6f.z = -(R5f.z);
R13f.w = R4f.y;
R4f.y = R6f.y;
PS0f = R4f.y;
R17f.xyz = (texture(textureUnitPS0, vec4(redcCUBEReverse(R0f.yx,floatBitsToInt(R0f.w)),cubeMapArrayIndex0)).xyz);
R18f.xyz = (texture(textureUnitPS0, vec4(redcCUBEReverse(R1f.yx,floatBitsToInt(R1f.w)),cubeMapArrayIndex0)).xyz);
R19f.xyz = (texture(textureUnitPS0, vec4(redcCUBEReverse(R2f.yx,floatBitsToInt(R2f.w)),cubeMapArrayIndex0)).xyz);
R21f.xyz = (texture(textureUnitPS0, vec4(redcCUBEReverse(R3f.yx,floatBitsToInt(R3f.w)),cubeMapArrayIndex0)).xyz);
R23f.xyz = (texture(textureUnitPS1, vec4(redcCUBEReverse(R0f.yx,floatBitsToInt(R0f.w)),cubeMapArrayIndex1)).xyz);
R24f.xyz = (texture(textureUnitPS1, vec4(redcCUBEReverse(R1f.yx,floatBitsToInt(R1f.w)),cubeMapArrayIndex1)).xyz);
R25f.xyz = (texture(textureUnitPS1, vec4(redcCUBEReverse(R2f.yx,floatBitsToInt(R2f.w)),cubeMapArrayIndex1)).xyz);
R27f.xyz = (texture(textureUnitPS1, vec4(redcCUBEReverse(R3f.yx,floatBitsToInt(R3f.w)),cubeMapArrayIndex1)).xyz);
// 0
redcCUBE(vec4(R4f.z,R4f.z,R4f.x,R4f.y),vec4(R4f.y,R4f.x,R4f.z,R4f.z),cubeMapSTM,cubeMapFaceId);
R3f.x = cubeMapSTM.x;
R3f.y = cubeMapSTM.y;
R3f.z = cubeMapSTM.z;
R3f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R3f.x;
PV0f.y = R3f.y;
PV0f.z = R3f.z;
PV0f.w = R3f.w;
R12f.w = 1.0;
PS0f = R12f.w;
// 1
R5f.x = mul_nonIEEE(R7f.z, R7f.z);
R1f.y = mul_nonIEEE(R5f.y, R7f.z);
R1f.z = mul_nonIEEE(R5f.z, R5f.z);
R0f.w = mul_nonIEEE(R5f.z, R6f.x);
PS1f = 1.0 / abs(PV0f.z);
// 2
backupReg0f = R3f.x;
backupReg1f = R3f.y;
R3f.x = (mul_nonIEEE(backupReg0f,PS1f) + 1.5);
R3f.y = (mul_nonIEEE(backupReg1f,PS1f) + 1.5);
R9f.z = mul_nonIEEE(R8f.z, R8f.x);
R6f.w = mul_nonIEEE(R5f.w, R8f.z);
R10f.z = mul_nonIEEE(R5f.w, R5f.w);
PS0f = R10f.z;
// 3
R7f.x = mul_nonIEEE(R8f.x, R11f.z);
R0f.y = mul_nonIEEE(R11f.z, R8f.w);
R12f.z = mul_nonIEEE(R8f.w, R8f.w);
R7f.w = mul_nonIEEE(R8f.x, R5f.w);
R9f.w = mul_nonIEEE(R8f.w, R8f.x);
PS1f = R9f.w;
// 4
R9f.x = mul_nonIEEE(R14f.z, R8f.x);
R7f.y = mul_nonIEEE(R10f.w, R14f.z);
R13f.z = mul_nonIEEE(R10f.w, R10f.w);
R11f.w = mul_nonIEEE(R8f.x, R10f.w);
R11f.x = mul_nonIEEE(R14f.z, R10f.x);
PS0f = R11f.x;
// 5
backupReg0f = R6f.y;
R1f.x = mul_nonIEEE(R6f.y, R6f.y);
R8f.y = mul_nonIEEE(R13f.w, R14f.z);
R15f.z = mul_nonIEEE(R13f.w, R13f.w);
R14f.w = mul_nonIEEE(R10f.x, R13f.w);
R6f.y = backupReg0f;
PS1f = R6f.y;
// 6
redcCUBE(vec4(R6f.z,R6f.z,R6f.x,PS1f),vec4(PS1f,R6f.x,R6f.z,R6f.z),cubeMapSTM,cubeMapFaceId);
R4f.x = cubeMapSTM.x;
R4f.y = cubeMapSTM.y;
R4f.z = cubeMapSTM.z;
R4f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R4f.x;
PV0f.y = R4f.y;
PV0f.z = R4f.z;
PV0f.w = R4f.w;
R2f.x = mul_nonIEEE(R6f.x, PS1f);
PS0f = R2f.x;
// 7
R0f.x = mul_nonIEEE(R6f.y, R5f.y);
R2f.y = mul_nonIEEE(R6f.y, R5f.z);
R0f.z = mul_nonIEEE(R7f.z, R6f.y);
R2f.w = mul_nonIEEE(R6f.x, R6f.x);
PV1f.w = R2f.w;
PS1f = 1.0 / abs(PV0f.z);
// 8
backupReg0f = R4f.x;
backupReg1f = R4f.y;
R4f.x = (mul_nonIEEE(backupReg0f,PS1f) + 1.5);
R4f.y = (mul_nonIEEE(backupReg1f,PS1f) + 1.5);
R2f.z = mul_nonIEEE(R5f.y, R5f.y);
R1f.w = mul_nonIEEE(R8f.x, R8f.x);
R12f.x = -(R1f.x) + PV1f.w;
PS0f = R12f.x;
R16f.xyz = (texture(textureUnitPS0, vec4(redcCUBEReverse(R4f.yx,floatBitsToInt(R4f.w)),cubeMapArrayIndex0)).xyz);
R20f.xyz = (texture(textureUnitPS0, vec4(redcCUBEReverse(R3f.yx,floatBitsToInt(R3f.w)),cubeMapArrayIndex0)).xyz);
R22f.xyz = (texture(textureUnitPS1, vec4(redcCUBEReverse(R4f.yx,floatBitsToInt(R4f.w)),cubeMapArrayIndex1)).xyz);
R26f.xyz = (texture(textureUnitPS1, vec4(redcCUBEReverse(R3f.yx,floatBitsToInt(R3f.w)),cubeMapArrayIndex1)).xyz);
// 0
R125f.x = dot(vec4(R6f.x,R6f.y,R5f.z,R12f.w),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),intBitsToFloat(uf_remappedPS[0].w)));
PV0f.x = R125f.x;
PV0f.y = R125f.x;
PV0f.z = R125f.x;
PV0f.w = R125f.x;
R3f.y = -(R1f.x) + R2f.z;
PS0f = R3f.y;
// 1
tempf.x = dot(vec4(R6f.x,R6f.y,R5f.z,R12f.w),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),intBitsToFloat(uf_remappedPS[1].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.w = tempf.x;
R3f.x = R1f.w + -(R2f.w);
PS1f = R3f.x;
// 2
backupReg0f = R2f.z;
tempf.x = dot(vec4(R6f.x,R6f.y,R5f.z,R12f.w),vec4(intBitsToFloat(uf_remappedPS[2].x),intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(uf_remappedPS[2].z),intBitsToFloat(uf_remappedPS[2].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R125f.y = tempf.x;
R2f.z = R1f.w + -(backupReg0f);
PS0f = R2f.z;
// 3
backupReg0f = R0f.w;
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),intBitsToFloat(uf_remappedPS[3].w)),vec4(R2f.x,R2f.y,R1f.z,backupReg0f));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R5f.z = R1f.w + -(R1f.x);
PS1f = R5f.z;
// 4
backupReg0f = R0f.w;
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w)),vec4(R2f.x,R2f.y,R1f.z,backupReg0f));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R1f.w = R125f.x + PV1f.x;
PS0f = R1f.w;
// 5
backupReg0f = R0f.w;
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w)),vec4(R2f.x,R2f.y,R1f.z,backupReg0f));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R2f.y = R125f.w + PV0f.x;
PS1f = R2f.y;
// 6
R125f.x = dot(vec4(R5f.y,R6f.y,R7f.z,R12f.w),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),intBitsToFloat(uf_remappedPS[0].w)));
PV0f.x = R125f.x;
PV0f.y = R125f.x;
PV0f.z = R125f.x;
PV0f.w = R125f.x;
R1f.z = R125f.y + PV1f.x;
PS0f = R1f.z;
// 7
tempf.x = dot(vec4(R5f.y,R6f.y,R7f.z,R12f.w),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),intBitsToFloat(uf_remappedPS[1].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.w = tempf.x;
R4f.y = (mul_nonIEEE(R10f.x,R10f.x) + -(R1f.x));
PS1f = R4f.y;
// 8
tempf.x = dot(vec4(R5f.y,R6f.y,R7f.z,R12f.w),vec4(intBitsToFloat(uf_remappedPS[2].x),intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(uf_remappedPS[2].z),intBitsToFloat(uf_remappedPS[2].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.z = tempf.x;
R28f.w = 1.0;
PS0f = R28f.w;
// 9
backupReg0f = R0f.x;
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),intBitsToFloat(uf_remappedPS[3].w)),vec4(backupReg0f,R0f.z,R5f.x,R1f.y));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].w), R7f.w);
PS1f = R126f.x;
// 10
backupReg0f = R0f.x;
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w)),vec4(backupReg0f,R0f.z,R5f.x,R1f.y));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R1f.x = R125f.x + PV1f.x;
PS0f = R1f.x;
// 11
backupReg0f = R0f.x;
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w)),vec4(backupReg0f,R0f.z,R5f.x,R1f.y));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.w = R125f.w + PV0f.x;
PS1f = R0f.w;
// 12
tempf.x = dot(vec4(R8f.x,R8f.z,R5f.w,R12f.w),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),intBitsToFloat(uf_remappedPS[0].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R125f.w = tempf.x;
R0f.z = R127f.z + PV1f.x;
PS0f = R0f.z;
// 13
tempf.x = dot(vec4(R8f.x,R8f.z,R5f.w,R12f.w),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),intBitsToFloat(uf_remappedPS[1].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.z = tempf.x;
R125f.x = mul_nonIEEE(R12f.w, intBitsToFloat(uf_remappedPS[1].w));
PS1f = R125f.x;
// 14
tempf.x = dot(vec4(R8f.x,R8f.z,R5f.w,R12f.w),vec4(intBitsToFloat(uf_remappedPS[2].x),intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(uf_remappedPS[2].z),intBitsToFloat(uf_remappedPS[2].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R125f.y = tempf.x;
R127f.x = mul_nonIEEE(R12f.w, intBitsToFloat(uf_remappedPS[2].w));
PS0f = R127f.x;
// 15
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),R126f.x),vec4(R9f.z,R6f.w,R10f.z,1.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].w), R9f.w);
PS1f = R126f.x;
// 16
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w)),vec4(R9f.z,R6f.w,R10f.z,R7f.w));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R5f.w = R125f.w + PV1f.x;
PS0f = R5f.w;
// 17
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w)),vec4(R9f.z,R6f.w,R10f.z,R7f.w));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R9f.z = R127f.z + PV0f.x;
PS1f = R9f.z;
// 18
R124f.x = dot(vec4(R8f.x,R11f.z,R8f.w,R12f.w),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),intBitsToFloat(uf_remappedPS[0].w)));
PV0f.x = R124f.x;
PV0f.y = R124f.x;
PV0f.z = R124f.x;
PV0f.w = R124f.x;
R1f.y = R125f.y + PV1f.x;
PS0f = R1f.y;
// 19
tempf.x = dot(vec4(R8f.x,R11f.z,R8f.w,R125f.x),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),1.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.w = tempf.x;
R0f.x = mul_nonIEEE(R12f.w, intBitsToFloat(uf_remappedPS[1].w));
PS1f = R0f.x;
// 20
tempf.x = dot(vec4(R8f.x,R11f.z,R8f.w,R127f.x),vec4(intBitsToFloat(uf_remappedPS[2].x),intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(uf_remappedPS[2].z),1.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R11f.z = tempf.x;
R5f.x = mul_nonIEEE(R12f.w, intBitsToFloat(uf_remappedPS[2].w));
PS0f = R5f.x;
// 21
backupReg0f = R0f.y;
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),R126f.x),vec4(R7f.x,backupReg0f,R12f.z,1.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R6f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].w), R11f.w);
PS1f = R6f.x;
// 22
backupReg0f = R0f.y;
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w)),vec4(R7f.x,backupReg0f,R12f.z,R9f.w));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R5f.y = R124f.x + PV1f.x;
PS0f = R5f.y;
// 23
backupReg0f = R0f.y;
backupReg1f = R9f.w;
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w)),vec4(R7f.x,backupReg0f,R12f.z,backupReg1f));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R9f.w = tempf.x;
R7f.x = R125f.w + PV0f.x;
PS1f = R7f.x;
// 0
R124f.x = dot(vec4(R8f.x,R14f.z,R10f.w,R12f.w),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),intBitsToFloat(uf_remappedPS[0].w)));
PV0f.x = R124f.x;
PV0f.y = R124f.x;
PV0f.z = R124f.x;
PV0f.w = R124f.x;
R126f.w = R11f.z + R9f.w;
PS0f = R126f.w;
// 1
backupReg0f = R0f.x;
tempf.x = dot(vec4(R8f.x,R14f.z,R10f.w,backupReg0f),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),1.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.w = tempf.x;
R126f.x = mul_nonIEEE(R12f.w, intBitsToFloat(uf_remappedPS[1].w));
PS1f = R126f.x;
// 2
tempf.x = dot(vec4(R8f.x,R14f.z,R10f.w,R5f.x),vec4(intBitsToFloat(uf_remappedPS[2].x),intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(uf_remappedPS[2].z),1.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.z = tempf.x;
R127f.x = mul_nonIEEE(R12f.w, intBitsToFloat(uf_remappedPS[2].w));
PS0f = R127f.x;
// 3
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),R6f.x),vec4(R9f.x,R7f.y,R13f.z,1.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].w), R14f.w);
PS1f = R125f.x;
// 4
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w)),vec4(R9f.x,R7f.y,R13f.z,R11f.w));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.y = R124f.x + PV1f.x;
PS0f = R126f.y;
// 5
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w)),vec4(R9f.x,R7f.y,R13f.z,R11f.w));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R124f.x = R125f.w + PV0f.x;
PS1f = R124f.x;
// 6
backupReg0f = R127f.z;
tempf.x = dot(vec4(R10f.x,R14f.z,R13f.w,R12f.w),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),intBitsToFloat(uf_remappedPS[0].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.z = tempf.x;
R125f.w = backupReg0f + PV1f.x;
PS0f = R125f.w;
// 7
backupReg0f = R126f.x;
R126f.x = dot(vec4(R10f.x,R14f.z,R13f.w,backupReg0f),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),1.0));
PV1f.x = R126f.x;
PV1f.y = R126f.x;
PV1f.z = R126f.x;
PV1f.w = R126f.x;
// 8
tempf.x = dot(vec4(R10f.x,R14f.z,R13f.w,R127f.x),vec4(intBitsToFloat(uf_remappedPS[2].x),intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(uf_remappedPS[2].z),1.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R125f.y = tempf.x;
// 9
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),R125f.x),vec4(R11f.x,R8f.y,R15f.z,1.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
// 10
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w)),vec4(R11f.x,R8f.y,R15f.z,R14f.w));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.w = R127f.z + PV1f.x;
PS0f = R127f.w;
// 11
tempf.x = dot(vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w)),vec4(R11f.x,R8f.y,R15f.z,R14f.w));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.z = R126f.x + PV0f.x;
PS1f = R127f.z;
// 12
R126f.x = R125f.y + PV1f.x;
R125f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].x),R12f.x) + R1f.w);
R126f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].z),R12f.x) + R1f.z);
R124f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y),R12f.x) + R2f.y);
R127f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].x),R3f.y) + R1f.x);
PS0f = R127f.y;
// 13
R125f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y),R3f.y) + R0f.w);
R124f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].x),R3f.x) + R5f.w);
R125f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y),R3f.x) + R9f.z);
R0f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].z),R3f.y) + R0f.z);
R124f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].z),R3f.x) + R1f.y);
PS1f = R124f.z;
// 14
backupReg0f = R2f.z;
backupReg1f = R126f.y;
backupReg2f = R124f.x;
R124f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].z),R2f.z) + R126f.w);
R126f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y),R2f.z) + R7f.x);
R2f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].x),backupReg0f) + R5f.y);
R126f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].x),R5f.z) + backupReg1f);
R5f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y),R5f.z) + backupReg2f);
PS0f = R5f.y;
// 15
backupReg0f = R126f.x;
backupReg1f = R127f.z;
backupReg2f = R125f.y;
R126f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].z),R5f.z) + R125f.w);
R125f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].x),R4f.y) + R127f.w);
R127f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].z),R4f.y) + backupReg0f);
R127f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y),R4f.y) + backupReg1f);
R5f.z = max(backupReg2f, 0.0);
PS1f = R5f.z;
// 16
backupReg0f = R127f.y;
backupReg1f = R124f.w;
R127f.x = max(R125f.x, 0.0);
R127f.y = max(R126f.z, 0.0);
R126f.z = max(backupReg0f, 0.0);
R124f.w = max(backupReg1f, 0.0);
R125f.x = max(R0f.w, 0.0);
PS0f = R125f.x;
// 17
backupReg0f = R124f.y;
backupReg1f = R124f.z;
R7f.x = max(R125f.z, 0.0);
R124f.y = max(backupReg0f, 0.0);
R124f.z = max(R2f.z, 0.0);
R125f.w = max(backupReg1f, 0.0);
R2f.z = max(R126f.y, 0.0);
PS1f = R2f.z;
// 18
R3f.x = max(R5f.y, 0.0);
R5f.y = max(R124f.x, 0.0);
R0f.z = max(R126f.x, 0.0);
R5f.w = max(R126f.w, 0.0);
R14f.w = max(R125f.y, 0.0);
PS0f = R14f.w;
// 19
backupReg0f = R16f.x;
R16f.x = max(R127f.z, 0.0);
R125f.y = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedPS[7].x));
R127f.z = mul_nonIEEE(R16f.y, intBitsToFloat(uf_remappedPS[7].x));
R13f.w = max(R127f.w, 0.0);
R127f.w = mul_nonIEEE(R16f.z, intBitsToFloat(uf_remappedPS[7].x));
PS1f = R127f.w;
// 20
R126f.x = mul_nonIEEE(R18f.x, intBitsToFloat(uf_remappedPS[7].x));
R126f.y = mul_nonIEEE(R17f.z, intBitsToFloat(uf_remappedPS[7].x));
R125f.z = mul_nonIEEE(R17f.y, intBitsToFloat(uf_remappedPS[7].x));
R126f.w = mul_nonIEEE(R17f.x, intBitsToFloat(uf_remappedPS[7].x));
R17f.x = mul_nonIEEE(R18f.y, intBitsToFloat(uf_remappedPS[7].x));
PS0f = R17f.x;
// 21
backupReg0f = R18f.z;
R124f.x = mul_nonIEEE(R19f.x, intBitsToFloat(uf_remappedPS[7].x));
R18f.y = mul_nonIEEE(R19f.z, intBitsToFloat(uf_remappedPS[7].x));
R18f.z = mul_nonIEEE(R19f.y, intBitsToFloat(uf_remappedPS[7].x));
R0f.w = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedPS[7].x));
R19f.y = mul_nonIEEE(R20f.x, intBitsToFloat(uf_remappedPS[7].x));
PS1f = R19f.y;
// 22
backupReg0f = R20f.z;
R20f.x = mul_nonIEEE(R20f.y, intBitsToFloat(uf_remappedPS[7].x));
R20f.y = mul_nonIEEE(R21f.x, intBitsToFloat(uf_remappedPS[7].x));
R20f.z = mul_nonIEEE(R21f.y, intBitsToFloat(uf_remappedPS[7].x));
R1f.w = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedPS[7].x));
R12f.w = mul_nonIEEE(R21f.z, intBitsToFloat(uf_remappedPS[7].x));
PS0f = R12f.w;
// 23
R21f.x = (mul_nonIEEE(R127f.y,intBitsToFloat(uf_remappedPS[8].x)) + R127f.w);
R21f.y = (mul_nonIEEE(R124f.w,intBitsToFloat(uf_remappedPS[8].x)) + R127f.z);
R21f.z = (mul_nonIEEE(R5f.z,intBitsToFloat(uf_remappedPS[8].x)) + R125f.y);
R11f.w = (mul_nonIEEE(R126f.z,intBitsToFloat(uf_remappedPS[8].x)) + R126f.w);
R5f.z = (mul_nonIEEE(R125f.x,intBitsToFloat(uf_remappedPS[8].x)) + R126f.y);
PS1f = R5f.z;
// 24
backupReg0f = R5f.y;
R18f.x = (mul_nonIEEE(R125f.w,intBitsToFloat(uf_remappedPS[8].x)) + R0f.w);
R5f.y = (mul_nonIEEE(R124f.z,intBitsToFloat(uf_remappedPS[8].x)) + R124f.x);
R19f.z = (mul_nonIEEE(R124f.y,intBitsToFloat(uf_remappedPS[8].x)) + R126f.x);
R0f.w = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedPS[8].x)) + R125f.z);
R17f.z = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[8].x)) + R18f.y);
PS0f = R17f.z;
// 0
R127f.x = (mul_nonIEEE(R0f.z,intBitsToFloat(uf_remappedPS[8].x)) + R1f.w);
R124f.y = (mul_nonIEEE(R7f.x,intBitsToFloat(uf_remappedPS[8].x)) + R17f.x);
R125f.z = (mul_nonIEEE(R5f.w,intBitsToFloat(uf_remappedPS[8].x)) + R19f.y);
R125f.w = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedPS[8].x)) + R18f.z);
R127f.w = (mul_nonIEEE(R14f.w,intBitsToFloat(uf_remappedPS[8].x)) + R20f.y);
PS0f = R127f.w;
// 1
R126f.x = (mul_nonIEEE(R16f.x,intBitsToFloat(uf_remappedPS[8].x)) + R12f.w);
R127f.y = (mul_nonIEEE(R3f.x,intBitsToFloat(uf_remappedPS[8].x)) + R20f.x);
R28f.z = (mul_nonIEEE(R23f.z,intBitsToFloat(uf_remappedPS[9].x)) + R5f.z);
R126f.w = (mul_nonIEEE(R13f.w,intBitsToFloat(uf_remappedPS[8].x)) + R20f.z);
R28f.y = (mul_nonIEEE(R22f.y,intBitsToFloat(uf_remappedPS[9].x)) + R21f.y);
PS1f = R28f.y;
// 2
backupReg0f = R0f.w;
R28f.x = (mul_nonIEEE(R22f.x,intBitsToFloat(uf_remappedPS[9].x)) + R21f.z);
PV0f.x = R28f.x;
R0f.y = PS1f;
R0f.z = (mul_nonIEEE(R22f.z,intBitsToFloat(uf_remappedPS[9].x)) + R21f.x);
R0f.w = R28f.w;
R28f.y = (mul_nonIEEE(R23f.y,intBitsToFloat(uf_remappedPS[9].x)) + backupReg0f);
PS0f = R28f.y;
// 3
backupReg0f = R11f.w;
R0f.x = PV0f.x;
R11f.y = (mul_nonIEEE(R24f.y,intBitsToFloat(uf_remappedPS[9].x)) + R124f.y);
R11f.z = (mul_nonIEEE(R24f.z,intBitsToFloat(uf_remappedPS[9].x)) + R18f.x);
R11f.w = R28f.w;
R28f.x = (mul_nonIEEE(R23f.x,intBitsToFloat(uf_remappedPS[9].x)) + backupReg0f);
PS1f = R28f.x;
// 4
backupReg0f = R17f.z;
R11f.x = (mul_nonIEEE(R24f.x,intBitsToFloat(uf_remappedPS[9].x)) + R19f.z);
R17f.y = (mul_nonIEEE(R25f.y,intBitsToFloat(uf_remappedPS[9].x)) + R125f.w);
R17f.z = (mul_nonIEEE(R25f.z,intBitsToFloat(uf_remappedPS[9].x)) + backupReg0f);
R17f.w = R28f.w;
R17f.x = (mul_nonIEEE(R25f.x,intBitsToFloat(uf_remappedPS[9].x)) + R5f.y);
PS0f = R17f.x;
// 5
R5f.x = (mul_nonIEEE(R26f.x,intBitsToFloat(uf_remappedPS[9].x)) + R125f.z);
R5f.y = (mul_nonIEEE(R26f.y,intBitsToFloat(uf_remappedPS[9].x)) + R127f.y);
R5f.z = (mul_nonIEEE(R26f.z,intBitsToFloat(uf_remappedPS[9].x)) + R127f.x);
R5f.w = R28f.w;
R26f.x = (mul_nonIEEE(R27f.x,intBitsToFloat(uf_remappedPS[9].x)) + R127f.w);
PS1f = R26f.x;
// 6
R26f.y = (mul_nonIEEE(R27f.y,intBitsToFloat(uf_remappedPS[9].x)) + R126f.w);
PV0f.y = R26f.y;
R26f.z = (mul_nonIEEE(R27f.z,intBitsToFloat(uf_remappedPS[9].x)) + R126f.x);
PV0f.z = R26f.z;
R26f.w = R28f.w;
PV0f.w = R26f.w;
// 7
R23f.xyz = vec3(R26f.x,PV0f.y,PV0f.z);
R23f.w = PV0f.w;
// 8
R22f.xyz = vec3(R5f.x,R5f.y,R5f.z);
R22f.w = R5f.w;
// 9
R21f.xyz = vec3(R17f.x,R17f.y,R17f.z);
R21f.w = R17f.w;
// 10
R20f.xyz = vec3(R11f.x,R11f.y,R11f.z);
R20f.w = R11f.w;
// 11
R18f.xyz = vec3(R0f.x,R0f.y,R0f.z);
R18f.w = R0f.w;
// 12
R19f.xyz = vec3(R28f.x,R28f.y,R28f.z);
R19f.w = R28f.w;
// export
passPixelColor0 = vec4(R18f.x, R18f.y, R18f.z, R18f.w);
passPixelColor1 = vec4(R19f.x, R19f.y, R19f.z, R19f.w);
passPixelColor2 = vec4(R20f.x, R20f.y, R20f.z, R20f.w);
passPixelColor3 = vec4(R21f.x, R21f.y, R21f.z, R21f.w);
passPixelColor4 = vec4(R22f.x, R22f.y, R22f.z, R22f.w);
passPixelColor5 = vec4(R23f.x, R23f.y, R23f.z, R23f.w);
}
