#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 6ee18882c565cdb5
uniform ivec4 uf_remappedPS[20];
layout(binding = 0) uniform samplerCubeArray textureUnitPS0;// Tex0 addr 0x42892000 res 128x128x8 dim 3 tm: 4 format 0033 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x30) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform samplerCubeArray textureUnitPS1;// Tex1 addr 0x3fa66000 res 32x32x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x6) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2DArray textureUnitPS2;// Tex2 addr 0x30d05800 res 4x4x1 dim 5 tm: 2 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x13762000 res 4096x4096x1 dim 1 tm: 4 format 0031 compSel: 0 1 4 4 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 4) uniform sampler2DArray textureUnitPS4;// Tex4 addr 0x12c8a000 res 1024x1024x1 dim 5 tm: 4 format 0033 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0x17a06000 res 256x256x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 6) uniform sampler2D textureUnitPS6;// Tex6 addr 0x17a12000 res 256x256x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler6 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 7) uniform sampler2D textureUnitPS7;// Tex7 addr 0x17a1e000 res 256x256x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler7 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem5;
layout(location = 6) in vec4 passParameterSem6;
layout(location = 7) in vec4 passParameterSem7;
layout(location = 8) in vec4 passParameterSem254;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R17i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex0 = 0.0;
float cubeMapArrayIndex1 = 0.0;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
R3i = floatBitsToInt(passParameterSem3);
R4i = floatBitsToInt(passParameterSem4);
R5i = floatBitsToInt(passParameterSem5);
R6i = floatBitsToInt(passParameterSem6);
R7i = floatBitsToInt(passParameterSem7);
R8i = floatBitsToInt(passParameterSem254);
R7i.xy = floatBitsToInt(texture(textureUnitPS6, intBitsToFloat(R0i.xy)).xy);
R8i.xy = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R5i.xy)).xy);
R13i.xyz = floatBitsToInt(texture(textureUnitPS7, intBitsToFloat(R0i.xy)).xyz);
R15i.xyz = floatBitsToInt(texture(textureUnitPS5, intBitsToFloat(R0i.xy)).xyz);
// 0
R127i.x = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204))));
R127i.y = floatBitsToInt((intBitsToFloat(R7i.x) * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204))));
PV0i.y = R127i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(R4i.z)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R4i.y)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R4i.x)));
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.y)),intBitsToFloat(R4i.z)) + intBitsToFloat(PV0i.w)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.z)),intBitsToFloat(R4i.x)) + intBitsToFloat(PV0i.z)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.x)),intBitsToFloat(R4i.y)) + intBitsToFloat(PS0i)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(PV0i.y)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PV0i.y)));
PS1i = R127i.z;
// 2
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV1i.y)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV1i.x)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.w)));
PV0i.z = R123i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV1i.z)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R127i.y)));
// 3
backupReg0i = R127i.z;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R127i.y)));
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
PV1i.y = clampFI32(PV1i.y);
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.x)) + intBitsToFloat(PS0i)));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.y)) + intBitsToFloat(backupReg0i)));
R126i.w = floatBitsToInt((intBitsToFloat(R8i.w) > 0.0)?1.0:0.0);
PS1i = R126i.w;
// 4
R3i.x = R5i.z;
R3i.y = R5i.w;
PV0i.z = floatBitsToInt((0.0 > intBitsToFloat(R8i.w))?1.0:0.0);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(R127i.w)) + intBitsToFloat(PV1i.x)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.y)));
// 5
backupReg0i = R127i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.x),intBitsToFloat(PS0i)) + intBitsToFloat(R125i.w)));
PV1i.y = floatBitsToInt(intBitsToFloat(R126i.w) + -(intBitsToFloat(PV0i.z)));
PV1i.y = clampFI32(PV1i.y);
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(PS0i)) + intBitsToFloat(backupReg0i)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(PS0i)) + intBitsToFloat(PV0i.w)));
R3i.z = floatBitsToInt(roundEven(0.0));
PS1i = R3i.z;
// 6
R5i.x = uf_remappedPS[0].w;
R126i.y = floatBitsToInt(-(intBitsToFloat(R8i.y)) + 1.0);
R7i.z = PS1i;
PV0i.w = ((intBitsToFloat(PV1i.y) != 0.0)?int(0xFFFFFFFF):int(0x0));
R0i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[1].x) * intBitsToFloat(0x40a00000));
PS0i = R0i.w;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.z),intBitsToFloat(R126i.w),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.z),intBitsToFloat(R126i.w),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.x = ((PV0i.w == 0)?(0):(0x3f800000));
PS1i = R126i.x;
// 8
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 9
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((intBitsToFloat(R126i.x) * 2.0 + -(1.0)));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 10
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(PS1i)));
PV0i.x = R124i.x;
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(PS1i)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(PS1i)));
PV0i.z = R126i.z;
R4i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.x)));
PV0i.w = R4i.w;
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(PV1i.x)));
PS0i = R4i.y;
// 11
backupReg0i = R127i.y;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.w)));
R127i.y = PV0i.w;
R127i.y = floatBitsToInt(intBitsToFloat(R127i.y) * 2.0);
R125i.z = PS0i;
R125i.z = floatBitsToInt(intBitsToFloat(R125i.z) * 2.0);
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R127i.x)));
PV1i.w = R126i.w;
R124i.z = floatBitsToInt(-(intBitsToFloat(PV0i.z)));
PS1i = R124i.z;
// 12
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w), intBitsToFloat(uf_remappedPS[3].w)));
PV0i.y = floatBitsToInt(intBitsToFloat(R126i.y) + 0.0);
PV0i.y = clampFI32(PV0i.y);
R127i.z = PV1i.w;
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) * 2.0);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.y),intBitsToFloat(R4i.y)) + intBitsToFloat(PV1i.x)));
PV0i.w = R123i.w;
R4i.z = floatBitsToInt(-(intBitsToFloat(PV1i.w)));
PS0i = R4i.z;
// 13
R12i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.y)));
R126i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[4].x) * intBitsToFloat(0x41200000));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(R126i.w)) + intBitsToFloat(PV0i.w)));
PV1i.z = R123i.z;
R8i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].y), intBitsToFloat(R126i.x)));
R126i.w = floatBitsToInt(1.0 / intBitsToFloat(R2i.w));
PS1i = R126i.w;
// 14
backupReg0i = R126i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.z)),intBitsToFloat(R127i.y)) + intBitsToFloat(R124i.x)));
R127i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.z)),intBitsToFloat(R125i.z)) + intBitsToFloat(R124i.y)));
R126i.z = floatBitsToInt(intBitsToFloat(PV1i.z) + 1.0);
R126i.z = clampFI32(R126i.z);
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.z)),intBitsToFloat(R127i.z)) + intBitsToFloat(backupReg0i)));
PV0i.w = R123i.w;
R7i.x = floatBitsToInt(intBitsToFloat(R2i.x) * intBitsToFloat(PS1i));
PS0i = R7i.x;
// 15
R14i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R12i.x)),intBitsToFloat(uf_remappedPS[6].z)) + 1.0));
R7i.y = floatBitsToInt(intBitsToFloat(R2i.y) * intBitsToFloat(R126i.w));
R127i.z = floatBitsToInt(-(intBitsToFloat(PV0i.w)));
PV1i.z = R127i.z;
R10i.w = R12i.x;
R11i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.x), intBitsToFloat(uf_remappedPS[7].z)));
PS1i = R11i.w;
// 16
redcCUBE(vec4(intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.z),intBitsToFloat(R127i.x),intBitsToFloat(R127i.y)),vec4(intBitsToFloat(R127i.y),intBitsToFloat(R127i.x),intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.z)),cubeMapSTM,cubeMapFaceId);
R125i.x = floatBitsToInt(cubeMapSTM.x);
R125i.y = floatBitsToInt(cubeMapSTM.y);
R125i.z = floatBitsToInt(cubeMapSTM.z);
R125i.w = cubeMapFaceId;
PV0i.x = R125i.x;
PV0i.y = R125i.y;
PV0i.z = R125i.z;
PV0i.w = R125i.w;
tempResultf = log2(intBitsToFloat(R126i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R127i.x = floatBitsToInt(tempResultf);
PS0i = R127i.x;
// 17
redcCUBE(vec4(intBitsToFloat(R124i.z),intBitsToFloat(R124i.z),intBitsToFloat(R124i.x),intBitsToFloat(R124i.y)),vec4(intBitsToFloat(R124i.y),intBitsToFloat(R124i.x),intBitsToFloat(R124i.z),intBitsToFloat(R124i.z)),cubeMapSTM,cubeMapFaceId);
R9i.x = floatBitsToInt(cubeMapSTM.x);
R9i.y = floatBitsToInt(cubeMapSTM.y);
R9i.z = floatBitsToInt(cubeMapSTM.z);
R9i.w = cubeMapFaceId;
PV1i.x = R9i.x;
PV1i.y = R9i.y;
PV1i.z = R9i.z;
PV1i.w = R9i.w;
PS1i = floatBitsToInt(1.0 / abs(intBitsToFloat(PV0i.z)));
// 18
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(R127i.x)));
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[8].w), intBitsToFloat(uf_remappedPS[9].x)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(PS1i)) + 1.5));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(PS1i)) + 1.5));
PV0i.w = R123i.w;
R126i.w = floatBitsToInt(1.0 / abs(intBitsToFloat(PV1i.z)));
PS0i = R126i.w;
// 19
backupReg0i = R9i.x;
R0i.xyz = ivec3(PV0i.w,PV0i.z,R125i.w);
R5i.w = floatBitsToInt(-(intBitsToFloat(R8i.x)) + 1.0);
R9i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PS0i)) + 1.5));
PS1i = R9i.x;
// 20
backupReg0i = R9i.y;
backupReg1i = R126i.w;
redcCUBE(vec4(intBitsToFloat(R4i.z),intBitsToFloat(R4i.z),intBitsToFloat(R4i.w),intBitsToFloat(R4i.y)),vec4(intBitsToFloat(R4i.y),intBitsToFloat(R4i.w),intBitsToFloat(R4i.z),intBitsToFloat(R4i.z)),cubeMapSTM,cubeMapFaceId);
R126i.x = floatBitsToInt(cubeMapSTM.x);
R126i.y = floatBitsToInt(cubeMapSTM.y);
R126i.z = floatBitsToInt(cubeMapSTM.z);
R126i.w = cubeMapFaceId;
PV0i.x = R126i.x;
PV0i.y = R126i.y;
PV0i.z = R126i.z;
PV0i.w = R126i.w;
R9i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i)) + 1.5));
PS0i = R9i.y;
// 21
redcCUBE(vec4(-(intBitsToFloat(R4i.z)),-(intBitsToFloat(R4i.z)),-(intBitsToFloat(R4i.w)),-(intBitsToFloat(R4i.y))),vec4(-(intBitsToFloat(R4i.y)),-(intBitsToFloat(R4i.w)),-(intBitsToFloat(R4i.z)),-(intBitsToFloat(R4i.z))),cubeMapSTM,cubeMapFaceId);
R2i.x = floatBitsToInt(cubeMapSTM.x);
R2i.y = floatBitsToInt(cubeMapSTM.y);
R2i.z = floatBitsToInt(cubeMapSTM.z);
R2i.w = cubeMapFaceId;
PV1i.x = R2i.x;
PV1i.y = R2i.y;
PV1i.z = R2i.z;
PV1i.w = R2i.w;
PS1i = floatBitsToInt(1.0 / abs(intBitsToFloat(PV0i.z)));
// 22
R8i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(PS1i)) + 1.5));
R4i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(PS1i)) + 1.5));
R10i.z = R126i.w;
R12i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].z), intBitsToFloat(uf_remappedPS[2].x)));
R4i.w = floatBitsToInt(1.0 / abs(intBitsToFloat(PV1i.z)));
PS0i = R4i.w;
// 0
R10i.x = R8i.x;
R10i.y = R4i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(R4i.w)) + 1.5));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(R4i.w)) + 1.5));
PV0i.w = R123i.w;
R11i.z = R2i.w;
PS0i = R11i.z;
// 1
R11i.x = PV0i.w;
R11i.y = PV0i.z;
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].z), intBitsToFloat(uf_remappedPS[2].y)));
R2i.w = floatBitsToInt(intBitsToFloat(R5i.w) + 0.0);
PS1i = floatBitsToInt(exp2(intBitsToFloat(R4i.x)));
// 2
R8i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].z), intBitsToFloat(uf_remappedPS[2].z)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(PS1i)));
R4i.z = floatBitsToInt(roundEven(1.0));
R17i.w = 0x3f800000;
R4i.x = R7i.x;
PS0i = R4i.x;
// 3
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[8].y), intBitsToFloat(PV0i.y)));
R4i.y = R7i.y;
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[8].x), intBitsToFloat(PV0i.y)));
R5i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[8].z), intBitsToFloat(PV0i.y)));
R3i.xyzw = floatBitsToInt(texture(textureUnitPS4, vec3(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z))).xyzw);
cubeMapArrayIndex0 = intBitsToFloat(R5i.x);
R0i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, vec4(redcCUBEReverse(intBitsToFloat(R0i.xy),R0i.z),cubeMapArrayIndex0),intBitsToFloat(R0i.w)).xyzw);
R9i.xyz = floatBitsToInt(textureLod(textureUnitPS1, vec4(redcCUBEReverse(intBitsToFloat(R9i.yx),R9i.w),cubeMapArrayIndex1),0.0).xyz);
R7i.xyz = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z))).xyz);
R10i.xyz = floatBitsToInt(textureLod(textureUnitPS1, vec4(redcCUBEReverse(intBitsToFloat(R10i.xy),R10i.z),cubeMapArrayIndex1),intBitsToFloat(R10i.w)).xyz);
R4i.xyz = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z))).xyz);
R16i.xyz = floatBitsToInt(textureLod(textureUnitPS1, vec4(redcCUBEReverse(intBitsToFloat(R11i.xy),R11i.z),cubeMapArrayIndex1),intBitsToFloat(R11i.w)).xyz);
// 0
backupReg0i = R0i.w;
R11i.x = floatBitsToInt(intBitsToFloat(R9i.x) + -(1.0));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(uf_remappedPS[10].z)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(uf_remappedPS[10].y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(uf_remappedPS[10].x)));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R126i.y = floatBitsToInt(tempResultf);
PS0i = R126i.y;
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV0i.w)));
R3i.y = floatBitsToInt(intBitsToFloat(R9i.y) + -(1.0));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV0i.z)));
R3i.z = floatBitsToInt(intBitsToFloat(R9i.z) + -(1.0));
PS1i = R3i.z;
// 2
backupReg0i = R126i.y;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R8i.w)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R8i.w)));
PV0i.y = R126i.y;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R8i.w)));
PV0i.z = R126i.z;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[11].y), intBitsToFloat(backupReg0i)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.x), intBitsToFloat(uf_remappedPS[12].x)));
PS0i = R127i.w;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(intBitsToFloat(PV0i.x) + 0.0);
// 4
PV0i.x = floatBitsToInt(intBitsToFloat(R126i.z) + 0.0);
PV0i.y = floatBitsToInt(intBitsToFloat(R126i.y) + 0.0);
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.x)),intBitsToFloat(uf_remappedPS[13].z)) + intBitsToFloat(R12i.x)));
R123i.z = clampFI32(R123i.z);
PV0i.z = R123i.z;
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.x),intBitsToFloat(R14i.x)) + intBitsToFloat(PS1i)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.y), intBitsToFloat(uf_remappedPS[12].y)));
PS0i = R126i.z;
// 5
R126i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[13].y)),intBitsToFloat(PV0i.z)) + 1.0));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.z), intBitsToFloat(uf_remappedPS[12].z)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(R14i.x)) + intBitsToFloat(PV0i.x)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(R14i.x)) + intBitsToFloat(PV0i.y)));
PV1i.w = R123i.w;
R125i.z = floatBitsToInt(exp2(intBitsToFloat(R126i.w)));
PS1i = R125i.z;
// 6
backupReg0i = R10i.y;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.x),intBitsToFloat(R14i.x)) + 0.0));
R10i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(R10i.z));
R10i.z = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(backupReg0i));
R8i.w = floatBitsToInt(intBitsToFloat(R125i.w) + intBitsToFloat(R10i.x));
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R14i.x)) + 0.0));
PS0i = R127i.x;
// 7
backupReg0i = R126i.y;
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].w), intBitsToFloat(R126i.z)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].w), intBitsToFloat(R127i.w)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].w), intBitsToFloat(backupReg0i)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(R14i.x)) + 0.0));
PV1i.w = R123i.w;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[11].x), intBitsToFloat(R125i.z)));
PS1i = R127i.w;
// 8
R14i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[14].x) + -(1.0));
R4i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),intBitsToFloat(PS1i)) + intBitsToFloat(R125i.x)));
R4i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(PS1i)) + intBitsToFloat(PV1i.w)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[13].x), intBitsToFloat(R126i.x)));
R10i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[14].y) + -(1.0));
PS0i = R10i.x;
// 9
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(R127i.w)) + intBitsToFloat(R127i.x)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.x), intBitsToFloat(PV0i.w)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PV0i.w)));
R0i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[14].z) + -(1.0));
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PV0i.w)));
PS1i = R4i.x;
// 0
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(uf_remappedPS[4].y)) + 1.0));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R11i.x),intBitsToFloat(uf_remappedPS[4].y)) + 1.0));
PV0i.y = R123i.y;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[15].z), intBitsToFloat(uf_remappedPS[15].w)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(uf_remappedPS[4].y)) + 1.0));
PV0i.w = R123i.w;
// 1
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[15].x), intBitsToFloat(uf_remappedPS[15].w)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R5i.w)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R2i.x)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R2i.z)));
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[15].y), intBitsToFloat(uf_remappedPS[15].w)));
PS1i = R124i.x;
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R15i.x),intBitsToFloat(R12i.w)) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[16].w), intBitsToFloat(uf_remappedPS[14].w)));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R15i.z),intBitsToFloat(R8i.x)) + intBitsToFloat(PV1i.y)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R15i.y),intBitsToFloat(R5i.z)) + intBitsToFloat(PV1i.z)));
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].x), intBitsToFloat(R126i.z)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].x), intBitsToFloat(R124i.x)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(PV0i.y)));
R126i.z = clampFI32(R126i.z);
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].x), intBitsToFloat(R127i.x)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(PV0i.x)) + 0.0));
PS1i = R126i.y;
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.z),intBitsToFloat(R127i.w)) + 0.0));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.z), intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.x), intBitsToFloat(PV1i.w)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.y), intBitsToFloat(PV1i.y)));
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),intBitsToFloat(R125i.z)) + 0.0));
PS0i = R122i.x;
// 5
backupReg0i = R126i.y;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(R4i.x)) + intBitsToFloat(PS0i)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),intBitsToFloat(R0i.y)) + intBitsToFloat(PV0i.x)));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R0i.z)) + intBitsToFloat(backupReg0i)));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R16i.x),intBitsToFloat(PV0i.z)) + 0.0));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R16i.z),intBitsToFloat(PV0i.y)) + 0.0));
PS1i = R126i.w;
// 6
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.x),intBitsToFloat(R126i.z)) + 1.0));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.x),intBitsToFloat(R126i.z)) + 1.0));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R16i.y),intBitsToFloat(R127i.w)) + 0.0));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),intBitsToFloat(R126i.z)) + 1.0));
PV0i.w = R123i.w;
// 7
R16i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R127i.x)) + intBitsToFloat(R126i.w)));
R16i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R126i.y)) + intBitsToFloat(PV0i.z)));
R0i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R125i.z)) + intBitsToFloat(R125i.w)));
// 0
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.w),intBitsToFloat(uf_remappedPS[17].x)) + intBitsToFloat(uf_remappedPS[18].w)));
R123i.w = clampFI32(R123i.w);
PV0i.w = R123i.w;
// 1
PV1i.x = floatBitsToInt(-(intBitsToFloat(R0i.w)) + intBitsToFloat(uf_remappedPS[19].x));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R16i.z)) + intBitsToFloat(uf_remappedPS[19].y));
PV1i.z = floatBitsToInt(-(intBitsToFloat(R16i.y)) + intBitsToFloat(uf_remappedPS[19].z));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(PV0i.w)));
// 2
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.w)) + intBitsToFloat(R16i.z)));
PV0i.x = R127i.x;
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.w)) + intBitsToFloat(R0i.w)));
PV0i.y = R126i.y;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.w)) + intBitsToFloat(R16i.y)));
PV0i.w = R126i.w;
// 3
PV1i.x = floatBitsToInt(intBitsToFloat(R1i.z) + -(intBitsToFloat(PV0i.w)));
PV1i.y = floatBitsToInt(intBitsToFloat(R1i.y) + -(intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(intBitsToFloat(R1i.x) + -(intBitsToFloat(PV0i.y)));
// 4
R17i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R1i.w)) + intBitsToFloat(R126i.y)));
R17i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R1i.w)) + intBitsToFloat(R127i.x)));
R17i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R1i.w)) + intBitsToFloat(R126i.w)));
// export
passPixelColor0 = vec4(intBitsToFloat(R17i.x), intBitsToFloat(R17i.y), intBitsToFloat(R17i.z), intBitsToFloat(R17i.w));
}
