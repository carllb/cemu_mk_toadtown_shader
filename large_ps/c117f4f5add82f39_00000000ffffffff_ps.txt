#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader c117f4f5add82f39
uniform ivec4 uf_remappedPS[9];
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 4) out vec4 passPixelColor4;
layout(location = 5) out vec4 passPixelColor5;
layout(location = 6) out vec4 passPixelColor6;
layout(location = 7) out vec4 passPixelColor7;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R15f = vec4(0.0);
vec4 R16f = vec4(0.0);
vec4 R17f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
// 0
R123f.x = (intBitsToFloat(0x3f5b6db7) * intBitsToFloat(uf_remappedPS[0].z) + intBitsToFloat(0x3e124925));
PV0f.x = R123f.x;
R127f.y = R0f.y;
R127f.y = clamp(R127f.y, 0.0, 1.0);
PV0f.y = R127f.y;
R127f.z = R0f.x;
R127f.z = clamp(R127f.z, 0.0, 1.0);
PV0f.z = R127f.z;
R127f.w = (intBitsToFloat(0x3f36db6e) * intBitsToFloat(uf_remappedPS[0].z) + intBitsToFloat(0x3e924925));
tempResultf = log2(intBitsToFloat(uf_remappedPS[0].z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R126f.w = tempResultf;
PS0f = R126f.w;
// 1
R123f.x = (mul_nonIEEE(-(PV0f.z),intBitsToFloat(uf_remappedPS[0].x)) + intBitsToFloat(uf_remappedPS[0].x));
PV1f.x = R123f.x;
R126f.y = (intBitsToFloat(0x3f124924) * intBitsToFloat(uf_remappedPS[0].z) + intBitsToFloat(0x3edb6db8));
R125f.z = (intBitsToFloat(0x3edb6db6) * intBitsToFloat(uf_remappedPS[0].z) + intBitsToFloat(0x3f124925));
R123f.w = (mul_nonIEEE(-(PV0f.y),intBitsToFloat(uf_remappedPS[0].y)) + intBitsToFloat(uf_remappedPS[0].y));
PV1f.w = R123f.w;
tempResultf = log2(PV0f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R126f.z = tempResultf;
PS1f = R126f.z;
// 2
backupReg0f = R127f.z;
backupReg1f = R127f.w;
R127f.x = (intBitsToFloat(0x3e924924) * intBitsToFloat(uf_remappedPS[0].z) + intBitsToFloat(0x3f36db6e));
PV0f.y = R127f.y + PV1f.w;
R127f.z = backupReg0f + PV1f.x;
R127f.w = (intBitsToFloat(0x3e124924) * intBitsToFloat(uf_remappedPS[0].z) + intBitsToFloat(0x3f5b6db7));
tempResultf = log2(backupReg1f);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 3
R125f.x = mul_nonIEEE(R126f.w, intBitsToFloat(uf_remappedPS[1].z));
R127f.y = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[1].z));
R5f.z = 1.0;
R126f.w = mul_nonIEEE(R126f.z, intBitsToFloat(uf_remappedPS[1].z));
tempResultf = log2(PV0f.y);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 4
R126f.x = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[1].y));
tempResultf = log2(R127f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 5
R127f.z = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[1].x));
tempResultf = log2(R126f.y);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 6
R124f.x = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[1].z));
tempResultf = log2(R125f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 7
backupReg0f = R127f.x;
R127f.x = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[1].z));
tempResultf = log2(backupReg0f);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 8
backupReg0f = R127f.w;
R127f.w = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[1].z));
tempResultf = log2(backupReg0f);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 9
R126f.y = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[1].z));
R125f.y = exp2(R126f.x);
PS1f = R125f.y;
// 10
R126f.x = PS1f;
R124f.y = PS1f;
R124f.z = PS1f;
R125f.w = PS1f;
R1f.x = exp2(R127f.z);
PS0f = R1f.x;
// 11
R0f.x = R125f.y;
R0f.y = R125f.y;
R4f.z = R125f.y;
R127f.z = exp2(R125f.x);
PS1f = R127f.z;
// 12
tempf.x = dot(vec4(R1f.x,R125f.y,PS1f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R6f.z = tempf.x;
R125f.z = exp2(R126f.w);
PS0f = R125f.z;
// 13
tempf.x = dot(vec4(R1f.x,R124f.y,PS0f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R3f.y = tempf.x;
R126f.z = exp2(R127f.y);
PS1f = R126f.z;
// 14
tempf.x = dot(vec4(R1f.x,R126f.x,PS1f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R2f.w = tempf.x;
R0f.z = exp2(R124f.x);
PS0f = R0f.z;
// 15
tempf.x = dot(vec4(R1f.x,R124f.z,PS0f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R4f.w = tempf.x;
R1f.z = exp2(R127f.x);
PS1f = R1f.z;
// 16
tempf.x = dot(vec4(R1f.x,R125f.w,PS1f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R8f.z = tempf.x;
R2f.z = exp2(R127f.w);
PS0f = R2f.z;
// 17
tempf.x = dot(vec4(R1f.x,R0f.y,PS0f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R5f.y = tempf.x;
R3f.z = exp2(R126f.y);
PS1f = R3f.z;
// 18
backupReg0f = R0f.x;
tempf.x = dot(vec4(R1f.x,backupReg0f,PS1f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R7f.w = tempf.x;
R2f.y = R1f.x + -(R6f.z);
PS0f = R2f.y;
// 19
tempf.x = dot(vec4(R1f.x,R4f.z,R5f.z,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R9f.z = tempf.x;
R1f.w = R125f.y + -(R6f.z);
PS1f = R1f.w;
// 20
R3f.x = R127f.z + -(R6f.z);
R1f.y = R1f.x + -(R3f.y);
R7f.z = R125f.z + -(R3f.y);
R0f.w = R124f.y + -(R3f.y);
R2f.x = R1f.x + -(R2f.w);
PS0f = R2f.x;
// 21
backupReg0f = R0f.z;
R4f.x = R1f.x + -(R4f.w);
R4f.y = R126f.z + -(R2f.w);
R0f.z = R126f.x + -(R2f.w);
R3f.w = R124f.z + -(R4f.w);
R5f.x = backupReg0f + -(R4f.w);
PS1f = R5f.x;
// 22
backupReg0f = R0f.y;
R6f.x = R1f.z + -(R8f.z);
R0f.y = R1f.x + -(R8f.z);
R1f.z = R1f.x + -(R5f.y);
R5f.w = R125f.w + -(R8f.z);
R6f.w = backupReg0f + -(R5f.y);
PS0f = R6f.w;
// 0
R126f.x = R1f.x + -(R7f.w);
R124f.y = R0f.x + -(R7f.w);
R126f.z = R2f.z + -(R5f.y);
R125f.w = R3f.z + -(R7f.w);
R125f.y = R1f.x + -(R9f.z);
PS0f = R125f.y;
// 1
R127f.x = R4f.z + -(R9f.z);
R127f.y = (mul_nonIEEE(R1f.y,intBitsToFloat(uf_remappedPS[2].x)) + R3f.y);
R127f.y = clamp(R127f.y, 0.0, 1.0);
R125f.z = (mul_nonIEEE(R0f.w,intBitsToFloat(uf_remappedPS[2].x)) + R3f.y);
R125f.z = clamp(R125f.z, 0.0, 1.0);
R127f.w = R5f.z + -(R9f.z);
R124f.w = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[2].x)) + R2f.w);
R124f.w = clamp(R124f.w, 0.0, 1.0);
PS1f = R124f.w;
// 2
R124f.x = (mul_nonIEEE(R7f.z,intBitsToFloat(uf_remappedPS[2].x)) + R3f.y);
R124f.x = clamp(R124f.x, 0.0, 1.0);
R126f.y = (mul_nonIEEE(R1f.w,intBitsToFloat(uf_remappedPS[2].x)) + R6f.z);
R126f.y = clamp(R126f.y, 0.0, 1.0);
R124f.z = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[2].x)) + R6f.z);
R124f.z = clamp(R124f.z, 0.0, 1.0);
R126f.w = (mul_nonIEEE(R3f.x,intBitsToFloat(uf_remappedPS[2].x)) + R6f.z);
R126f.w = clamp(R126f.w, 0.0, 1.0);
R125f.x = (mul_nonIEEE(R0f.z,intBitsToFloat(uf_remappedPS[2].x)) + R2f.w);
R125f.x = clamp(R125f.x, 0.0, 1.0);
PS0f = R125f.x;
// 3
backupReg0f = R4f.x;
backupReg1f = R0f.y;
R4f.x = (mul_nonIEEE(R3f.w,intBitsToFloat(uf_remappedPS[2].x)) + R4f.w);
R4f.x = clamp(R4f.x, 0.0, 1.0);
R0f.y = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedPS[2].x)) + R4f.w);
R0f.y = clamp(R0f.y, 0.0, 1.0);
R0f.z = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedPS[2].x)) + R2f.w);
R0f.z = clamp(R0f.z, 0.0, 1.0);
R2f.w = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[2].x)) + R4f.w);
R2f.w = clamp(R2f.w, 0.0, 1.0);
R6f.z = (mul_nonIEEE(backupReg1f,intBitsToFloat(uf_remappedPS[2].x)) + R8f.z);
R6f.z = clamp(R6f.z, 0.0, 1.0);
PS1f = R6f.z;
// 4
R5f.x = (mul_nonIEEE(R1f.z,intBitsToFloat(uf_remappedPS[2].x)) + R5f.y);
R5f.x = clamp(R5f.x, 0.0, 1.0);
R2f.y = (mul_nonIEEE(R5f.w,intBitsToFloat(uf_remappedPS[2].x)) + R8f.z);
R2f.y = clamp(R2f.y, 0.0, 1.0);
R7f.z = (mul_nonIEEE(R6f.w,intBitsToFloat(uf_remappedPS[2].x)) + R5f.y);
R7f.z = clamp(R7f.z, 0.0, 1.0);
R5f.w = (mul_nonIEEE(R6f.x,intBitsToFloat(uf_remappedPS[2].x)) + R8f.z);
R5f.w = clamp(R5f.w, 0.0, 1.0);
R6f.w = (mul_nonIEEE(R126f.z,intBitsToFloat(uf_remappedPS[2].x)) + R5f.y);
R6f.w = clamp(R6f.w, 0.0, 1.0);
PS0f = R6f.w;
// 5
R2f.x = (mul_nonIEEE(R124f.y,intBitsToFloat(uf_remappedPS[2].x)) + R7f.w);
R2f.x = clamp(R2f.x, 0.0, 1.0);
R6f.y = (mul_nonIEEE(R125f.y,intBitsToFloat(uf_remappedPS[2].x)) + R9f.z);
R6f.y = clamp(R6f.y, 0.0, 1.0);
R4f.z = (mul_nonIEEE(R125f.w,intBitsToFloat(uf_remappedPS[2].x)) + R7f.w);
R4f.z = clamp(R4f.z, 0.0, 1.0);
R4f.w = (mul_nonIEEE(R126f.x,intBitsToFloat(uf_remappedPS[2].x)) + R7f.w);
R4f.w = clamp(R4f.w, 0.0, 1.0);
R8f.y = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedPS[2].x)) + R9f.z);
R8f.y = clamp(R8f.y, 0.0, 1.0);
PS1f = R8f.y;
// 6
R1f.x = (mul_nonIEEE(R127f.w,intBitsToFloat(uf_remappedPS[2].x)) + R9f.z);
R1f.x = clamp(R1f.x, 0.0, 1.0);
R125f.y = (mul_nonIEEE(-(R124f.z),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(uf_remappedPS[3].x));
R126f.z = (mul_nonIEEE(-(R126f.y),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(uf_remappedPS[3].y));
R127f.w = (mul_nonIEEE(-(R127f.y),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(uf_remappedPS[3].x));
R5f.y = (mul_nonIEEE(-(R125f.z),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(uf_remappedPS[3].y));
PS0f = R5f.y;
// 7
R127f.x = (mul_nonIEEE(-(R124f.x),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(uf_remappedPS[3].z));
R124f.y = (mul_nonIEEE(-(R126f.w),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(uf_remappedPS[3].z));
R127f.z = (mul_nonIEEE(-(R124f.w),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(uf_remappedPS[3].x));
R125f.w = (mul_nonIEEE(-(R125f.x),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(uf_remappedPS[3].y));
R126f.x = (mul_nonIEEE(-(R0f.z),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(uf_remappedPS[3].z));
PS1f = R126f.x;
// 8
R6f.x = (mul_nonIEEE(-(R2f.w),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(uf_remappedPS[3].x));
R4f.y = (mul_nonIEEE(-(R6f.z),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(uf_remappedPS[3].x));
R9f.z = (mul_nonIEEE(-(R0f.y),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(uf_remappedPS[3].z));
R7f.w = (mul_nonIEEE(-(R4f.x),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(uf_remappedPS[3].y));
R1f.z = (mul_nonIEEE(-(R2f.y),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(uf_remappedPS[3].y));
PS0f = R1f.z;
// 9
R3f.x = (mul_nonIEEE(-(R7f.z),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(uf_remappedPS[3].y));
R3f.y = (mul_nonIEEE(-(R5f.w),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(uf_remappedPS[3].z));
R8f.z = (mul_nonIEEE(-(R5f.x),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(uf_remappedPS[3].x));
R3f.w = (mul_nonIEEE(-(R6f.w),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(uf_remappedPS[3].z));
R1f.y = (mul_nonIEEE(-(R4f.w),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(uf_remappedPS[3].x));
PS1f = R1f.y;
// 10
R0f.x = (mul_nonIEEE(-(R4f.z),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(uf_remappedPS[3].z));
R7f.y = (mul_nonIEEE(-(R6f.y),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(uf_remappedPS[3].x));
R5f.z = (mul_nonIEEE(-(R8f.y),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(uf_remappedPS[3].y));
R1f.w = (mul_nonIEEE(-(R2f.x),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(uf_remappedPS[3].y));
R9f.y = (mul_nonIEEE(-(R1f.x),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(uf_remappedPS[3].z));
PS0f = R9f.y;
// 11
backupReg0f = R127f.x;
backupReg1f = R127f.z;
R127f.x = R126f.y + R126f.z;
R126f.y = R124f.x + backupReg0f;
R127f.z = R126f.w + R124f.y;
R126f.w = R124f.z + R125f.y;
R124f.z = R124f.w + backupReg1f;
PS1f = R124f.z;
// 12
backupReg0f = R126f.x;
backupReg1f = R127f.w;
R126f.x = R0f.z + backupReg0f;
R125f.y = R125f.x + R125f.w;
R126f.z = R125f.z + R5f.y;
R127f.w = R127f.y + backupReg1f;
R124f.y = R2f.w + R6f.x;
PS0f = R124f.y;
// 13
backupReg0f = R1f.z;
backupReg1f = R0f.y;
R125f.x = R4f.x + R7f.w;
R0f.y = R6f.z + R4f.y;
R1f.z = R2f.y + backupReg0f;
R125f.w = backupReg1f + R9f.z;
tempResultf = log2(R126f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R127f.y = tempResultf;
PS1f = R127f.y;
// 14
backupReg0f = R3f.x;
backupReg1f = R3f.y;
R3f.x = R7f.z + backupReg0f;
R3f.y = R6f.w + R3f.w;
R7f.z = R5f.w + backupReg1f;
R124f.w = R5f.x + R8f.z;
tempResultf = log2(R127f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R125f.z = tempResultf;
PS0f = R125f.z;
// 15
backupReg0f = R1f.y;
backupReg1f = R4f.z;
backupReg2f = R0f.x;
R0f.x = R6f.y + R7f.y;
R1f.y = R2f.x + R1f.w;
R4f.z = R4f.w + backupReg0f;
R1f.w = backupReg1f + backupReg2f;
tempResultf = log2(R127f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R126f.w = tempResultf;
PS1f = R126f.w;
// 16
backupReg0f = R8f.y;
backupReg1f = R5f.z;
R2f.x = mul_nonIEEE(R127f.y, intBitsToFloat(uf_remappedPS[4].x));
R8f.y = mul_nonIEEE(R125f.z, intBitsToFloat(uf_remappedPS[4].y));
R5f.z = R1f.x + R9f.y;
R4f.w = backupReg0f + backupReg1f;
tempResultf = log2(R127f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 17
R9f.y = mul_nonIEEE(R126f.w, intBitsToFloat(uf_remappedPS[4].z));
R3f.w = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[4].x));
tempResultf = log2(R126f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 18
R6f.y = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].y));
tempResultf = log2(R126f.y);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 19
R5f.w = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[4].z));
tempResultf = log2(R124f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 20
R7f.y = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].x));
tempResultf = log2(R125f.y);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 21
R6f.w = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[4].y));
tempResultf = log2(R126f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 22
R7f.w = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].z));
tempResultf = log2(R124f.y);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 23
R2f.y = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[4].x));
tempResultf = log2(R125f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 24
R2f.w = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].y));
tempResultf = log2(R125f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 25
backupReg0f = R0f.y;
R0f.y = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[4].z));
tempResultf = log2(backupReg0f);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 26
R0f.w = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].x));
tempResultf = log2(R1f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 27
R5f.x = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[4].y));
tempResultf = log2(R7f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 28
R4f.y = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].z));
tempResultf = log2(R124f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R1f.x = tempResultf;
PS0f = R1f.x;
// 0
R125f.w = mul_nonIEEE(R1f.x, intBitsToFloat(uf_remappedPS[4].x));
tempResultf = log2(R3f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 1
R126f.y = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[4].y));
tempResultf = log2(R3f.y);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 2
R126f.w = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].z));
tempResultf = log2(R4f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 3
backupReg0f = R1f.y;
R1f.y = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[4].x));
tempResultf = log2(backupReg0f);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 4
R127f.w = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].y));
tempResultf = log2(R1f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 5
R1f.w = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[4].z));
tempResultf = log2(R0f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 6
R0f.x = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].x));
tempResultf = log2(R4f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 7
R4f.z = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[4].y));
tempResultf = log2(R5f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 8
R3f.x = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].z));
R125f.x = exp2(R2f.x);
PS0f = R125f.x;
// 9
R124f.y = exp2(R8f.y);
PS1f = R124f.y;
// 10
R124f.z = exp2(R9f.y);
PS0f = R124f.z;
// 11
R126f.x = dot(vec4(R125f.x,R124f.y,PS0f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV1f.x = R126f.x;
PV1f.y = R126f.x;
PV1f.z = R126f.x;
PV1f.w = R126f.x;
R127f.x = exp2(R3f.w);
PS1f = R127f.x;
// 12
PV0f.y = R124f.z + -(PV1f.x);
PV0f.z = R124f.y + -(PV1f.x);
PV0f.w = R125f.x + -(PV1f.x);
R124f.y = exp2(R6f.y);
PS0f = R124f.y;
// 13
backupReg0f = R126f.x;
backupReg0f = R126f.x;
backupReg0f = R126f.x;
R126f.x = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[5].x)) + backupReg0f);
R126f.x = clamp(R126f.x, 0.0, 1.0);
R125f.z = (mul_nonIEEE(PV0f.y,intBitsToFloat(uf_remappedPS[5].x)) + backupReg0f);
R125f.z = clamp(R125f.z, 0.0, 1.0);
R124f.w = (mul_nonIEEE(PV0f.z,intBitsToFloat(uf_remappedPS[5].x)) + backupReg0f);
R124f.w = clamp(R124f.w, 0.0, 1.0);
R124f.z = exp2(R5f.w);
PS1f = R124f.z;
// 14
tempf.x = dot(vec4(R127f.x,R124f.y,PS1f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.z = tempf.x;
R125f.x = exp2(R7f.y);
PS0f = R125f.x;
// 15
PV1f.x = R124f.y + -(PV0f.x);
PV1f.y = R127f.x + -(PV0f.x);
R8f.z = R126f.x + -(0.5);
PV1f.w = R124f.z + -(PV0f.x);
R124f.y = exp2(R6f.w);
PS1f = R124f.y;
// 16
R126f.x = (mul_nonIEEE(PV1f.w,intBitsToFloat(uf_remappedPS[5].x)) + R126f.z);
R126f.x = clamp(R126f.x, 0.0, 1.0);
R125f.y = (mul_nonIEEE(PV1f.x,intBitsToFloat(uf_remappedPS[5].x)) + R126f.z);
R125f.y = clamp(R125f.y, 0.0, 1.0);
R127f.z = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedPS[5].x)) + R126f.z);
R127f.z = clamp(R127f.z, 0.0, 1.0);
R6f.w = R124f.w + -(0.5);
R126f.z = exp2(R7f.w);
PS0f = R126f.z;
// 17
tempf.x = dot(vec4(R125f.x,R124f.y,PS0f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R124f.z = tempf.x;
R127f.x = exp2(R2f.y);
PS1f = R127f.x;
// 18
PV0f.x = R124f.y + -(PV1f.x);
PV0f.y = R125f.x + -(PV1f.x);
R6f.z = R125f.z + -(0.5);
PV0f.w = R126f.z + -(PV1f.x);
R124f.y = exp2(R2f.w);
PS0f = R124f.y;
// 19
backupReg0f = R124f.z;
R2f.x = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[5].x)) + R124f.z);
R2f.x = clamp(R2f.x, 0.0, 1.0);
R127f.y = (mul_nonIEEE(PV0f.x,intBitsToFloat(uf_remappedPS[5].x)) + R124f.z);
R127f.y = clamp(R127f.y, 0.0, 1.0);
R124f.z = (mul_nonIEEE(PV0f.y,intBitsToFloat(uf_remappedPS[5].x)) + backupReg0f);
R124f.z = clamp(R124f.z, 0.0, 1.0);
R5f.w = R127f.z + -(0.5);
R127f.z = exp2(R0f.y);
PS1f = R127f.z;
// 20
backupReg0f = R0f.w;
R125f.x = dot(vec4(R127f.x,R124f.y,PS1f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = R125f.x;
PV0f.y = R125f.x;
PV0f.z = R125f.x;
PV0f.w = R125f.x;
R124f.x = exp2(backupReg0f);
PS0f = R124f.x;
// 21
R6f.x = R125f.y + -(0.5);
PV1f.y = R127f.z + -(PV0f.x);
PV1f.z = R124f.y + -(PV0f.x);
PV1f.w = R127f.x + -(PV0f.x);
R125f.y = exp2(R5f.x);
PS1f = R125f.y;
// 22
R5f.x = (mul_nonIEEE(PV1f.w,intBitsToFloat(uf_remappedPS[5].x)) + R125f.x);
R5f.x = clamp(R5f.x, 0.0, 1.0);
R0f.y = R126f.x + -(0.5);
R7f.z = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedPS[5].x)) + R125f.x);
R7f.z = clamp(R7f.z, 0.0, 1.0);
R2f.w = (mul_nonIEEE(PV1f.z,intBitsToFloat(uf_remappedPS[5].x)) + R125f.x);
R2f.w = clamp(R2f.w, 0.0, 1.0);
R127f.z = exp2(R4f.y);
PS0f = R127f.z;
// 23
R126f.x = dot(vec4(R124f.x,R125f.y,PS0f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV1f.x = R126f.x;
PV1f.y = R126f.x;
PV1f.z = R126f.x;
PV1f.w = R126f.x;
R125f.x = exp2(R125f.w);
PS1f = R125f.x;
// 24
backupReg0f = R126f.y;
R7f.x = R124f.z + -(0.5);
PV0f.y = R127f.z + -(PV1f.x);
PV0f.z = R125f.y + -(PV1f.x);
PV0f.w = R124f.x + -(PV1f.x);
R126f.y = exp2(backupReg0f);
PS0f = R126f.y;
// 25
R4f.x = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[5].x)) + R126f.x);
R4f.x = clamp(R4f.x, 0.0, 1.0);
R2f.y = R127f.y + -(0.5);
R1f.z = (mul_nonIEEE(PV0f.y,intBitsToFloat(uf_remappedPS[5].x)) + R126f.x);
R1f.z = clamp(R1f.z, 0.0, 1.0);
R7f.w = (mul_nonIEEE(PV0f.z,intBitsToFloat(uf_remappedPS[5].x)) + R126f.x);
R7f.w = clamp(R7f.w, 0.0, 1.0);
R127f.z = exp2(R126f.w);
PS1f = R127f.z;
// 26
tempf.x = dot(vec4(R125f.x,R126f.y,PS1f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R5f.z = tempf.x;
R1f.x = exp2(R1f.y);
PS0f = R1f.x;
// 27
backupReg0f = R2f.x;
R2f.x = R126f.y + -(PV0f.x);
R1f.y = R125f.x + -(PV0f.x);
R9f.z = backupReg0f + -(0.5);
R0f.w = R127f.z + -(PV0f.x);
R4f.y = exp2(R127f.w);
PS1f = R4f.y;
// 0
R126f.x = (mul_nonIEEE(R0f.w,intBitsToFloat(uf_remappedPS[5].x)) + R5f.z);
R126f.x = clamp(R126f.x, 0.0, 1.0);
R127f.y = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[5].x)) + R5f.z);
R127f.y = clamp(R127f.y, 0.0, 1.0);
R126f.z = (mul_nonIEEE(R1f.y,intBitsToFloat(uf_remappedPS[5].x)) + R5f.z);
R126f.z = clamp(R126f.z, 0.0, 1.0);
R126f.w = R5f.x + -(0.5);
R127f.z = exp2(R1f.w);
PS0f = R127f.z;
// 1
backupReg0f = R0f.x;
tempf.x = dot(vec4(R1f.x,R4f.y,PS0f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R124f.z = tempf.x;
R125f.x = exp2(backupReg0f);
PS1f = R125f.x;
// 2
PV0f.x = R4f.y + -(PV1f.x);
PV0f.y = R1f.x + -(PV1f.x);
R125f.z = R2f.w + -(0.5);
PV0f.w = R127f.z + -(PV1f.x);
R126f.y = exp2(R4f.z);
PS0f = R126f.y;
// 3
R124f.x = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[5].x)) + R124f.z);
R124f.x = clamp(R124f.x, 0.0, 1.0);
R125f.y = (mul_nonIEEE(PV0f.x,intBitsToFloat(uf_remappedPS[5].x)) + R124f.z);
R125f.y = clamp(R125f.y, 0.0, 1.0);
R127f.z = (mul_nonIEEE(PV0f.y,intBitsToFloat(uf_remappedPS[5].x)) + R124f.z);
R127f.z = clamp(R127f.z, 0.0, 1.0);
R125f.w = R7f.z + -(0.5);
R124f.z = exp2(R3f.x);
PS1f = R124f.z;
// 4
tempf.x = dot(vec4(R125f.x,R126f.y,PS1f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.w = tempf.x;
R124f.y = R4f.x + -(0.5);
PS0f = R124f.y;
// 5
PV1f.x = R124f.z + -(PV0f.x);
PV1f.y = R126f.y + -(PV0f.x);
PV1f.z = R125f.x + -(PV0f.x);
R124f.w = R7f.w + -(0.5);
R7f.w = R1f.z + -(0.5);
PS1f = R7f.w;
// 6
backupReg0f = R127f.y;
R125f.x = R126f.z + -(0.5);
R127f.y = (mul_nonIEEE(PV1f.x,intBitsToFloat(uf_remappedPS[5].x)) + R127f.w);
R127f.y = clamp(R127f.y, 0.0, 1.0);
R126f.z = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedPS[5].x)) + R127f.w);
R126f.z = clamp(R126f.z, 0.0, 1.0);
R123f.w = (mul_nonIEEE(PV1f.z,intBitsToFloat(uf_remappedPS[5].x)) + R127f.w);
R123f.w = clamp(R123f.w, 0.0, 1.0);
PV0f.w = R123f.w;
R124f.z = backupReg0f + -(0.5);
PS0f = R124f.z;
// 7
backupReg0f = R126f.x;
backupReg1f = R125f.y;
backupReg2f = R127f.z;
R126f.x = R124f.x + -(0.5);
R125f.y = backupReg0f + -(0.5);
R127f.z = backupReg1f + -(0.5);
R127f.w = backupReg2f + -(0.5);
R124f.x = PV0f.w + -(0.5);
PS1f = R124f.x;
// 8
backupReg0f = R127f.y;
backupReg1f = R126f.z;
R127f.x = (mul_nonIEEE(R8f.z,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R127f.y = (mul_nonIEEE(R6f.w,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R126f.z = backupReg0f + -(0.5);
R6f.w = backupReg1f + -(0.5);
R2f.w = (mul_nonIEEE(R6f.z,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
PS0f = R2f.w;
// 9
backupReg0f = R6f.x;
R6f.x = (mul_nonIEEE(R5f.w,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R126f.y = (mul_nonIEEE(R0f.y,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R6f.z = (mul_nonIEEE(R7f.x,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R5f.w = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R0f.w = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
PS1f = R0f.w;
// 10
backupReg0f = R124f.y;
R7f.x = (mul_nonIEEE(R126f.w,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R124f.y = (mul_nonIEEE(R125f.z,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R125f.z = (mul_nonIEEE(R9f.z,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R126f.w = (mul_nonIEEE(R125f.w,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R9f.z = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
PS0f = R9f.z;
// 11
backupReg0f = R125f.x;
backupReg1f = R124f.z;
backupReg2f = R125f.y;
R125f.x = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R125f.y = (mul_nonIEEE(R124f.w,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R124f.z = (mul_nonIEEE(backupReg1f,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R124f.w = (mul_nonIEEE(R7f.w,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R125f.w = (mul_nonIEEE(backupReg2f,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
PS1f = R125f.w;
// 12
backupReg0f = R126f.x;
backupReg1f = R127f.z;
R126f.x = (mul_nonIEEE(R127f.w,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R0f.y = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R127f.z = (mul_nonIEEE(R124f.x,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R127f.w = (mul_nonIEEE(backupReg1f,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R124f.x = (mul_nonIEEE(R6f.w,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
PS0f = R124f.x;
// 13
R6f.w = (mul_nonIEEE(R126f.z,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
// 14
R1f.x = mul_nonIEEE(R127f.x, intBitsToFloat(uf_remappedPS[8].x));
R1f.x = clamp(R1f.x, 0.0, 1.0);
R1f.y = mul_nonIEEE(R127f.y, intBitsToFloat(uf_remappedPS[8].y));
R1f.y = clamp(R1f.y, 0.0, 1.0);
R1f.z = mul_nonIEEE(R2f.w, intBitsToFloat(uf_remappedPS[8].z));
R1f.z = clamp(R1f.z, 0.0, 1.0);
R8f.w = mul_nonIEEE(R6f.x, intBitsToFloat(uf_remappedPS[8].x));
R8f.w = clamp(R8f.w, 0.0, 1.0);
R8f.y = mul_nonIEEE(R5f.w, intBitsToFloat(uf_remappedPS[8].y));
R8f.y = clamp(R8f.y, 0.0, 1.0);
PS0f = R8f.y;
// 15
R5f.x = mul_nonIEEE(R6f.z, intBitsToFloat(uf_remappedPS[8].x));
R5f.x = clamp(R5f.x, 0.0, 1.0);
R5f.y = mul_nonIEEE(R0f.w, intBitsToFloat(uf_remappedPS[8].y));
R5f.y = clamp(R5f.y, 0.0, 1.0);
R8f.z = mul_nonIEEE(R126f.y, intBitsToFloat(uf_remappedPS[8].z));
R8f.z = clamp(R8f.z, 0.0, 1.0);
R5f.w = mul_nonIEEE(R125f.z, intBitsToFloat(uf_remappedPS[8].z));
R5f.w = clamp(R5f.w, 0.0, 1.0);
R2f.x = mul_nonIEEE(R7f.x, intBitsToFloat(uf_remappedPS[8].x));
R2f.x = clamp(R2f.x, 0.0, 1.0);
PS1f = R2f.x;
// 16
R7f.x = mul_nonIEEE(R9f.z, intBitsToFloat(uf_remappedPS[8].x));
R7f.x = clamp(R7f.x, 0.0, 1.0);
R2f.y = mul_nonIEEE(R124f.y, intBitsToFloat(uf_remappedPS[8].y));
R2f.y = clamp(R2f.y, 0.0, 1.0);
R2f.z = mul_nonIEEE(R126f.w, intBitsToFloat(uf_remappedPS[8].z));
R2f.z = clamp(R2f.z, 0.0, 1.0);
R7f.w = mul_nonIEEE(R125f.y, intBitsToFloat(uf_remappedPS[8].y));
R7f.w = clamp(R7f.w, 0.0, 1.0);
R7f.z = mul_nonIEEE(R124f.w, intBitsToFloat(uf_remappedPS[8].z));
R7f.z = clamp(R7f.z, 0.0, 1.0);
PS0f = R7f.z;
// 17
R6f.x = mul_nonIEEE(R125f.x, intBitsToFloat(uf_remappedPS[8].x));
R6f.x = clamp(R6f.x, 0.0, 1.0);
R6f.y = mul_nonIEEE(R124f.z, intBitsToFloat(uf_remappedPS[8].y));
R6f.y = clamp(R6f.y, 0.0, 1.0);
R6f.z = mul_nonIEEE(R125f.w, intBitsToFloat(uf_remappedPS[8].z));
R6f.z = clamp(R6f.z, 0.0, 1.0);
R9f.w = mul_nonIEEE(R126f.x, intBitsToFloat(uf_remappedPS[8].x));
R9f.w = clamp(R9f.w, 0.0, 1.0);
R9f.y = mul_nonIEEE(R127f.w, intBitsToFloat(uf_remappedPS[8].y));
R9f.y = clamp(R9f.y, 0.0, 1.0);
PS1f = R9f.y;
// 18
backupReg0f = R0f.y;
R0f.x = mul_nonIEEE(R127f.z, intBitsToFloat(uf_remappedPS[8].x));
R0f.x = clamp(R0f.x, 0.0, 1.0);
PV0f.x = R0f.x;
R0f.y = mul_nonIEEE(R124f.x, intBitsToFloat(uf_remappedPS[8].y));
R0f.y = clamp(R0f.y, 0.0, 1.0);
PV0f.y = R0f.y;
R9f.z = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedPS[8].z));
R9f.z = clamp(R9f.z, 0.0, 1.0);
R0f.w = mul_nonIEEE(R6f.w, intBitsToFloat(uf_remappedPS[8].z));
R0f.w = clamp(R0f.w, 0.0, 1.0);
PV0f.w = R0f.w;
// 19
R17f.xyz = vec3(PV0f.x,PV0f.y,PV0f.w);
R17f.w = PV0f.w;
// 20
R16f.xyz = vec3(R9f.w,R9f.y,R9f.z);
R16f.w = R9f.w;
// 21
R15f.xyz = vec3(R6f.x,R6f.y,R6f.z);
R15f.w = R6f.w;
// 22
R14f.xyz = vec3(R7f.x,R7f.w,R7f.z);
R14f.w = R7f.w;
// 23
R13f.xyz = vec3(R2f.x,R2f.y,R2f.z);
R13f.w = R2f.w;
// 24
R12f.xyz = vec3(R5f.x,R5f.y,R5f.w);
R12f.w = R5f.w;
// 25
R11f.xyz = vec3(R8f.w,R8f.y,R8f.z);
R11f.w = R8f.w;
// 26
R10f.xyz = vec3(R1f.x,R1f.y,R1f.z);
R10f.w = R1f.w;
// export
passPixelColor0 = vec4(R10f.x, R10f.y, R10f.z, R10f.w);
passPixelColor1 = vec4(R11f.x, R11f.y, R11f.z, R11f.w);
passPixelColor2 = vec4(R12f.x, R12f.y, R12f.z, R12f.w);
passPixelColor3 = vec4(R13f.x, R13f.y, R13f.z, R13f.w);
passPixelColor4 = vec4(R14f.x, R14f.y, R14f.z, R14f.w);
passPixelColor5 = vec4(R15f.x, R15f.y, R15f.z, R15f.w);
passPixelColor6 = vec4(R16f.x, R16f.y, R16f.z, R16f.w);
passPixelColor7 = vec4(R17f.x, R17f.y, R17f.z, R17f.w);
}
