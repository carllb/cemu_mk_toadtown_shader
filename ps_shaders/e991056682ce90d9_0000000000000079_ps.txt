#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader e991056682ce90d9
uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf438a000 res 32x32x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
// 0
R127f.w = 1.0 / intBitsToFloat(uf_remappedPS[0].x);
PS0f = R127f.w;
// 1
R1f.x = (-(PS0f) * 1.5 + R0f.x);
PV1f.x = R1f.x;
R1f.y = (-(PS0f) * 1.5 + R0f.y);
PV1f.y = R1f.y;
// 2
R3f.x = (R127f.w * 2.0 + PV1f.x);
R3f.y = (R127f.w * 2.0 + PV1f.y);
R0f.z = PV1f.y;
R0f.x = (R127f.w * 2.0 + PV1f.x);
PS0f = R0f.x;
// 3
R2f.x = R1f.x;
R2f.y = (R127f.w * 2.0 + R1f.y);
R0f.xyzw = (textureGather(textureUnitPS0, R0f.xz).xyzw);
R1f.xyzw = (textureGather(textureUnitPS0, R1f.xy).xyzw);
R2f.xyzw = (textureGather(textureUnitPS0, R2f.xy).xyzw);
R3f.xyzw = (textureGather(textureUnitPS0, R3f.xy).xyzw);
// 0
backupReg0f = R0f.z;
backupReg1f = R0f.x;
backupReg2f = R0f.y;
PV0f.x = max(R1f.x, R1f.y);
PV0f.y = max(R1f.z, R1f.w);
PV0f.z = max(backupReg0f, R0f.w);
PV0f.w = max(backupReg1f, backupReg2f);
R127f.w = max(R2f.z, R2f.w);
PS0f = R127f.w;
// 1
PV1f.x = max(R3f.z, R3f.w);
PV1f.y = max(PV0f.w, PV0f.z);
PV1f.z = max(R3f.x, R3f.y);
R126f.w = max(PV0f.x, PV0f.y);
R127f.x = max(R2f.x, R2f.y);
PS1f = R127f.x;
// 2
PV0f.x = max(PV1f.z, PV1f.x);
PV0f.z = max(PV1f.y, R127f.w);
// 3
PV1f.y = max(R126f.w, PV0f.z);
PV1f.w = max(R127f.x, PV0f.x);
// 4
R2f.x = max(PV1f.y, PV1f.w);
// export
passPixelColor0 = vec4(R2f.x, R2f.x, R2f.x, R2f.x);
}
