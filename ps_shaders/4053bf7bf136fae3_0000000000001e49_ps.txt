#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 4053bf7bf136fae3
uniform ivec4 uf_remappedPS[3];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x3d16b000 res 640x8x1 dim 1 tm: 4 format 0034 compSel: 5 5 5 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 1 2 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x3e786800 res 148x148x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x3c968000 res 74x148x1 dim 1 tm: 4 format 0034 compSel: 5 5 5 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 1 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[3];
bool activeMaskStackC[4];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
if( activeMaskStackC[1] == true ) {
R3i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.xy)).xyzw);
R1i.xyzw = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R1i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(R3i.w)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R3i.w)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R3i.w)));
R0i.w = uf_remappedPS[0].x & 0x0000001f;
R4i.z = uf_remappedPS[0].x & 0x00000080;
PS0i = R4i.z;
// 1
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R1i.w)));
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(R1i.w)));
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R1i.w)));
// 2
predResult = (R0i.w == 0x00000002);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.w = floatBitsToInt(-(intBitsToFloat(R1i.w)) + 1.0);
// 1
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(R4i.x)));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(PV0i.w)) + intBitsToFloat(R4i.y)));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(PV0i.w)) + intBitsToFloat(R2i.z)));
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (R0i.w == 0x00000003);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R1i.x;
backupReg1i = R1i.y;
backupReg2i = R1i.z;
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(backupReg0i)));
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(backupReg1i)));
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(backupReg2i)));
}
activeMaskStack[2] = activeMaskStack[2] == false;
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.x;
backupReg1i = R0i.z;
backupReg2i = R0i.y;
backupReg3i = R0i.w;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R4i.x)) + intBitsToFloat(backupReg0i));
PV0i.y = (R0i.w == 0x00000005)?int(0xFFFFFFFF):int(0x0);
PV0i.z = floatBitsToInt(-(intBitsToFloat(R2i.z)) + intBitsToFloat(backupReg1i));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(backupReg2i));
R127i.y = (backupReg3i == 0x00000004)?int(0xFFFFFFFF):int(0x0);
PS0i = R127i.y;
// 1
R123i.x = ((PV0i.y == 0)?(R3i.y):(PV0i.w));
PV1i.x = R123i.x;
R123i.y = ((PV0i.y == 0)?(R3i.x):(PV0i.x));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(intBitsToFloat(R4i.x) + intBitsToFloat(R0i.x));
R127i.w = ((PV0i.y == 0)?(R3i.z):(PV0i.z));
PS1i = floatBitsToInt(intBitsToFloat(R4i.y) + intBitsToFloat(R0i.y));
// 2
backupReg0i = R0i.z;
R1i.x = ((R127i.y == 0)?(PV1i.y):(PV1i.z));
R1i.y = ((R127i.y == 0)?(PV1i.x):(PS1i));
PV0i.z = floatBitsToInt(intBitsToFloat(R2i.z) + intBitsToFloat(backupReg0i));
// 3
R1i.z = ((R127i.y == 0)?(R127i.w):(PV0i.z));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
R2i.xyzw = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R2i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0i.x = uf_remappedPS[0].x >> 0x00000008;
PV0i.y = floatBitsToInt(min(intBitsToFloat(R3i.w), intBitsToFloat(R1i.w)));
R3i.z = uf_remappedPS[0].x & 0x00008000;
PV0i.w = floatBitsToInt(max(intBitsToFloat(R3i.w), intBitsToFloat(R1i.w)));
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R2i.w)));
PS0i = R0i.x;
// 1
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(R2i.w)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(R2i.w)));
R0i.w = ((R4i.z == 0)?(PV0i.w):(PV0i.y));
PV1i.w = R0i.w;
R1i.w = PV0i.x & 0x0000001f;
PS1i = R1i.w;
// 2
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PV1i.w)));
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PV1i.w)));
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(PV1i.w)));
// 3
predResult = (R1i.w == 0x00000002);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.w = floatBitsToInt(-(intBitsToFloat(R2i.w)) + 1.0);
// 1
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg2i = R0i.z;
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(backupReg0i)));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.w)) + intBitsToFloat(backupReg1i)));
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),intBitsToFloat(PV0i.w)) + intBitsToFloat(backupReg2i)));
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (R1i.w == 0x00000003);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R2i.x)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(R2i.y)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R2i.z)));
}
activeMaskStack[2] = activeMaskStack[2] == false;
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.x;
backupReg1i = R0i.z;
backupReg2i = R0i.y;
PV0i.x = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(R3i.x));
PV0i.y = (R1i.w == 0x00000005)?int(0xFFFFFFFF):int(0x0);
PV0i.z = floatBitsToInt(-(intBitsToFloat(backupReg1i)) + intBitsToFloat(R4i.z));
PV0i.w = floatBitsToInt(-(intBitsToFloat(backupReg2i)) + intBitsToFloat(R3i.y));
R127i.y = (R1i.w == 0x00000004)?int(0xFFFFFFFF):int(0x0);
PS0i = R127i.y;
// 1
R123i.x = ((PV0i.y == 0)?(R1i.y):(PV0i.w));
PV1i.x = R123i.x;
R123i.y = ((PV0i.y == 0)?(R1i.x):(PV0i.x));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(R3i.x));
R127i.w = ((PV0i.y == 0)?(R1i.z):(PV0i.z));
PS1i = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(R3i.y));
// 2
backupReg0i = R0i.z;
R0i.x = ((R127i.y == 0)?(PV1i.y):(PV1i.z));
R0i.y = ((R127i.y == 0)?(PV1i.x):(PS1i));
PV0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R4i.z));
// 3
R0i.z = ((R127i.y == 0)?(R127i.w):(PV0i.z));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(min(intBitsToFloat(R0i.w), intBitsToFloat(R2i.w)));
PV0i.y = floatBitsToInt(max(intBitsToFloat(R0i.w), intBitsToFloat(R2i.w)));
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[1].x)) + intBitsToFloat(uf_remappedPS[2].x)));
PS0i = R0i.x;
// 1
backupReg0i = R0i.y;
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[1].y)) + intBitsToFloat(uf_remappedPS[2].y)));
R0i.w = ((R3i.z == 0)?(PV0i.y):(PV0i.x));
PV1i.w = R0i.w;
// 2
backupReg0i = R0i.z;
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[1].z)) + intBitsToFloat(uf_remappedPS[2].z)));
R0i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(uf_remappedPS[1].w)) + intBitsToFloat(uf_remappedPS[2].w)));
}
// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
}
