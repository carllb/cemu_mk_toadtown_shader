#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 19ea4d31baf79f8a
uniform ivec4 uf_remappedPS[3];
layout(binding = 0) uniform samplerCubeArray textureUnitPS0;// Tex0 addr 0x3fa11000 res 32x32x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x6) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2DArray textureUnitPS1;// Tex1 addr 0x30d05800 res 4x4x1 dim 5 tm: 2 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x15dd8000 res 128x16x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x15dda000 res 256x32x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex0 = 0.0;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f.xyz = (texture(textureUnitPS2, R0f.xy).xyz);
R5f.xyz = (texture(textureUnitPS3, R0f.xy).xyz);
// 0
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,-0.0),vec4(R3f.x,R3f.y,R3f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = 1.0 / R2f.w;
// 1
backupReg0f = R2f.x;
backupReg1f = R2f.y;
R2f.x = backupReg0f * PS0f;
R2f.y = backupReg1f * PS0f;
R2f.z = roundEven(0.0);
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[1].x));
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 2
R127f.x = mul_nonIEEE(R3f.x, PS1f);
R127f.y = mul_nonIEEE(R3f.y, PS1f);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[1].y));
PV0f.w = mul_nonIEEE(R3f.z, PS1f);
R3f.z = mul_nonIEEE(R4f.x, PV1f.w);
PS0f = R3f.z;
// 3
R3f.y = mul_nonIEEE(R4f.y, PV0f.z);
R127f.z = -(PV0f.w);
PV1f.z = R127f.z;
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[1].z));
R6f.w = 1.0;
PS1f = R6f.w;
// 4
backupReg0f = R4f.z;
redcCUBE(vec4(PV1f.z,PV1f.z,R127f.x,R127f.y),vec4(R127f.y,R127f.x,PV1f.z,PV1f.z),cubeMapSTM,cubeMapFaceId);
R4f.x = cubeMapSTM.x;
R4f.y = cubeMapSTM.y;
R4f.z = cubeMapSTM.z;
R4f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R4f.x;
PV0f.y = R4f.y;
PV0f.z = R4f.z;
PV0f.w = R4f.w;
R3f.x = mul_nonIEEE(backupReg0f, PV1f.w);
PS0f = R3f.x;
// 5
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w), intBitsToFloat(uf_remappedPS[0].w));
PS1f = 1.0 / abs(PV0f.z);
// 6
backupReg0f = R4f.x;
backupReg1f = R4f.y;
R4f.x = (mul_nonIEEE(backupReg0f,PS1f) + 1.5);
R4f.y = (mul_nonIEEE(backupReg1f,PS1f) + 1.5);
R0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].x), PV1f.y);
R2f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].y), PV1f.y);
R0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), PV1f.y);
PS0f = R0f.y;
R2f.xyz = (texture(textureUnitPS1, vec3(R2f.x,R2f.y,R2f.z)).xyz);
R4f.xyz = (textureLod(textureUnitPS0, vec4(redcCUBEReverse(R4f.yx,floatBitsToInt(R4f.w)),cubeMapArrayIndex0),0.0).xyz);
// 0
R123f.x = (R2f.x * 1.0 + 0.0);
PV0f.x = R123f.x;
R123f.z = (R2f.z * 1.0 + 0.0);
PV0f.z = R123f.z;
R123f.w = (R2f.y * 1.0 + 0.0);
PV0f.w = R123f.w;
// 1
PV1f.y = PV0f.z + R4f.z;
PV1f.z = PV0f.w + R4f.y;
PV1f.w = PV0f.x + R4f.x;
// 2
R123f.x = (mul_nonIEEE(R3f.z,PV1f.w) + 0.0);
PV0f.x = R123f.x;
R123f.z = (mul_nonIEEE(R3f.x,PV1f.y) + 0.0);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R3f.y,PV1f.z) + 0.0);
PV0f.w = R123f.w;
// 3
R127f.x = (mul_nonIEEE(R2f.w,R5f.y) + PV0f.w);
PV1f.x = R127f.x;
R127f.y = (mul_nonIEEE(R0f.z,R5f.x) + PV0f.x);
PV1f.y = R127f.y;
R127f.w = (mul_nonIEEE(R0f.y,R5f.z) + PV0f.z);
PV1f.w = R127f.w;
// 4
PV0f.x = R1f.z + -(PV1f.w);
PV0f.y = R1f.y + -(PV1f.x);
PV0f.z = R1f.x + -(PV1f.y);
// 5
R6f.x = (mul_nonIEEE(PV0f.z,R1f.w) + R127f.y);
R6f.y = (mul_nonIEEE(PV0f.y,R1f.w) + R127f.x);
R6f.z = (mul_nonIEEE(PV0f.x,R1f.w) + R127f.w);
// export
passPixelColor0 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
}
