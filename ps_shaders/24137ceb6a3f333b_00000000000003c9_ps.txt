#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 24137ceb6a3f333b
uniform ivec4 uf_remappedPS[4];
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x145fc000 res 800x728x1 dim 1 tm: 4 format 0034 compSel: 0 4 4 4 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x1349a000 res 512x512x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem4;
R2f.x = (texture(textureUnitPS1, R2f.xy).x);
R3f.xyzw = (texture(textureUnitPS3, R0f.xy).xyzw);
// 0
backupReg0f = R0f.w;
R127f.x = intBitsToFloat(uf_remappedPS[0].z) + -(1.0);
PV0f.y = -(R2f.x) + 1.0;
R127f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w), intBitsToFloat(uf_remappedPS[0].w));
R0f.w = mul_nonIEEE(backupReg0f, R3f.w);
R0f.w = clamp(R0f.w, 0.0, 1.0);
PS0f = R0f.w;
// 1
PV1f.x = PV0f.y + 0.0;
R127f.y = intBitsToFloat(uf_remappedPS[0].x) + -(1.0);
R127f.z = intBitsToFloat(uf_remappedPS[0].y) + -(1.0);
// 2
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(uf_remappedPS[3].y));
R126f.z = mul_nonIEEE(PV1f.x, R127f.w);
R126f.z = clamp(R126f.z, 0.0, 1.0);
PV0f.z = R126f.z;
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(uf_remappedPS[3].x));
// 3
R123f.x = (mul_nonIEEE(R3f.x,PV0f.w) + 0.0);
PV1f.x = R123f.x;
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(uf_remappedPS[3].z));
R123f.z = (mul_nonIEEE(R127f.y,PV0f.z) + 1.0);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R3f.y,PV0f.x) + 0.0);
PV1f.w = R123f.w;
R122f.x = (mul_nonIEEE(R127f.z,PV0f.z) + 1.0);
PS1f = R122f.x;
// 4
R123f.x = (mul_nonIEEE(R127f.x,R126f.z) + 1.0);
PV0f.x = R123f.x;
R127f.y = mul_nonIEEE(PV1f.z, PV1f.x);
PV0f.y = R127f.y;
R123f.z = (mul_nonIEEE(R3f.z,PV1f.y) + 0.0);
PV0f.z = R123f.z;
R127f.w = mul_nonIEEE(PS1f, PV1f.w);
PV0f.w = R127f.w;
// 5
PV1f.y = R1f.y + -(PV0f.w);
PV1f.z = R1f.x + -(PV0f.y);
R126f.w = mul_nonIEEE(PV0f.x, PV0f.z);
PV1f.w = R126f.w;
// 6
PV0f.x = R1f.z + -(PV1f.w);
R0f.y = (mul_nonIEEE(PV1f.y,R1f.w) + R127f.w);
R0f.x = (mul_nonIEEE(PV1f.z,R1f.w) + R127f.y);
PS0f = R0f.x;
// 7
R0f.z = (mul_nonIEEE(PV0f.x,R1f.w) + R126f.w);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
