#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader f5a4a6618f8e18b0
uniform ivec4 uf_remappedPS[2];
layout(binding = 0) uniform samplerCubeArray textureUnitPS0;// Tex0 addr 0x403c2000 res 128x128x1 dim 3 tm: 4 format 0820 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x6) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem5;
layout(location = 5) in vec4 passParameterSem7;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex0 = 0.0;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem3);
R3i = floatBitsToInt(passParameterSem4);
R4i = floatBitsToInt(passParameterSem5);
R5i = floatBitsToInt(passParameterSem7);
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(R2i.z)));
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(PS0i),-0.0),vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),1.0,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 2
backupReg0i = R5i.x;
backupReg1i = R5i.y;
backupReg2i = R5i.z;
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS1i)));
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(PS1i)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 3
backupReg0i = R2i.x;
backupReg1i = R2i.y;
backupReg2i = R2i.z;
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
PV1i.x = R2i.x;
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS0i)));
PV1i.y = R2i.y;
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(PS0i)));
PV1i.z = R2i.z;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 5
R0i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + 1.0);
// 6
predResult = (intBitsToFloat(R0i.w) > 0.0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = R0i.w;
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) / 2.0);
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(R2i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(R2i.z)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), intBitsToFloat(R2i.y)));
// 1
R127i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R5i.y)),intBitsToFloat(R2i.z)) + intBitsToFloat(PV0i.w)));
R127i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R5i.x)),intBitsToFloat(R2i.y)) + intBitsToFloat(PV0i.y)));
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R5i.z)),intBitsToFloat(R2i.x)) + intBitsToFloat(PV0i.z)));
R0i.w = floatBitsToInt(sqrt(intBitsToFloat(PV0i.x)));
PS1i = R0i.w;
// 2
PV0i.y = PS1i;
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) * 2.0);
// 3
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
// 4
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PS1i)));
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R2i.xyz = ivec3(0,0,0);
R0i.w = 0x3f800000;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(R0i.w)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y)));
PV0i.y = R127i.y;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R2i.x)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(R0i.w)));
PV0i.w = R127i.w;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R2i.z)));
PS0i = R126i.x;
// 1
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R0i.w)));
PV1i.x = R125i.x;
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(R2i.z)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(R2i.z)));
PV1i.z = R127i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.y)),intBitsToFloat(R2i.y)) + 0.5));
PV1i.w = R126i.w;
R125i.w = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(PV0i.y));
R125i.w = floatBitsToInt(intBitsToFloat(R125i.w) * 2.0);
PS1i = R125i.w;
// 2
R124i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(PV1i.y)));
R124i.x = floatBitsToInt(intBitsToFloat(R124i.x) * 2.0);
PV0i.x = R124i.x;
PV0i.y = floatBitsToInt(-(intBitsToFloat(R126i.z)) + -(intBitsToFloat(PV1i.y)));
R124i.z = floatBitsToInt(-(intBitsToFloat(R127i.x)) + intBitsToFloat(R126i.x));
R124i.z = floatBitsToInt(intBitsToFloat(R124i.z) * 2.0);
PV0i.z = R124i.z;
R124i.w = floatBitsToInt(-(intBitsToFloat(R127i.w)) + intBitsToFloat(R127i.y));
R124i.w = floatBitsToInt(intBitsToFloat(R124i.w) * 2.0);
R2i.z = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(PV1i.z));
R2i.z = floatBitsToInt(intBitsToFloat(R2i.z) * 2.0);
PS0i = R2i.z;
// 3
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PV0i.x)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PV0i.z)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(R125i.w)));
R0i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + 0.5);
R0i.w = floatBitsToInt(intBitsToFloat(R0i.w) * 2.0);
R126i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R126i.x));
R126i.y = floatBitsToInt(intBitsToFloat(R126i.y) * 2.0);
PS1i = R126i.y;
// 4
backupReg0i = R125i.x;
R125i.x = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(R127i.z));
R125i.x = floatBitsToInt(intBitsToFloat(R125i.x) * 2.0);
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(R125i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(R124i.x)));
R1i.w = floatBitsToInt(intBitsToFloat(R126i.w) + -(intBitsToFloat(R126i.z)));
R1i.w = floatBitsToInt(intBitsToFloat(R1i.w) * 2.0);
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(R124i.z)));
PS0i = R127i.z;
// 5
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(R0i.w)) + intBitsToFloat(R125i.z)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(R2i.z)) + intBitsToFloat(R127i.y)));
PV1i.y = R123i.y;
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R124i.w)) + intBitsToFloat(PV0i.z)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(R124i.w)) + intBitsToFloat(R127i.x)));
PV1i.w = R123i.w;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R0i.w)) + intBitsToFloat(PV0i.y)));
PS1i = R126i.w;
// 6
backupReg0i = R3i.z;
backupReg0i = R3i.z;
R3i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(PV1i.w)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R2i.z)) + intBitsToFloat(R127i.z)));
PV0i.y = R123i.y;
R3i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R1i.w)) + intBitsToFloat(PV1i.y)));
R3i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R125i.x)) + intBitsToFloat(PV1i.x)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R124i.x)));
PS0i = R127i.w;
// 7
backupReg0i = R4i.z;
backupReg0i = R4i.z;
R4i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(R125i.z)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R125i.w)));
R4i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R1i.w)) + intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R124i.z)));
R4i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R125i.x)) + intBitsToFloat(R126i.w)));
PS1i = R4i.y;
// 8
backupReg0i = R124i.x;
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(R0i.w)) + intBitsToFloat(PV1i.y)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(R2i.z)) + intBitsToFloat(PV1i.w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(R124i.w)) + intBitsToFloat(R127i.w)));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(backupReg0i)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R124i.z)));
// 9
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R125i.w)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R2i.z)) + intBitsToFloat(PS0i)));
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R1i.w)) + intBitsToFloat(PV0i.y)));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R124i.w)) + intBitsToFloat(PV0i.w)));
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(PV0i.z)));
PS1i = R2i.x;
// 10
backupReg0i = R3i.x;
backupReg0i = R3i.x;
backupReg1i = R3i.z;
backupReg2i = R3i.w;
backupReg1i = R3i.z;
redcCUBE(vec4(intBitsToFloat(R3i.z),intBitsToFloat(R3i.z),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg2i)),vec4(intBitsToFloat(R3i.w),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg1i)),cubeMapSTM,cubeMapFaceId);
R3i.x = floatBitsToInt(cubeMapSTM.x);
R3i.y = floatBitsToInt(cubeMapSTM.y);
R3i.z = floatBitsToInt(cubeMapSTM.z);
R3i.w = cubeMapFaceId;
PV0i.x = R3i.x;
PV0i.y = R3i.y;
PV0i.z = R3i.z;
PV0i.w = R3i.w;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R0i.w)) + intBitsToFloat(PV1i.x)));
PS0i = R122i.x;
// 11
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(R125i.w)));
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R125i.x)) + intBitsToFloat(R124i.x)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)) + intBitsToFloat(R127i.y)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),intBitsToFloat(R125i.x)) + intBitsToFloat(PS0i)));
R125i.x = floatBitsToInt(1.0 / abs(intBitsToFloat(PV0i.z)));
PS1i = R125i.x;
// 12
redcCUBE(vec4(intBitsToFloat(R4i.z),intBitsToFloat(R4i.z),intBitsToFloat(R4i.x),intBitsToFloat(R4i.y)),vec4(intBitsToFloat(R4i.y),intBitsToFloat(R4i.x),intBitsToFloat(R4i.z),intBitsToFloat(R4i.z)),cubeMapSTM,cubeMapFaceId);
R126i.x = floatBitsToInt(cubeMapSTM.x);
R126i.y = floatBitsToInt(cubeMapSTM.y);
R126i.z = floatBitsToInt(cubeMapSTM.z);
R126i.w = cubeMapFaceId;
PV0i.x = R126i.x;
PV0i.y = R126i.y;
PV0i.z = R126i.z;
PV0i.w = R126i.w;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PS1i)) + 1.5));
PS0i = R122i.x;
// 13
R4i.y = PS0i;
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(R125i.x)) + 1.5));
R4i.w = uf_remappedPS[0].x;
R125i.w = floatBitsToInt(1.0 / abs(intBitsToFloat(PV0i.z)));
PS1i = R125i.w;
// 14
backupReg0i = R2i.x;
backupReg0i = R2i.x;
backupReg1i = R2i.z;
backupReg2i = R2i.y;
backupReg1i = R2i.z;
redcCUBE(vec4(intBitsToFloat(R2i.z),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg2i)),vec4(intBitsToFloat(R2i.y),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg1i)),cubeMapSTM,cubeMapFaceId);
R2i.x = floatBitsToInt(cubeMapSTM.x);
R2i.y = floatBitsToInt(cubeMapSTM.y);
R2i.z = floatBitsToInt(cubeMapSTM.z);
R2i.w = cubeMapFaceId;
PV0i.x = R2i.x;
PV0i.y = R2i.y;
PV0i.z = R2i.z;
PV0i.w = R2i.w;
R1i.x = floatBitsToInt(float(uf_remappedPS[1].x));
PS0i = R1i.x;
// 15
backupReg0i = R3i.w;
R4i.x = R124i.z;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R125i.w)) + 1.5));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R125i.w)) + 1.5));
R3i.w = uf_remappedPS[0].x;
R4i.z = backupReg0i;
PS1i = R4i.z;
// 16
redcCUBE(vec4(intBitsToFloat(R127i.z),intBitsToFloat(R127i.z),intBitsToFloat(R127i.x),intBitsToFloat(R127i.w)),vec4(intBitsToFloat(R127i.w),intBitsToFloat(R127i.x),intBitsToFloat(R127i.z),intBitsToFloat(R127i.z)),cubeMapSTM,cubeMapFaceId);
R125i.x = floatBitsToInt(cubeMapSTM.x);
R125i.y = floatBitsToInt(cubeMapSTM.y);
R125i.z = floatBitsToInt(cubeMapSTM.z);
R125i.w = cubeMapFaceId;
PV0i.x = R125i.x;
PV0i.y = R125i.y;
PV0i.z = R125i.z;
PV0i.w = R125i.w;
PS0i = floatBitsToInt(1.0 / abs(intBitsToFloat(R2i.z)));
// 17
R3i.xyz = ivec3(R127i.y,R124i.z,R126i.w);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(PS0i)) + 1.5));
PV1i.w = R123i.w;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(PS0i)) + 1.5));
PS1i = R122i.x;
// 18
R2i.xyz = ivec3(PS1i,PV1i.w,R2i.w);
R2i.w = uf_remappedPS[0].x;
PS0i = floatBitsToInt(1.0 / abs(intBitsToFloat(R125i.z)));
// 19
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(PS0i)) + 1.5));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(PS0i)) + 1.5));
PV1i.y = R123i.y;
R0i.z = R125i.w;
R0i.w = uf_remappedPS[0].x;
// 20
R0i.x = PV1i.x;
R0i.y = PV1i.y;
}
if( activeMaskStackC[1] == true ) {
cubeMapArrayIndex0 = intBitsToFloat(R1i.x);
R4i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, vec4(redcCUBEReverse(intBitsToFloat(R4i.xy),R4i.z),cubeMapArrayIndex0),intBitsToFloat(R4i.w)).xyzw);
cubeMapArrayIndex0 = intBitsToFloat(R1i.x);
R3i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, vec4(redcCUBEReverse(intBitsToFloat(R3i.xy),R3i.z),cubeMapArrayIndex0),intBitsToFloat(R3i.w)).xyzw);
cubeMapArrayIndex0 = intBitsToFloat(R1i.x);
R2i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, vec4(redcCUBEReverse(intBitsToFloat(R2i.xy),R2i.z),cubeMapArrayIndex0),intBitsToFloat(R2i.w)).xyzw);
cubeMapArrayIndex0 = intBitsToFloat(R1i.x);
R0i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, vec4(redcCUBEReverse(intBitsToFloat(R0i.xy),R0i.z),cubeMapArrayIndex0),intBitsToFloat(R0i.w)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R4i.y) * intBitsToFloat(0x3ec80000));
PV0i.y = floatBitsToInt(intBitsToFloat(R4i.x) * intBitsToFloat(0x3ec80000));
PV0i.z = floatBitsToInt(intBitsToFloat(R4i.w) * intBitsToFloat(0x3ec80000));
PV0i.w = floatBitsToInt(intBitsToFloat(R4i.z) * intBitsToFloat(0x3ec80000));
// 1
R123i.x = floatBitsToInt((intBitsToFloat(R3i.y) * intBitsToFloat(0x3de00000) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R3i.x) * intBitsToFloat(0x3de00000) + intBitsToFloat(PV0i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R3i.w) * intBitsToFloat(0x3de00000) + intBitsToFloat(PV0i.z)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R3i.z) * intBitsToFloat(0x3de00000) + intBitsToFloat(PV0i.w)));
PV1i.w = R123i.w;
// 2
R123i.x = floatBitsToInt((intBitsToFloat(R2i.z) * intBitsToFloat(0x3ec80000) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R2i.y) * intBitsToFloat(0x3ec80000) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R2i.x) * intBitsToFloat(0x3ec80000) + intBitsToFloat(PV1i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R2i.w) * intBitsToFloat(0x3ec80000) + intBitsToFloat(PV1i.z)));
PV0i.w = R123i.w;
// 3
R123i.x = floatBitsToInt((intBitsToFloat(R0i.w) * intBitsToFloat(0x3de00000) + intBitsToFloat(PV0i.w)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R0i.z) * intBitsToFloat(0x3de00000) + intBitsToFloat(PV0i.x)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R0i.y) * intBitsToFloat(0x3de00000) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R0i.x) * intBitsToFloat(0x3de00000) + intBitsToFloat(PV0i.z)));
PV1i.w = R123i.w;
// 4
R0i.x = floatBitsToInt(max(intBitsToFloat(PV1i.w), 0.0));
R0i.y = floatBitsToInt(max(intBitsToFloat(PV1i.z), 0.0));
R0i.z = floatBitsToInt(max(intBitsToFloat(PV1i.y), 0.0));
R0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.x), 0.0));
}
// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
}
