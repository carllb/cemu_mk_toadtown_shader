#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 08c9f541e877427b
uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2DArray textureUnitPS0;// Tex0 addr 0x3b6e7000 res 2048x1024x1 dim 5 tm: 1 format 0001 compSel: 5 5 5 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x3b34e000 res 512x256x1 dim 1 tm: 4 format 0034 compSel: 5 5 5 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 13) uniform samplerCubeArray textureUnitPS13;// Tex13 addr 0x3fa88000 res 32x32x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x6) Sampler13 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem12;
layout(location = 3) in vec4 passParameterSem15;
layout(location = 4) in vec4 passParameterSem16;
layout(location = 5) in vec4 passParameterSem18;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex13 = 0.0;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem12;
R3f = passParameterSem15;
R4f = passParameterSem16;
R5f = passParameterSem18;
R6f.xy = (texture(textureUnitPS1, R2f.zw).xy);
R2f.xyzw = (texture(textureUnitPS0, vec3(R2f.x,R2f.y,0.0)).xyzw);
// 0
backupReg0f = R0f.x;
PV0f.x = mul_nonIEEE(R5f.z, R6f.x);
R127f.y = mul_nonIEEE(R5f.x, R6f.x);
PV0f.z = 0.0;
R127f.w = mul_nonIEEE(R5f.y, R6f.x);
R127f.x = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedPS[0].z));
PS0f = R127f.x;
// 1
tempf.x = dot(vec4(R6f.x,R6f.y,PV0f.z,-0.0),vec4(R6f.x,R6f.y,R6f.y,0.0));
tempf.x = clamp(tempf.x, 0.0, 1.0);
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.w = (mul_nonIEEE(R3f.z,R6f.y) + PV0f.x);
PS1f = R126f.w;
// 2
backupReg0f = R127f.y;
PV0f.x = -(PV1f.x) + 1.0;
R127f.y = (mul_nonIEEE(R3f.x,R6f.y) + backupReg0f);
PV0f.z = -(intBitsToFloat(uf_remappedPS[0].z)) + 1.0;
R0f.w = R127f.x;
R5f.y = -(intBitsToFloat(uf_remappedPS[0].y)) + 1.0;
PS0f = R5f.y;
// 3
R123f.x = (mul_nonIEEE(R3f.y,R6f.y) + R127f.w);
PV1f.x = R123f.x;
R3f.y = mul_nonIEEE(R1f.x, R2f.x);
R3f.z = mul_nonIEEE(R1f.z, R2f.z);
PV1f.w = PV0f.z + -(1.0);
PS1f = sqrt(PV0f.x);
// 4
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(R4f.x,PS1f) + R127f.y);
R123f.y = (mul_nonIEEE(R4f.z,PS1f) + R126f.w);
PV0f.y = R123f.y;
R4f.z = (mul_nonIEEE(PV1f.w,backupReg0f) + 1.0);
R127f.w = (mul_nonIEEE(R4f.y,PS1f) + PV1f.x);
R6f.w = mul_nonIEEE(R1f.w, R2f.w);
R6f.w = clamp(R6f.w, 0.0, 1.0);
PS0f = R6f.w;
// 5
R1f.x = mul_nonIEEE(R1f.y, R2f.y);
R127f.z = -(PV0f.y);
PV1f.z = R127f.z;
// 6
backupReg0f = R127f.x;
backupReg0f = R127f.x;
backupReg1f = R127f.w;
redcCUBE(vec4(PV1f.z,PV1f.z,backupReg0f,backupReg1f),vec4(R127f.w,backupReg0f,PV1f.z,PV1f.z),cubeMapSTM,cubeMapFaceId);
R127f.x = cubeMapSTM.x;
R127f.y = cubeMapSTM.y;
R127f.z = cubeMapSTM.z;
R127f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R127f.x;
PV0f.y = R127f.y;
PV0f.z = R127f.z;
PV0f.w = R127f.w;
// 7
R0f.z = PV0f.w;
PS1f = 1.0 / abs(PV0f.z);
// 8
R123f.y = (mul_nonIEEE(R127f.y,PS1f) + 1.5);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R127f.x,PS1f) + 1.5);
PV0f.z = R123f.z;
// 9
R0f.x = PV0f.y;
R0f.y = PV0f.z;
R0f.xyz = (textureLod(textureUnitPS13, vec4(redcCUBEReverse(R0f.xy,floatBitsToInt(R0f.z)),cubeMapArrayIndex13),R0f.w).xyz);
// 0
R123f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),R0f.x) + R5f.y);
PV0f.x = R123f.x;
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),R0f.z) + R5f.y);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),R0f.y) + R5f.y);
PV0f.w = R123f.w;
// 1
R123f.x = (mul_nonIEEE(R4f.z,PV0f.w) + 0.0);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R4f.z,PV0f.x) + 0.0);
PV1f.y = R123f.y;
R123f.w = (mul_nonIEEE(R4f.z,PV0f.z) + 0.0);
PV1f.w = R123f.w;
// 2
R6f.x = mul_nonIEEE(R3f.y, PV1f.y);
R6f.y = mul_nonIEEE(R1f.x, PV1f.x);
R6f.z = mul_nonIEEE(R3f.z, PV1f.w);
// export
passPixelColor0 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
}
