#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader df06170abfe54775
uniform ivec4 uf_remappedPS[21];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf45c5000 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2DArrayShadow textureUnitPS1;// Tex1 addr 0xf494a800 res 1024x1024x2 dim 5 tm: 4 format 0005 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x2) Sampler1 ClampX/Y/Z: 6 6 6 border: 2
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x4004a000 res 2048x2048x1 dim 1 tm: 4 format 081e compSel: 0 1 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) noperspective in vec4 passParameterSem0;
layout(location = 1) noperspective in vec4 passParameterSem4;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[3];
bool activeMaskStackC[4];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem4);
if( activeMaskStackC[1] == true ) {
R1i.x = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.xy)).x);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.x)),intBitsToFloat(uf_remappedPS[0].y)) + 1.0));
PV0i.z = R123i.z;
// 1
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.z));
// 2
R0i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[0].x)), intBitsToFloat(PS1i)));
PV0i.z = R0i.z;
// 3
backupReg0i = R0i.x;
PV1i.x = ((-(intBitsToFloat(PV0i.z)) > intBitsToFloat(uf_remappedPS[1].x))?int(0xFFFFFFFF):int(0x0));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(PV0i.z)));
PV1i.z = ((-(intBitsToFloat(PV0i.z)) > intBitsToFloat(uf_remappedPS[2].x))?int(0xFFFFFFFF):int(0x0));
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.z)));
PS1i = R4i.x;
// 4
PV0i.y = PV1i.z & int(1);
R2i.z = R0i.z;
PV0i.w = PV1i.x & int(1);
R0i.w = 0x3f800000;
PS0i = R0i.w;
// 5
PV1i.x = PV0i.w + PV0i.y;
// 6
R1i.w = floatBitsToInt(float(PV1i.x));
PS0i = R1i.w;
// 7
predResult = (intBitsToFloat(R1i.w) == 0.0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R0i.w;
R1i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),intBitsToFloat(uf_remappedPS[3].w))));
PV0i.x = R1i.x;
PV0i.y = R1i.x;
PV0i.z = R1i.x;
PV0i.w = R1i.x;
// 1
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R1i.y = tempi.x;
// 2
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.z = tempi.x;
// 3
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[6].x),intBitsToFloat(uf_remappedPS[6].y),intBitsToFloat(uf_remappedPS[6].z),intBitsToFloat(uf_remappedPS[6].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R0i.y = tempi.x;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (intBitsToFloat(R1i.w) == 1.0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.w;
R1i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[7].x),intBitsToFloat(uf_remappedPS[7].y),intBitsToFloat(uf_remappedPS[7].z),intBitsToFloat(uf_remappedPS[7].w))));
PV0i.x = R1i.x;
PV0i.y = R1i.x;
PV0i.z = R1i.x;
PV0i.w = R1i.x;
// 1
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[8].x),intBitsToFloat(uf_remappedPS[8].y),intBitsToFloat(uf_remappedPS[8].z),intBitsToFloat(uf_remappedPS[8].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R1i.y = tempi.x;
// 2
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[9].x),intBitsToFloat(uf_remappedPS[9].y),intBitsToFloat(uf_remappedPS[9].z),intBitsToFloat(uf_remappedPS[9].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.z = tempi.x;
// 3
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[10].x),intBitsToFloat(uf_remappedPS[10].y),intBitsToFloat(uf_remappedPS[10].z),intBitsToFloat(uf_remappedPS[10].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R0i.y = tempi.x;
}
activeMaskStack[2] = activeMaskStack[2] == false;
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.w;
R1i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[11].x),intBitsToFloat(uf_remappedPS[11].y),intBitsToFloat(uf_remappedPS[11].z),intBitsToFloat(uf_remappedPS[11].w))));
PV0i.x = R1i.x;
PV0i.y = R1i.x;
PV0i.z = R1i.x;
PV0i.w = R1i.x;
// 1
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[12].x),intBitsToFloat(uf_remappedPS[12].y),intBitsToFloat(uf_remappedPS[12].z),intBitsToFloat(uf_remappedPS[12].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R1i.y = tempi.x;
// 2
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[13].x),intBitsToFloat(uf_remappedPS[13].y),intBitsToFloat(uf_remappedPS[13].z),intBitsToFloat(uf_remappedPS[13].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.z = tempi.x;
// 3
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[14].x),intBitsToFloat(uf_remappedPS[14].y),intBitsToFloat(uf_remappedPS[14].z),intBitsToFloat(uf_remappedPS[14].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R0i.y = tempi.x;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.w;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[15].x),intBitsToFloat(uf_remappedPS[15].y),intBitsToFloat(uf_remappedPS[15].z),intBitsToFloat(uf_remappedPS[15].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = floatBitsToInt(1.0 / intBitsToFloat(backupReg1i));
PS0i = R127i.z;
// 1
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[16].x),intBitsToFloat(uf_remappedPS[16].y),intBitsToFloat(uf_remappedPS[16].z),intBitsToFloat(uf_remappedPS[16].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R127i.w;
// 2
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[17].x),intBitsToFloat(uf_remappedPS[17].y),intBitsToFloat(uf_remappedPS[17].z),intBitsToFloat(uf_remappedPS[17].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PS1i)));
PS0i = R0i.x;
// 3
backupReg0i = R1i.x;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R127i.z)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R127i.w)));
R1i.z = floatBitsToInt(roundEven(intBitsToFloat(R1i.w)));
PV1i.w = floatBitsToInt(-(intBitsToFloat(R0i.z)) + -(intBitsToFloat(uf_remappedPS[18].x)));
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R127i.z)));
PS1i = R1i.x;
// 4
backupReg0i = R1i.y;
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[18].z), intBitsToFloat(PV1i.w)));
R2i.x = clampFI32(R2i.x);
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R127i.z)));
R1i.w = PV1i.x;
R1i.w = clampFI32(R1i.w);
R3i.x = uf_remappedPS[19].x;
PS0i = R3i.x;
}
if( activeMaskStackC[1] == true ) {
R0i.xy = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R0i.xy)).xy);
R1i.x = floatBitsToInt(texture(textureUnitPS1, vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w))));
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.w;
backupReg1i = R0i.x;
backupReg1i = R0i.x;
backupReg2i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(intBitsToFloat(uf_remappedPS[20].x),intBitsToFloat(uf_remappedPS[20].y),intBitsToFloat(uf_remappedPS[20].z),intBitsToFloat(uf_remappedPS[20].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(backupReg1i)),intBitsToFloat(backupReg1i)) + intBitsToFloat(backupReg2i)));
PS0i = R127i.z;
// 1
R3i.y = floatBitsToInt(intBitsToFloat(R1i.x) + intBitsToFloat(R2i.x));
PV1i.z = floatBitsToInt(min(intBitsToFloat(PV0i.x), 1.0));
R3i.w = uf_remappedPS[19].w;
// 2
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + -(intBitsToFloat(R0i.x)));
// 3
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.y)) + intBitsToFloat(R127i.z)));
PV1i.x = R123i.x;
R127i.y = floatBitsToInt((0.0 >= intBitsToFloat(PV0i.y))?1.0:0.0);
// 4
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
// 5
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS0i)));
// 6
PV0i.x = floatBitsToInt(max(intBitsToFloat(PV1i.z), intBitsToFloat(R127i.y)));
// 7
R3i.z = floatBitsToInt(min(intBitsToFloat(PV0i.x), 1.0));
}
// export
passPixelColor0 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
}
