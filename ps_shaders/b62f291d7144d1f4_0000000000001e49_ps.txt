#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader b62f291d7144d1f4
uniform ivec4 uf_remappedPS[4];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x1a480000 res 2048x580x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0xc) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x1a576000 res 1024x290x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x1a468000 res 256x256x1 dim 1 tm: 4 format 0033 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem3;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem3;
R2f.xyz = (texture(textureUnitPS2, R1f.zw).xyz);
R0f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
R1f.xyz = (texture(textureUnitPS1, R1f.xy).xyz);
// 0
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), R2f.z);
PV0f.x = R127f.x;
R127f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), R2f.y);
PV0f.y = R127f.y;
R127f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), R2f.x);
PV0f.z = R127f.z;
R2f.w = 1.0;
// 1
backupReg0f = R0f.y;
R126f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w), intBitsToFloat(uf_remappedPS[2].w));
PV1f.x = R126f.x;
PV1f.y = R0f.z + -(PV0f.x);
PV1f.z = backupReg0f + -(PV0f.y);
PV1f.w = R0f.x + -(PV0f.z);
// 2
backupReg0f = R127f.x;
backupReg1f = R127f.y;
R127f.x = (mul_nonIEEE(PV1f.w,intBitsToFloat(uf_remappedPS[0].w)) + R127f.z);
R127f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].x), PV1f.x);
R127f.z = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedPS[0].w)) + backupReg0f);
R127f.w = (mul_nonIEEE(PV1f.z,intBitsToFloat(uf_remappedPS[0].w)) + backupReg1f);
R126f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), PV1f.x);
PS0f = R126f.w;
// 3
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(uf_remappedPS[3].y));
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(uf_remappedPS[3].x));
// 4
R123f.y = (mul_nonIEEE(R127f.w,PV1f.x) + 0.0);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R127f.x,PV1f.y) + 0.0);
PV0f.z = R123f.z;
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(uf_remappedPS[3].z));
// 5
R123f.x = (mul_nonIEEE(R127f.z,PV0f.w) + 0.0);
PV1f.x = R123f.x;
R2f.y = (mul_nonIEEE(R126f.w,R1f.y) + PV0f.y);
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), R126f.x);
R2f.x = (mul_nonIEEE(R127f.y,R1f.x) + PV0f.z);
PS1f = R2f.x;
// 6
R2f.z = (mul_nonIEEE(PV1f.w,R1f.z) + PV1f.x);
// export
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
