#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader c78ff31e8455a293
uniform ivec4 uf_remappedPS[3];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x3edcd000 res 460x460x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x3e9e5800 res 230x460x1 dim 1 tm: 4 format 0007 compSel: 0 0 0 1 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 1 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R0i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.xy)).xyzw);
R1i.xyzw = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R1i.xy)).xyzw);
// 0
backupReg0i = R0i.y;
backupReg1i = R0i.x;
backupReg1i = R0i.x;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R1i.x)) + 1.0);
PV0i.y = backupReg0i;
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) * 2.0);
PV0i.z = backupReg1i;
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 2.0);
R127i.w = floatBitsToInt(-(intBitsToFloat(R1i.y)) + 1.0);
PS0i = floatBitsToInt(-(intBitsToFloat(backupReg1i)) + 1.0);
PS0i = floatBitsToInt(intBitsToFloat(PS0i) * 2.0);
// 1
PV1i.x = floatBitsToInt(-(intBitsToFloat(R0i.y)) + 1.0);
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * 2.0);
PV1i.y = R0i.z;
PV1i.y = floatBitsToInt(intBitsToFloat(PV1i.y) * 2.0);
R127i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(PS0i)) + 1.0));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PV0i.z)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PV0i.y)));
PS1i = R126i.z;
// 2
backupReg0i = R0i.x;
backupReg1i = R0i.z;
PV0i.x = ((0.5 > intBitsToFloat(backupReg0i))?int(0xFFFFFFFF):int(0x0));
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(PV1i.x)) + 1.0));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R1i.z)) + 1.0);
PV0i.w = floatBitsToInt(-(intBitsToFloat(backupReg1i)) + 1.0);
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(PV1i.y)));
PS0i = R127i.y;
// 3
R123i.x = ((PV0i.x == 0)?(R127i.z):(R126i.w));
PV1i.x = R123i.x;
R126i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.z)),intBitsToFloat(PV0i.w)) + 1.0));
PV1i.z = ((0.5 > intBitsToFloat(R0i.y))?int(0xFFFFFFFF):int(0x0));
PV1i.w = R126i.z;
PS1i = PV0i.y;
// 4
backupReg0i = R127i.y;
R123i.x = ((PV1i.z == 0)?(PS1i):(PV1i.w));
PV0i.x = R123i.x;
R127i.y = ((0.5 > intBitsToFloat(R0i.z))?int(0xFFFFFFFF):int(0x0));
PV0i.y = R127i.y;
R123i.z = ((PV1i.z == 0)?(PV1i.x):(PV1i.x));
PV0i.z = R123i.z;
R126i.w = uf_remappedPS[0].x & 0x00000080;
R127i.w = backupReg0i;
PS0i = R127i.w;
// 5
PV1i.x = floatBitsToInt(max(intBitsToFloat(R0i.w), intBitsToFloat(R1i.w)));
PV1i.y = floatBitsToInt(min(intBitsToFloat(R0i.w), intBitsToFloat(R1i.w)));
PV1i.z = R126i.y;
R123i.w = ((PV0i.y == 0)?(PV0i.z):(PV0i.z));
PV1i.w = R123i.w;
R122i.x = ((PV0i.y == 0)?(PV0i.x):(PV0i.x));
PS1i = R122i.x;
// 6
R123i.x = ((R126i.w == 0)?(PV1i.x):(PV1i.y));
PV0i.x = R123i.x;
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(uf_remappedPS[1].y)) + intBitsToFloat(uf_remappedPS[2].y)));
R123i.w = ((R127i.y == 0)?(PV1i.z):(R127i.w));
PV0i.w = R123i.w;
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(uf_remappedPS[1].x)) + intBitsToFloat(uf_remappedPS[2].x)));
PS0i = R0i.x;
// 7
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_remappedPS[1].z)) + intBitsToFloat(uf_remappedPS[2].z)));
R0i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[1].w)) + intBitsToFloat(uf_remappedPS[2].w)));
// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
}
