#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader c4df5653f235977e
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf494a800 res 320x180x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x4) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f.xyzw = (texture(textureUnitPS0, R1f.yx).xyzw);
R4f.xyzw = (texture(textureUnitPS0, R2f.yx).xyzw);
R5f.xyzw = (texture(textureUnitPS0, R0f.yx).xyzw);
R6f.xyzw = (texture(textureUnitPS0, R0f.wx).xyzw);
R0f.xyzw = (texture(textureUnitPS0, R0f.zx).xyzw);
R1f.xyzw = (texture(textureUnitPS0, R1f.zx).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R2f.zx).xyzw);
// 0
PV0f.x = R3f.w * intBitsToFloat(0x3d8f0000);
PV0f.y = R3f.z * intBitsToFloat(0x3d8f0000);
PV0f.z = R3f.y * intBitsToFloat(0x3d8f0000);
PV0f.w = R3f.x * intBitsToFloat(0x3d8f0000);
// 1
R123f.x = (R4f.w * intBitsToFloat(0x3b500000) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (R4f.z * intBitsToFloat(0x3b500000) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (R4f.y * intBitsToFloat(0x3b500000) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (R4f.x * intBitsToFloat(0x3b500000) + PV0f.w);
PV1f.w = R123f.w;
// 2
R123f.x = (R5f.w * intBitsToFloat(0x3ea0e000) + PV1f.x);
PV0f.x = R123f.x;
R123f.y = (R5f.z * intBitsToFloat(0x3ea0e000) + PV1f.y);
PV0f.y = R123f.y;
R123f.z = (R5f.y * intBitsToFloat(0x3ea0e000) + PV1f.z);
PV0f.z = R123f.z;
R123f.w = (R5f.x * intBitsToFloat(0x3ea0e000) + PV1f.w);
PV0f.w = R123f.w;
// 3
R123f.x = (R6f.w * intBitsToFloat(0x3e670000) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (R6f.z * intBitsToFloat(0x3e670000) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (R6f.y * intBitsToFloat(0x3e670000) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (R6f.x * intBitsToFloat(0x3e670000) + PV0f.w);
PV1f.w = R123f.w;
// 4
R123f.x = (R0f.w * intBitsToFloat(0x3ea0e000) + PV1f.x);
PV0f.x = R123f.x;
R123f.y = (R0f.z * intBitsToFloat(0x3ea0e000) + PV1f.y);
PV0f.y = R123f.y;
R123f.z = (R0f.y * intBitsToFloat(0x3ea0e000) + PV1f.z);
PV0f.z = R123f.z;
R123f.w = (R0f.x * intBitsToFloat(0x3ea0e000) + PV1f.w);
PV0f.w = R123f.w;
// 5
R123f.x = (R1f.w * intBitsToFloat(0x3d8f0000) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (R1f.z * intBitsToFloat(0x3d8f0000) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (R1f.y * intBitsToFloat(0x3d8f0000) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (R1f.x * intBitsToFloat(0x3d8f0000) + PV0f.w);
PV1f.w = R123f.w;
// 6
backupReg0f = R2f.x;
backupReg1f = R2f.y;
backupReg2f = R2f.z;
backupReg3f = R2f.w;
R2f.x = (backupReg0f * intBitsToFloat(0x3b500000) + PV1f.w);
R2f.y = (backupReg1f * intBitsToFloat(0x3b500000) + PV1f.z);
R2f.z = (backupReg2f * intBitsToFloat(0x3b500000) + PV1f.y);
R2f.w = (backupReg3f * intBitsToFloat(0x3b500000) + PV1f.x);
// export
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
