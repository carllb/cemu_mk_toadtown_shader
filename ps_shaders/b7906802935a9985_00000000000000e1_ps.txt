#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader b7906802935a9985
uniform ivec4 uf_remappedPS[1];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x22df2000 res 64x64x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x22df6000 res 128x128x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem3;
layout(location = 2) in vec4 passParameterSem6;
layout(location = 3) in vec4 passParameterSem10;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem3;
R2f = passParameterSem6;
R3f = passParameterSem10;
R1f.x = (texture(textureUnitPS0, R3f.xy).x);
// 0
backupReg0f = R0f.x;
backupReg1f = R0f.z;
PV0f.x = R0f.y * 1.0;
R123f.y = (R1f.x * 2.0 + -(1.0));
PV0f.y = R123f.y;
PV0f.z = intBitsToFloat(uf_remappedPS[0].y) * 1.0;
PV0f.w = backupReg0f * 1.0;
PS0f = backupReg1f * 1.0;
// 1
R4f.x = mul_nonIEEE(R2f.x, PV0f.w);
R1f.y = (mul_nonIEEE(R1f.w,PV0f.z) + R3f.w);
R4f.z = mul_nonIEEE(R2f.z, PS0f);
PV1f.w = mul_nonIEEE(PV0f.y, intBitsToFloat(uf_remappedPS[0].x));
R4f.y = mul_nonIEEE(R2f.y, PV0f.x);
PS1f = R4f.y;
// 2
R1f.x = (mul_nonIEEE(R1f.w,PV1f.w) + R3f.z);
R1f.x = (texture(textureUnitPS1, R1f.xy).w);
// 0
PV0f.x = mul_nonIEEE(R2f.w, R1f.x);
// 1
R4f.w = mul_nonIEEE(R0f.w, PV0f.x);
R4f.w = clamp(R4f.w, 0.0, 1.0);
// export
if( ((vec4(R4f.x, R4f.y, R4f.z, R4f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
}
