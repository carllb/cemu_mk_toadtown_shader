#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 511cbae23dd8f2fa
uniform ivec4 uf_remappedPS[1];
layout(binding = 6) uniform sampler2D textureUnitPS6;// Tex6 addr 0x43914000 res 576x1536x1 dim 1 tm: 4 format 0235 compSel: 0 1 4 5 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x1) Sampler6 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 1) out vec4 passPixelColor1;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R0f.xy = (texture(textureUnitPS6, R0f.xy).xy);
// 0
backupReg0f = R0f.x;
backupReg0f = R0f.x;
backupReg0f = R0f.x;
PV0f.x = mul_nonIEEE(R1f.z, R2f.y);
PV0f.y = mul_nonIEEE(R1f.x, R2f.z);
PV0f.z = mul_nonIEEE(backupReg0f, backupReg0f);
PV0f.w = mul_nonIEEE(R1f.y, R2f.x);
R127f.y = mul_nonIEEE(R1f.x, backupReg0f);
PS0f = R127f.y;
// 1
R123f.x = (mul_nonIEEE(-(R1f.x),R2f.y) + PV0f.w);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R0f.y,R0f.y) + PV0f.z);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(-(R1f.z),R2f.x) + PV0f.y);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(-(R1f.y),R2f.z) + PV0f.x);
PV1f.w = R123f.w;
R127f.x = mul_nonIEEE(R1f.y, R0f.x);
PS1f = R127f.x;
// 2
backupReg0f = R0f.x;
PV0f.x = -(PV1f.y) + 1.0;
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
PV0f.y = mul_nonIEEE(R1f.w, PV1f.w);
PV0f.z = mul_nonIEEE(R1f.w, PV1f.x);
PV0f.w = mul_nonIEEE(R1f.w, PV1f.z);
PS0f = mul_nonIEEE(R1f.z, backupReg0f);
// 3
R123f.y = (mul_nonIEEE(R0f.y,PV0f.w) + R127f.x);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R0f.y,PV0f.y) + R127f.y);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R0f.y,PV0f.z) + PS0f);
PV1f.w = R123f.w;
PS1f = sqrt(PV0f.x);
// 4
R127f.x = (mul_nonIEEE(R2f.x,PS1f) + PV1f.z);
PV0f.x = R127f.x;
R127f.y = (mul_nonIEEE(R2f.y,PS1f) + PV1f.y);
PV0f.y = R127f.y;
R127f.z = (mul_nonIEEE(R2f.z,PS1f) + PV1f.w);
PV0f.z = R127f.z;
R2f.w = intBitsToFloat(uf_remappedPS[0].x);
// 5
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
// 6
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
PS0f /= 2.0;
// 7
PV1f.x = mul_nonIEEE(R127f.z, PS0f);
PV1f.y = mul_nonIEEE(R127f.y, PS0f);
PV1f.z = mul_nonIEEE(R127f.x, PS0f);
// 8
R2f.x = (PV1f.z * 1.0 + 0.5);
R2f.y = (PV1f.y * 1.0 + 0.5);
R2f.z = (PV1f.x * 1.0 + 0.5);
// export
passPixelColor1 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
