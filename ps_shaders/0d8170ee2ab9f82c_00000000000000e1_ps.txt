#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 0d8170ee2ab9f82c
uniform ivec4 uf_remappedPS[2];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x22e08000 res 64x64x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x22e1c000 res 128x128x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem6;
layout(location = 4) in vec4 passParameterSem10;
layout(location = 5) in vec4 passParameterSem14;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem3;
R3f = passParameterSem6;
R4f = passParameterSem10;
R5f = passParameterSem14;
R6f.xw = (texture(textureUnitPS0, R4f.xy).xw);
// 0
backupReg0f = R0f.y;
R123f.x = (R6f.x * 2.0 + -(1.0));
PV0f.x = R123f.x;
PV0f.y = -(intBitsToFloat(uf_remappedPS[0].x)) + intBitsToFloat(uf_remappedPS[0].y);
R123f.z = (R6f.w * 2.0 + -(1.0));
PV0f.z = R123f.z;
R6f.w = R0f.x + -(R1f.x);
R7f.x = backupReg0f + -(R1f.y);
PS0f = R7f.x;
// 1
R8f.x = R0f.z + -(R1f.z);
PV1f.y = R2f.z * R2f.z;
R127f.z = mul_nonIEEE(PV0f.z, intBitsToFloat(uf_remappedPS[1].y));
PV1f.w = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[1].x));
R9f.x = 1.0 / PV0f.y;
PS1f = R9f.x;
// 2
tempf.x = dot(vec4(R2f.x,R2f.y,PV1f.y,-0.0),vec4(R2f.x,R2f.y,1.0,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R6f.x = (mul_nonIEEE(R2f.w,PV1f.w) + R4f.z);
PS0f = R6f.x;
// 3
R6f.y = (mul_nonIEEE(R2f.w,R127f.z) + R4f.w);
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 4
backupReg0f = R2f.x;
backupReg1f = R2f.y;
backupReg2f = R2f.z;
R2f.x = mul_nonIEEE(backupReg0f, PS1f);
R2f.y = mul_nonIEEE(backupReg1f, PS1f);
R2f.z = mul_nonIEEE(backupReg2f, PS1f);
R4f.xyzw = (texture(textureUnitPS1, R6f.xy).xyzw);
// 0
tempf.x = dot(vec4(R5f.x,R5f.y,R5f.z,-0.0),vec4(R2f.x,R2f.y,R2f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = mul_nonIEEE(R3f.w, R4f.w);
// 1
R127f.x = mul_nonIEEE(R0f.w, PS0f);
R123f.y = (mul_nonIEEE(R7f.x,R4f.y) + R1f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R6f.w,R4f.x) + R1f.x);
PV1f.z = R123f.z;
PV1f.w = max(PV0f.x, -(PV0f.x));
// 2
R1f.x = mul_nonIEEE(R3f.x, PV1f.z);
R1f.y = mul_nonIEEE(R3f.y, PV1f.y);
PV0f.z = PV1f.w + -(intBitsToFloat(uf_remappedPS[0].x));
R123f.w = (mul_nonIEEE(R8f.x,R4f.z) + R1f.z);
PV0f.w = R123f.w;
// 3
R1f.z = mul_nonIEEE(R3f.z, PV0f.w);
PV1f.w = PV0f.z * R9f.x;
PV1f.w = clamp(PV1f.w, 0.0, 1.0);
// 4
R123f.y = (-(2.0) * PV1f.w + intBitsToFloat(0x40400000));
PV0f.y = R123f.y;
PV0f.z = mul_nonIEEE(PV1f.w, PV1f.w);
// 5
PV1f.x = mul_nonIEEE(PV0f.z, PV0f.y);
// 6
R1f.w = mul_nonIEEE(R127f.x, PV1f.x);
R1f.w = clamp(R1f.w, 0.0, 1.0);
// export
if( ((vec4(R1f.x, R1f.y, R1f.z, R1f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
}
