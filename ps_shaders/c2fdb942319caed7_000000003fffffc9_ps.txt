#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader c2fdb942319caed7
uniform ivec4 uf_remappedPS[8];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x3f7e9000 res 128x32x1 dim 1 tm: 4 format 0001 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x3f854000 res 32x32x1 dim 1 tm: 4 format 0823 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 4) out vec4 passPixelColor4;
layout(location = 5) out vec4 passPixelColor5;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R15f = vec4(0.0);
vec4 R16f = vec4(0.0);
vec4 R17f = vec4(0.0);
vec4 R18f = vec4(0.0);
vec4 R19f = vec4(0.0);
vec4 R20f = vec4(0.0);
vec4 R21f = vec4(0.0);
vec4 R22f = vec4(0.0);
vec4 R23f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R0f.xyz = (texture(textureUnitPS1, R0f.xy).xyz);
// 0
R127f.xyz = vec3(-(R0f.x),R0f.y,-(R0f.z));
R127f.w = R0f.y;
R126f.z = R0f.z;
PS0f = R126f.z;
// 1
R126f.x = -(R0f.z);
R126f.y = R0f.x;
R125f.z = R0f.y;
R126f.w = R0f.y;
R124f.z = -(R0f.x);
PS1f = R124f.z;
// 2
backupReg0f = R0f.x;
tempf.x = dot(vec4(backupReg0f,R127f.y,R127f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0));
tempf.x /= 2.0;
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = mul_nonIEEE(R126f.z, intBitsToFloat(uf_remappedPS[0].z));
// 3
tempf.x = dot(vec4(R127f.x,R127f.w,PS0f,-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),1.0,0.0));
tempf.x /= 2.0;
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R1f.x = -(PV0f.x) + 0.5;
PS1f = R1f.x;
// 4
tempf.x = dot(vec4(R126f.x,R126f.y,R125f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0));
tempf.x /= 2.0;
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R2f.x = -(PV1f.x) + 0.5;
PS0f = R2f.x;
// 5
backupReg0f = R0f.x;
backupReg1f = R0f.y;
tempf.x = dot(vec4(-(R0f.z),-(backupReg0f),-(backupReg1f),-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0));
tempf.x /= 2.0;
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R3f.x = -(PV0f.x) + 0.5;
PS1f = R3f.x;
// 6
tempf.x = dot(vec4(R126f.x,R126f.w,R124f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0));
tempf.x /= 2.0;
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R4f.x = -(PV1f.x) + 0.5;
PS0f = R4f.x;
// 7
backupReg0f = R0f.y;
backupReg1f = R0f.x;
tempf.x = dot(vec4(R0f.z,backupReg0f,backupReg1f,-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0));
tempf.x /= 2.0;
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R5f.x = -(PV0f.x) + 0.5;
PS1f = R5f.x;
// 8
backupReg0f = R0f.x;
tempf.x = dot(vec4(backupReg0f,R127f.y,R127f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),0.0));
tempf.x /= 2.0;
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R6f.x = -(PV1f.x) + 0.5;
PS0f = R6f.x;
// 9
tempf.x = dot(vec4(R127f.x,R127f.w,R126f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),0.0));
tempf.x /= 2.0;
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R7f.x = -(PV0f.x) + 0.5;
PS1f = R7f.x;
// 10
tempf.x = dot(vec4(R126f.x,R126f.y,R125f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),0.0));
tempf.x /= 2.0;
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R8f.x = -(PV1f.x) + 0.5;
PS0f = R8f.x;
// 11
backupReg0f = R0f.x;
backupReg1f = R0f.y;
tempf.x = dot(vec4(-(R0f.z),-(backupReg0f),-(backupReg1f),-0.0),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),0.0));
tempf.x /= 2.0;
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R9f.x = -(PV0f.x) + 0.5;
PS1f = R9f.x;
// 12
tempf.x = dot(vec4(R126f.x,R126f.w,R124f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),0.0));
tempf.x /= 2.0;
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R10f.x = -(PV1f.x) + 0.5;
PS0f = R10f.x;
// 13
backupReg0f = R0f.y;
backupReg1f = R0f.x;
tempf.x = dot(vec4(R0f.z,backupReg0f,backupReg1f,-0.0),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),0.0));
tempf.x /= 2.0;
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.x = -(PV0f.x) + 0.5;
PS1f = R0f.x;
// 14
R11f.x = -(PV1f.x) + 0.5;
R1f.y = intBitsToFloat(uf_remappedPS[2].x);
R2f.z = intBitsToFloat(uf_remappedPS[2].x);
R3f.w = intBitsToFloat(uf_remappedPS[2].x);
R4f.y = intBitsToFloat(uf_remappedPS[2].x);
PS0f = R4f.y;
// 15
R12f.x = R1f.x;
R5f.y = intBitsToFloat(uf_remappedPS[2].x);
R6f.z = intBitsToFloat(uf_remappedPS[2].x);
R7f.w = intBitsToFloat(uf_remappedPS[3].x);
R8f.y = intBitsToFloat(uf_remappedPS[3].x);
PS1f = R8f.y;
R1f.xyz = (texture(textureUnitPS0, R1f.xy).xxx);
R13f.xyz = (texture(textureUnitPS0, R2f.xz).xxx);
R14f.xyz = (texture(textureUnitPS0, R3f.xw).xxx);
R15f.xyz = (texture(textureUnitPS0, R4f.xy).xxx);
R16f.xyz = (texture(textureUnitPS0, R5f.xy).xxx);
R17f.xyz = (texture(textureUnitPS0, R6f.xz).xxx);
R18f.xyz = (texture(textureUnitPS0, R7f.xw).xxx);
R19f.xyz = (texture(textureUnitPS0, R8f.xy).xxx);
// 0
R9f.y = intBitsToFloat(uf_remappedPS[3].x);
R10f.z = intBitsToFloat(uf_remappedPS[3].x);
R0f.w = intBitsToFloat(uf_remappedPS[3].x);
R11f.y = intBitsToFloat(uf_remappedPS[3].x);
PS0f = R11f.y;
R20f.xyz = (texture(textureUnitPS0, R9f.xy).xxx);
R21f.xyz = (texture(textureUnitPS0, R10f.xz).xxx);
R22f.xyz = (texture(textureUnitPS0, R0f.xw).xxx);
R23f.xyz = (texture(textureUnitPS0, R11f.xy).xxx);
// 0
R126f.x = R3f.x;
R4f.y = R4f.x;
R125f.z = intBitsToFloat(uf_remappedPS[4].x) + -(intBitsToFloat(uf_remappedPS[5].x));
R127f.w = intBitsToFloat(uf_remappedPS[4].y) + -(intBitsToFloat(uf_remappedPS[5].y));
R2f.z = R5f.x;
PS0f = R2f.z;
// 1
R126f.y = intBitsToFloat(uf_remappedPS[4].z) + -(intBitsToFloat(uf_remappedPS[5].z));
R124f.z = R7f.x;
R126f.w = R8f.x;
// 2
R127f.x = R9f.x;
R9f.y = R10f.x;
R126f.z = intBitsToFloat(uf_remappedPS[6].x) + -(intBitsToFloat(uf_remappedPS[7].x));
R125f.w = intBitsToFloat(uf_remappedPS[6].y) + -(intBitsToFloat(uf_remappedPS[7].y));
R10f.z = R0f.x;
PS0f = R10f.z;
// 3
backupReg0f = R2f.x;
R2f.x = R11f.x;
R127f.y = intBitsToFloat(uf_remappedPS[6].z) + -(intBitsToFloat(uf_remappedPS[7].z));
R12f.w = R12f.x + R124f.z;
R11f.w = backupReg0f + R126f.w;
PS1f = R11f.w;
// 4
R125f.x = (mul_nonIEEE(R125f.z,R1f.x) + intBitsToFloat(uf_remappedPS[5].x));
R125f.y = (mul_nonIEEE(R125f.z,R13f.x) + intBitsToFloat(uf_remappedPS[5].x));
R124f.z = (mul_nonIEEE(R127f.w,R1f.y) + intBitsToFloat(uf_remappedPS[5].y));
R126f.w = (mul_nonIEEE(R126f.y,R1f.z) + intBitsToFloat(uf_remappedPS[5].z));
R124f.x = (mul_nonIEEE(R127f.w,R13f.y) + intBitsToFloat(uf_remappedPS[5].y));
PS0f = R124f.x;
// 5
R13f.x = (mul_nonIEEE(R127f.w,R14f.y) + intBitsToFloat(uf_remappedPS[5].y));
R124f.y = (mul_nonIEEE(R125f.z,R14f.x) + intBitsToFloat(uf_remappedPS[5].x));
R127f.z = (mul_nonIEEE(R126f.y,R14f.z) + intBitsToFloat(uf_remappedPS[5].z));
R124f.w = (mul_nonIEEE(R126f.y,R13f.z) + intBitsToFloat(uf_remappedPS[5].z));
R13f.z = (mul_nonIEEE(R125f.z,R15f.x) + intBitsToFloat(uf_remappedPS[5].x));
PS1f = R13f.z;
// 6
backupReg0f = R15f.y;
R15f.x = (mul_nonIEEE(R126f.y,R15f.z) + intBitsToFloat(uf_remappedPS[5].z));
R15f.y = (mul_nonIEEE(R127f.w,backupReg0f) + intBitsToFloat(uf_remappedPS[5].y));
R15f.z = (mul_nonIEEE(R127f.w,R16f.y) + intBitsToFloat(uf_remappedPS[5].y));
R7f.w = (mul_nonIEEE(R125f.z,R16f.x) + intBitsToFloat(uf_remappedPS[5].x));
R16f.x = (mul_nonIEEE(R126f.y,R16f.z) + intBitsToFloat(uf_remappedPS[5].z));
PS0f = R16f.x;
// 7
backupReg0f = R17f.y;
R17f.y = (mul_nonIEEE(R126f.y,R17f.z) + intBitsToFloat(uf_remappedPS[5].z));
R17f.z = (mul_nonIEEE(R127f.w,backupReg0f) + intBitsToFloat(uf_remappedPS[5].y));
R1f.w = (mul_nonIEEE(R125f.z,R17f.x) + intBitsToFloat(uf_remappedPS[5].x));
R14f.w = R126f.x + R127f.x;
PS1f = R14f.w;
// 8
R127f.x = (mul_nonIEEE(R126f.z,R18f.x) + intBitsToFloat(uf_remappedPS[7].x));
R126f.y = (mul_nonIEEE(R126f.z,R19f.x) + intBitsToFloat(uf_remappedPS[7].x));
R125f.z = (mul_nonIEEE(R125f.w,R18f.y) + intBitsToFloat(uf_remappedPS[7].y));
R127f.w = (mul_nonIEEE(R127f.y,R18f.z) + intBitsToFloat(uf_remappedPS[7].z));
R126f.x = (mul_nonIEEE(R125f.w,R19f.y) + intBitsToFloat(uf_remappedPS[7].y));
PS0f = R126f.x;
// 9
backupReg0f = R19f.z;
R19f.x = (mul_nonIEEE(R125f.w,R20f.y) + intBitsToFloat(uf_remappedPS[7].y));
R19f.y = (mul_nonIEEE(R126f.z,R20f.x) + intBitsToFloat(uf_remappedPS[7].x));
R19f.z = (mul_nonIEEE(R127f.y,R20f.z) + intBitsToFloat(uf_remappedPS[7].z));
R0f.w = (mul_nonIEEE(R127f.y,backupReg0f) + intBitsToFloat(uf_remappedPS[7].z));
R20f.z = (mul_nonIEEE(R126f.z,R21f.x) + intBitsToFloat(uf_remappedPS[7].x));
PS1f = R20f.z;
// 10
backupReg0f = R21f.y;
R21f.x = (mul_nonIEEE(R127f.y,R21f.z) + intBitsToFloat(uf_remappedPS[7].z));
R21f.y = (mul_nonIEEE(R125f.w,backupReg0f) + intBitsToFloat(uf_remappedPS[7].y));
R21f.z = (mul_nonIEEE(R125f.w,R22f.y) + intBitsToFloat(uf_remappedPS[7].y));
R3f.w = (mul_nonIEEE(R126f.z,R22f.x) + intBitsToFloat(uf_remappedPS[7].x));
R22f.x = (mul_nonIEEE(R127f.y,R22f.z) + intBitsToFloat(uf_remappedPS[7].z));
PS0f = R22f.x;
// 11
backupReg0f = R127f.y;
backupReg1f = R126f.z;
backupReg2f = R127f.w;
R12f.x = R125f.x + R127f.x;
R127f.y = (mul_nonIEEE(backupReg0f,R23f.z) + intBitsToFloat(uf_remappedPS[7].z));
R126f.z = (mul_nonIEEE(R125f.w,R23f.y) + intBitsToFloat(uf_remappedPS[7].y));
R127f.w = (mul_nonIEEE(backupReg1f,R23f.x) + intBitsToFloat(uf_remappedPS[7].x));
R12f.z = R126f.w + backupReg2f;
PS1f = R12f.z;
// 12
R11f.x = R125f.y + R126f.y;
R12f.y = R124f.z + R125f.z;
R11f.z = R124f.w + R0f.w;
R11f.y = R124f.x + R126f.x;
PS0f = R11f.y;
// 13
R14f.xyz = vec3(R124f.y,R13f.x,R127f.z) + vec3(R19f.y,R19f.x,R19f.z);
R3f.x = R7f.w + R3f.w;
PS1f = R3f.x;
// 14
R13f.xyz = vec3(R13f.z,R15f.y,R15f.x) + vec3(R20f.z,R21f.y,R21f.x);
R1f.x = R1f.w + R127f.w;
PS0f = R1f.x;
// 15
R3f.y = R15f.z + R21f.z;
R3f.z = R16f.x + R22f.x;
R13f.w = R4f.y + R9f.y;
// 16
R1f.z = R17f.y + R127f.y;
R3f.w = R2f.z + R10f.z;
R1f.w = R6f.x + R2f.x;
PS0f = R1f.w;
// 17
R1f.y = R17f.z + R126f.z;
PV1f.y = R1f.y;
// 18
R9f.xyz = vec3(R1f.x,PV1f.y,R1f.z);
R9f.w = R1f.w;
// 19
R8f.xyz = vec3(R3f.x,R3f.y,R3f.z);
R8f.w = R3f.w;
// 20
R7f.xyz = vec3(R13f.x,R13f.y,R13f.z);
R7f.w = R13f.w;
// 21
R6f.xyz = vec3(R14f.x,R14f.y,R14f.z);
R6f.w = R14f.w;
// 22
R5f.xyz = vec3(R11f.x,R11f.y,R11f.z);
R5f.w = R11f.w;
// 23
R4f.xyz = vec3(R12f.x,R12f.y,R12f.z);
R4f.w = R12f.w;
// export
passPixelColor0 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
passPixelColor1 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
passPixelColor2 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
passPixelColor3 = vec4(R7f.x, R7f.y, R7f.z, R7f.w);
passPixelColor4 = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
passPixelColor5 = vec4(R9f.x, R9f.y, R9f.z, R9f.w);
}
