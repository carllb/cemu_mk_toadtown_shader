#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 2957fb1515d6820b
uniform ivec4 uf_remappedPS[3];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x13e17800 res 256x304x1 dim 1 tm: 1 format 0007 compSel: 0 1 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x13dcb800 res 512x608x1 dim 1 tm: 1 format 0001 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f.yz = (texture(textureUnitPS0, R0f.xy).xy);
R0f.w = (texture(textureUnitPS1, R0f.xy).x);
// 0
R127f.x = 0.0;
PV0f.y = R1f.z + -(0.5);
PV0f.z = R1f.y + -(0.5);
R127f.w = R0f.w + intBitsToFloat(0xbd808081);
R126f.x = 0.0;
PS0f = R126f.x;
// 1
PV1f.x = PV0f.z * intBitsToFloat(0xbec83127);
R127f.y = PV0f.y * intBitsToFloat(0x3fcc49ba);
R127f.z = PV0f.y * intBitsToFloat(0xbf5020c5);
PV1f.w = PV0f.z * intBitsToFloat(0x400126e9);
R125f.x = intBitsToFloat(uf_remappedPS[0].x);
PS1f = R125f.x;
// 2
R123f.x = (R127f.w * intBitsToFloat(0x3f94fdf4) + PV1f.w);
PV0f.x = R123f.x;
R123f.y = (R127f.w * intBitsToFloat(0x3f94fdf4) + PV1f.x);
PV0f.y = R123f.y;
R123f.z = (R127f.w * intBitsToFloat(0x3f94fdf4) + R127f.x);
PV0f.z = R123f.z;
PV0f.w = -(PS1f) + intBitsToFloat(uf_remappedPS[1].w);
// 3
backupReg0f = R127f.z;
backupReg1f = R127f.y;
R127f.yzw = vec3(R126f.x,backupReg0f,backupReg1f) + vec3(PV0f.x,PV0f.y,PV0f.z);
PV1f.y = R127f.y;
PV1f.z = R127f.z;
PV1f.w = R127f.w;
R0f.w = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[2].x)) + R125f.x);
PS1f = R0f.w;
// 4
PV0f.y = -(PV1f.y) + intBitsToFloat(uf_remappedPS[1].z);
PV0f.z = -(PV1f.z) + intBitsToFloat(uf_remappedPS[1].y);
PV0f.w = -(PV1f.w) + intBitsToFloat(uf_remappedPS[1].x);
// 5
R0f.x = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[2].x)) + R127f.w);
R0f.y = (mul_nonIEEE(PV0f.z,intBitsToFloat(uf_remappedPS[2].x)) + R127f.z);
R0f.z = (mul_nonIEEE(PV0f.y,intBitsToFloat(uf_remappedPS[2].x)) + R127f.y);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
