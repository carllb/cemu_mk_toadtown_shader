#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 8fd54c213058915a
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf494a800 res 320x180x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x4) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4240800 res 1280x720x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f.xyzw = (texture(textureUnitPS1, R1f.xy).xyzw);
R1f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
// 0
R127f.x = mul_nonIEEE(R0f.w, R2f.x);
PV0f.x = R127f.x;
R127f.y = mul_nonIEEE(R0f.w, R2f.y);
PV0f.y = R127f.y;
R127f.z = mul_nonIEEE(R0f.w, R2f.z);
PV0f.z = R127f.z;
R0f.w = R2f.w;
// 1
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
tempf.x = clamp(tempf.x, 0.0, 1.0);
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
// 2
R123f.x = (mul_nonIEEE(R1f.x,-(PV1f.x)) + R1f.x);
PV0f.x = R123f.x;
R123f.z = (mul_nonIEEE(R1f.z,-(PV1f.x)) + R1f.z);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R1f.y,-(PV1f.x)) + R1f.y);
PV0f.w = R123f.w;
// 3
R126f.x = R127f.y + PV0f.w;
PV1f.x = R126f.x;
R127f.y = R127f.x + PV0f.x;
PV1f.y = R127f.y;
R127f.w = R127f.z + PV0f.z;
PV1f.w = R127f.w;
// 4
R127f.x = PV1f.w * intBitsToFloat(0x40c66666);
PV0f.x = R127f.x;
PV0f.y = PV1f.x * intBitsToFloat(0x40c66666);
PV0f.z = PV1f.y * intBitsToFloat(0x40c66666);
// 5
PV1f.x = PV0f.z + 0.5;
PV1f.y = PV0f.x + intBitsToFloat(0x3fd9999a);
PV1f.z = PV0f.y + intBitsToFloat(0x3fd9999a);
PV1f.w = PV0f.z + intBitsToFloat(0x3fd9999a);
R125f.x = PV0f.y + 0.5;
PS1f = R125f.x;
// 6
R123f.x = (mul_nonIEEE(R127f.y,PV1f.w) + intBitsToFloat(0x3d75c28f));
PV0f.x = R123f.x;
PV0f.y = R127f.x + 0.5;
R126f.z = (mul_nonIEEE(R127f.w,PV1f.y) + intBitsToFloat(0x3d75c28f));
R126f.w = (mul_nonIEEE(R126f.x,PV1f.z) + intBitsToFloat(0x3d75c28f));
R127f.z = mul_nonIEEE(R127f.y, PV1f.x);
PS0f = R127f.z;
// 7
backupReg0f = R125f.x;
R125f.x = mul_nonIEEE(R127f.w, PV0f.y);
R127f.y = mul_nonIEEE(R126f.x, backupReg0f);
PS1f = 1.0 / PV0f.x;
// 8
R126f.x = mul_nonIEEE(R127f.z, PS1f);
PS0f = 1.0 / R126f.w;
// 9
R126f.w = mul_nonIEEE(R127f.y, PS0f);
PS1f = 1.0 / R126f.z;
// 10
R126f.z = mul_nonIEEE(R125f.x, PS1f);
tempResultf = log2(R126f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 11
R126f.x = PS0f * intBitsToFloat(0x400ccccd);
tempResultf = log2(R126f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 12
backupReg0f = R126f.z;
R126f.z = PS1f * intBitsToFloat(0x400ccccd);
tempResultf = log2(backupReg0f);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 13
backupReg0f = R126f.x;
R126f.x = PS0f * intBitsToFloat(0x400ccccd);
R0f.x = exp2(backupReg0f);
PS1f = R0f.x;
// 14
R0f.y = exp2(R126f.z);
PS0f = R0f.y;
// 15
R0f.z = exp2(R126f.x);
PS1f = R0f.z;
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
