#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 088f90ee1191220e
uniform ivec4 uf_remappedPS[5];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf50cf800 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4d4b000 res 1280x720x1 dim 1 tm: 4 format 0019 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x4000c000 res 256x1x1 dim 1 tm: 4 format 0810 compSel: 0 1 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 1 1 1 border: 1
layout(location = 0) noperspective in vec4 passParameterSem0;
layout(location = 1) noperspective in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R1f.z = (texture(textureUnitPS0, R1f.xy).x);
R2f.xyzw = (texture(textureUnitPS1, R1f.xy).xyzw);
// 0
R3f.x = (R2f.x * 2.0 + -(1.0));
R5f.y = (R2f.y * 2.0 + -(1.0));
R4f.z = (R2f.z * 2.0 + -(1.0));
R123f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),R1f.z) + intBitsToFloat(uf_remappedPS[0].x));
PV0f.w = R123f.w;
R122f.x = (mul_nonIEEE(R0f.x,R0f.x) + 1.0);
PS0f = R122f.x;
// 1
R127f.x = (mul_nonIEEE(R0f.x,-(PV0f.w)) + -(intBitsToFloat(uf_remappedPS[1].x)));
PV1f.x = R127f.x;
R127f.y = (mul_nonIEEE(R0f.y,-(PV0f.w)) + -(intBitsToFloat(uf_remappedPS[1].y)));
R127f.z = (mul_nonIEEE(R0f.z,-(PV0f.w)) + -(intBitsToFloat(uf_remappedPS[1].z)));
R123f.w = (mul_nonIEEE(R0f.y,R0f.y) + PS0f);
PV1f.w = R123f.w;
R1f.y = 0.0;
PS1f = R1f.y;
// 2
backupReg0f = R0f.y;
R1f.x = R2f.w;
PV0f.y = mul_nonIEEE(-(R3f.x), PV1f.x);
R2f.z = backupReg0f + -(intBitsToFloat(uf_remappedPS[2].y));
R126f.w = R0f.x + -(intBitsToFloat(uf_remappedPS[2].x));
tempResultf = 1.0 / sqrt(PV1f.w);
R127f.w = tempResultf;
PS0f = R127f.w;
// 3
R126f.x = dot(vec4(R127f.x,R127f.y,R127f.z,-0.0),vec4(R127f.x,R127f.y,R127f.z,0.0));
PV1f.x = R126f.x;
PV1f.y = R126f.x;
PV1f.z = R126f.x;
PV1f.w = R126f.x;
R122f.x = (mul_nonIEEE(-(R5f.y),R127f.y) + PV0f.y);
PS1f = R122f.x;
// 4
R4f.x = mul_nonIEEE(-(R0f.x), R127f.w);
R6f.y = mul_nonIEEE(-(R0f.y), R127f.w);
R3f.z = mul_nonIEEE(-(R0f.z), R127f.w);
R123f.w = (mul_nonIEEE(-(R4f.z),R127f.z) + PS1f);
PV0f.w = R123f.w;
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 5
R2f.x = mul_nonIEEE(R127f.x, PS0f);
R4f.y = mul_nonIEEE(R127f.y, PS0f);
PV1f.z = mul_nonIEEE(PS0f, -(PV0f.w));
R0f.w = mul_nonIEEE(R127f.z, PS0f);
PS1f = sqrt(R126f.x);
// 6
PV0f.x = PV1f.z;
PV0f.x *= 2.0;
R2f.y = mul_nonIEEE(R126f.w, R126f.w);
R1f.z = (mul_nonIEEE(-(PS1f),intBitsToFloat(uf_remappedPS[3].w)) + 1.0);
R1f.z = clamp(R1f.z, 0.0, 1.0);
PV0f.z = R1f.z;
R1f.w = PV1f.z;
R1f.w = clamp(R1f.w, 0.0, 1.0);
PS0f = mul_nonIEEE(-(R4f.z), R3f.z);
// 7
R0f.x = (mul_nonIEEE(-(R5f.y),R6f.y) + PS0f);
R0f.y = (mul_nonIEEE(R4f.z,PV0f.x) + -(R0f.w));
R0f.z = (mul_nonIEEE(R5f.y,PV0f.x) + -(R4f.y));
R2f.w = (mul_nonIEEE(R3f.x,PV0f.x) + -(R2f.x));
tempResultf = log2(PV0f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R3f.y = tempResultf;
PS1f = R3f.y;
R1f.xy = (texture(textureUnitPS2, R1f.xy).xy);
// 0
R127f.xyz = vec3(-(R4f.x),-(R6f.y),-(R3f.z)) + vec3(R2f.w,R0f.z,R0f.y);
PV0f.x = R127f.x;
PV0f.y = R127f.y;
PV0f.z = R127f.z;
R126f.w = (mul_nonIEEE(-(R3f.x),R4f.x) + R0f.x);
R126f.x = (mul_nonIEEE(R2f.z,R2f.z) + R2f.y);
PS0f = R126f.x;
// 1
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w), R3f.y);
PS1f = R125f.x;
// 2
tempf.x = dot(vec4(-(R3f.x),-(R5f.y),-(R4f.z),-0.0),vec4(-(R2f.x),-(R4f.y),-(R0f.w),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 3
backupReg0f = R127f.x;
backupReg1f = R127f.y;
backupReg2f = R127f.z;
backupReg3f = R126f.w;
R127f.x = mul_nonIEEE(backupReg0f, PS0f);
PV1f.x = R127f.x;
R127f.y = mul_nonIEEE(backupReg1f, PS0f);
R127f.z = mul_nonIEEE(backupReg2f, PS0f);
PV1f.z = R127f.z;
R126f.w = min(backupReg3f, PV0f.x);
R126f.w *= 2.0;
R122f.x = (mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[2].z)),R126f.x) + 1.0);
R122f.x = clamp(R122f.x, 0.0, 1.0);
PS1f = R122f.x;
// 4
backupReg0f = R125f.x;
R125f.x = mul_nonIEEE(R1f.z, PS1f);
PV0f.y = mul_nonIEEE(-(R3f.z), PV1f.z);
PV0f.w = mul_nonIEEE(R3f.x, PV1f.x);
PS0f = exp2(backupReg0f);
// 5
backupReg0f = R127f.y;
R123f.x = (mul_nonIEEE(-(R6f.y),R127f.y) + PV0f.y);
PV1f.x = R123f.x;
R127f.y = mul_nonIEEE(PS0f, R1f.w);
PV1f.y = R127f.y;
R123f.z = (mul_nonIEEE(R5f.y,backupReg0f) + PV0f.w);
PV1f.z = R123f.z;
// 6
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(-(R4f.x),backupReg0f) + PV1f.x);
R123f.y = (mul_nonIEEE(R4f.z,R127f.z) + PV1f.z);
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV0f.y = R123f.y;
R127f.z = mul_nonIEEE(R1f.y, R125f.x);
R4f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].x), PV1f.y);
R4f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].y), PV1f.y);
PS0f = R4f.y;
// 7
backupReg0f = R127f.y;
R127f.y = mul_nonIEEE(PV0f.y, R126f.w);
R4f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].z), backupReg0f);
tempResultf = log2(PV0f.y);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 8
PV0f.x = mul_nonIEEE(R1f.x, PS1f);
PS0f = 1.0 / R127f.x;
// 9
PV1f.z = mul_nonIEEE(R127f.y, PS0f);
PV1f.z = clamp(PV1f.z, 0.0, 1.0);
PS1f = exp2(PV0f.x);
// 10
PV0f.z = mul_nonIEEE(PV1f.z, PS1f);
// 11
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].y), PV0f.z);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].x), PV0f.z);
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].z), PV0f.z);
// 12
R1f.x = mul_nonIEEE(R127f.z, PV1f.y);
PV0f.x = R1f.x;
R1f.y = mul_nonIEEE(R127f.z, PV1f.x);
PV0f.y = R1f.y;
R1f.z = mul_nonIEEE(R127f.z, PV1f.w);
PV0f.z = R1f.z;
// 13
backupReg0f = R1f.w;
R1f.xyz = vec3(PV0f.x,PV0f.y,PV0f.z);
R1f.w = backupReg0f;
// 14
R0f.xyz = vec3(R4f.w,R4f.y,R4f.z);
R0f.w = R4f.w;
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
}
