#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 988a44266392bcf0
uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform samplerCubeArray textureUnitPS0;// Tex0 addr 0xf435a000 res 128x128x1 dim 3 tm: 4 format 0820 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x6) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem5;
layout(location = 5) in vec4 passParameterSem7;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex0 = 0.0;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem3;
R3f = passParameterSem4;
R4f = passParameterSem5;
R5f = passParameterSem7;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
tempf.x = dot(vec4(R5f.x,R5f.y,R5f.z,-0.0),vec4(R5f.x,R5f.y,R5f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = mul_nonIEEE(R2f.z, R2f.z);
// 1
tempf.x = dot(vec4(R2f.x,R2f.y,PS0f,-0.0),vec4(R2f.x,R2f.y,1.0,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 2
backupReg0f = R5f.x;
backupReg1f = R5f.y;
backupReg2f = R5f.z;
R5f.x = mul_nonIEEE(backupReg0f, PS1f);
R5f.y = mul_nonIEEE(backupReg1f, PS1f);
R5f.z = mul_nonIEEE(backupReg2f, PS1f);
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 3
backupReg0f = R2f.x;
backupReg1f = R2f.y;
backupReg2f = R2f.z;
R2f.x = mul_nonIEEE(backupReg0f, PS0f);
PV1f.x = R2f.x;
R2f.y = mul_nonIEEE(backupReg1f, PS0f);
PV1f.y = R2f.y;
R2f.z = mul_nonIEEE(backupReg2f, PS0f);
PV1f.z = R2f.z;
// 4
tempf.x = dot(vec4(R5f.x,R5f.y,R5f.z,-0.0),vec4(PV1f.x,PV1f.y,PV1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
// 5
R0f.w = PV0f.x + 1.0;
// 6
predResult = (R0f.w > 0.0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0f.x = R0f.w;
PV0f.x /= 2.0;
PV0f.y = mul_nonIEEE(R5f.y, R2f.x);
PV0f.z = mul_nonIEEE(R5f.x, R2f.z);
PV0f.w = mul_nonIEEE(R5f.z, R2f.y);
// 1
R127f.x = (mul_nonIEEE(-(R5f.y),R2f.z) + PV0f.w);
R127f.z = (mul_nonIEEE(-(R5f.x),R2f.y) + PV0f.y);
R127f.w = (mul_nonIEEE(-(R5f.z),R2f.x) + PV0f.z);
R0f.w = sqrt(PV0f.x);
PS1f = R0f.w;
// 2
PV0f.y = PS1f;
PV0f.y *= 2.0;
// 3
PS1f = 1.0 / PV0f.y;
// 4
R2f.x = mul_nonIEEE(R127f.x, PS1f);
R2f.y = mul_nonIEEE(R127f.w, PS1f);
R2f.z = mul_nonIEEE(R127f.z, PS1f);
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R2f.xyz = vec3(0.0,0.0,0.0);
R0f.w = 1.0;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
R127f.x = mul_nonIEEE(R2f.x, R2f.y);
PV0f.x = R127f.x;
R126f.y = mul_nonIEEE(R2f.x, R2f.x);
R127f.z = mul_nonIEEE(R2f.z, R0f.w);
PV0f.z = R127f.z;
R127f.w = mul_nonIEEE(R2f.y, R0f.w);
R126f.w = mul_nonIEEE(R2f.x, R2f.z);
PS0f = R126f.w;
// 1
PV1f.x = mul_nonIEEE(R2f.z, R2f.z);
R127f.y = mul_nonIEEE(R2f.x, R0f.w);
PV1f.y = R127f.y;
R126f.z = (mul_nonIEEE(-(R2f.y),R2f.y) + 0.5);
PV1f.z = R126f.z;
R125f.w = mul_nonIEEE(R2f.y, R2f.z);
PV1f.w = R125f.w;
R125f.z = PV0f.z + PV0f.x;
R125f.z *= 2.0;
PS1f = R125f.z;
// 2
PV0f.x = -(R126f.y) + -(PV1f.x);
R124f.y = -(R127f.w) + R126f.w;
R124f.y *= 2.0;
PV0f.y = R124f.y;
R2f.z = -(R127f.z) + R127f.x;
R2f.z *= 2.0;
R124f.w = PV1f.z + -(PV1f.x);
R124f.w *= 2.0;
PV0f.w = R124f.w;
R2f.y = PV1f.y + PV1f.w;
R2f.y *= 2.0;
PS0f = R2f.y;
// 3
backupReg0f = R127f.w;
R127f.x = mul_nonIEEE(R3f.x, PV0f.y);
R125f.y = mul_nonIEEE(R3f.x, R125f.z);
R124f.z = PV0f.x + 0.5;
R124f.z *= 2.0;
R127f.w = mul_nonIEEE(R3f.x, PV0f.w);
R124f.x = backupReg0f + R126f.w;
R124f.x *= 2.0;
PS1f = R124f.x;
// 4
backupReg0f = R127f.y;
backupReg1f = R125f.w;
R126f.x = mul_nonIEEE(R4f.x, R125f.z);
R127f.y = mul_nonIEEE(R4f.x, R124f.w);
R5f.z = R126f.z + -(R126f.y);
R5f.z *= 2.0;
R125f.w = -(backupReg0f) + backupReg1f;
R125f.w *= 2.0;
R126f.y = mul_nonIEEE(R4f.x, R124f.y);
PS0f = R126f.y;
// 5
backupReg0f = R127f.x;
backupReg1f = R125f.y;
R127f.x = (mul_nonIEEE(R3f.y,R2f.y) + backupReg0f);
R125f.y = mul_nonIEEE(R0f.x, R124f.w);
R123f.z = (mul_nonIEEE(R3f.y,R2f.z) + R127f.w);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R3f.y,R124f.z) + backupReg1f);
PV1f.w = R123f.w;
R125f.x = mul_nonIEEE(R0f.x, R125f.z);
PS1f = R125f.x;
// 6
R123f.x = (mul_nonIEEE(R4f.y,R2f.z) + R127f.y);
PV0f.x = R123f.x;
R127f.y = (mul_nonIEEE(R3f.z,R125f.w) + PV1f.w);
R123f.z = (mul_nonIEEE(R4f.y,R124f.z) + R126f.x);
PV0f.z = R123f.z;
R127f.w = (mul_nonIEEE(R3f.z,R124f.x) + PV1f.z);
R126f.z = mul_nonIEEE(R0f.x, R124f.y);
PS0f = R126f.z;
// 7
R123f.x = (mul_nonIEEE(R4f.y,R2f.y) + R126f.y);
PV1f.x = R123f.x;
R3f.y = (mul_nonIEEE(R4f.z,R125f.w) + PV0f.z);
R127f.z = (mul_nonIEEE(R3f.z,R5f.z) + R127f.x);
R3f.w = (mul_nonIEEE(R4f.z,R124f.x) + PV0f.x);
R127f.x = mul_nonIEEE(R1f.x, R124f.w);
PS1f = R127f.x;
// 8
backupReg0f = R125f.y;
PV0f.x = mul_nonIEEE(R1f.x, R124f.y);
R125f.y = (mul_nonIEEE(R0f.y,R2f.z) + backupReg0f);
R3f.z = (mul_nonIEEE(R4f.z,R5f.z) + PV1f.x);
R6f.w = intBitsToFloat(uf_remappedPS[0].x);
R7f.w = intBitsToFloat(uf_remappedPS[0].x);
PS0f = R7f.w;
// 9
backupReg0f = R125f.x;
R125f.x = (mul_nonIEEE(R1f.y,R2f.y) + PV0f.x);
R124f.y = (mul_nonIEEE(R0f.y,R2f.y) + R126f.z);
PV1f.z = mul_nonIEEE(R1f.x, R125f.z);
R124f.w = (mul_nonIEEE(R0f.y,R124f.z) + backupReg0f);
R8f.w = intBitsToFloat(uf_remappedPS[0].x);
PS1f = R8f.w;
// 10
redcCUBE(vec4(R127f.z,R127f.z,R127f.w,R127f.y),vec4(R127f.y,R127f.w,R127f.z,R127f.z),cubeMapSTM,cubeMapFaceId);
R4f.x = cubeMapSTM.x;
R4f.y = cubeMapSTM.y;
R4f.z = cubeMapSTM.z;
R4f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R4f.x;
PV0f.y = R4f.y;
PV0f.z = R4f.z;
PV0f.w = R4f.w;
R127f.w = (mul_nonIEEE(R1f.y,R124f.z) + PV1f.z);
PS0f = R127f.w;
// 11
R126f.x = (mul_nonIEEE(R0f.z,R124f.x) + R125f.y);
R126f.y = (mul_nonIEEE(R0f.z,R125f.w) + R124f.w);
R126f.z = (mul_nonIEEE(R0f.z,R5f.z) + R124f.y);
R123f.w = (mul_nonIEEE(R1f.y,R2f.z) + R127f.x);
PV1f.w = R123f.w;
R127f.x = 1.0 / abs(PV0f.z);
PS1f = R127f.x;
// 12
backupReg0f = R3f.z;
backupReg1f = R3f.y;
backupReg0f = R3f.z;
backupReg2f = R124f.x;
redcCUBE(vec4(R3f.z,R3f.z,R3f.w,backupReg1f),vec4(R3f.y,R3f.w,backupReg0f,backupReg0f),cubeMapSTM,cubeMapFaceId);
R3f.x = cubeMapSTM.x;
R3f.y = cubeMapSTM.y;
R3f.z = cubeMapSTM.z;
R3f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R3f.x;
PV0f.y = R3f.y;
PV0f.z = R3f.z;
PV0f.w = R3f.w;
R124f.x = (mul_nonIEEE(R1f.z,backupReg2f) + PV1f.w);
PS0f = R124f.x;
// 13
backupReg0f = R127f.x;
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(R4f.y,backupReg0f) + 1.5);
R124f.y = (mul_nonIEEE(R1f.z,R125f.w) + R127f.w);
R124f.z = (mul_nonIEEE(R1f.z,R5f.z) + R125f.x);
R125f.w = (mul_nonIEEE(R4f.x,backupReg0f) + 1.5);
R127f.w = 1.0 / abs(PV0f.z);
PS1f = R127f.w;
// 14
redcCUBE(vec4(R126f.z,R126f.z,R126f.x,R126f.y),vec4(R126f.y,R126f.x,R126f.z,R126f.z),cubeMapSTM,cubeMapFaceId);
R1f.x = cubeMapSTM.x;
R1f.y = cubeMapSTM.y;
R1f.z = cubeMapSTM.z;
R1f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R1f.x;
PV0f.y = R1f.y;
PV0f.z = R1f.z;
PV0f.w = R1f.w;
R126f.z = (mul_nonIEEE(R3f.x,PS1f) + 1.5);
PS0f = R126f.z;
// 15
R6f.x = R127f.x;
R126f.y = (mul_nonIEEE(R3f.y,R127f.w) + 1.5);
R6f.z = R4f.w;
R4f.w = intBitsToFloat(uf_remappedPS[0].x);
R6f.y = R125f.w;
PS1f = R6f.y;
// 16
backupReg0f = R124f.x;
backupReg0f = R124f.x;
backupReg1f = R124f.z;
backupReg2f = R124f.y;
backupReg1f = R124f.z;
redcCUBE(vec4(R124f.z,R124f.z,backupReg0f,backupReg2f),vec4(R124f.y,backupReg0f,backupReg1f,backupReg1f),cubeMapSTM,cubeMapFaceId);
R124f.x = cubeMapSTM.x;
R124f.y = cubeMapSTM.y;
R124f.z = cubeMapSTM.z;
R124f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R124f.x;
PV0f.y = R124f.y;
PV0f.z = R124f.z;
PV0f.w = R124f.w;
PS0f = 1.0 / abs(R1f.z);
// 17
R7f.xyz = vec3(R126f.y,R126f.z,R3f.w);
R123f.w = (mul_nonIEEE(R1f.x,PS0f) + 1.5);
PV1f.w = R123f.w;
R122f.x = (mul_nonIEEE(R1f.y,PS0f) + 1.5);
PS1f = R122f.x;
// 18
R8f.xyz = vec3(PS1f,PV1f.w,R1f.w);
PS0f = 1.0 / abs(R124f.z);
// 19
R123f.x = (mul_nonIEEE(R124f.y,PS0f) + 1.5);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R124f.x,PS0f) + 1.5);
PV1f.y = R123f.y;
R4f.z = R124f.w;
// 20
R4f.x = PV1f.x;
R4f.y = PV1f.y;
}
if( activeMaskStackC[1] == true ) {
R6f.xyzw = (textureLod(textureUnitPS0, vec4(redcCUBEReverse(R6f.xy,floatBitsToInt(R6f.z)),cubeMapArrayIndex0),R6f.w).xyzw);
R7f.xyzw = (textureLod(textureUnitPS0, vec4(redcCUBEReverse(R7f.xy,floatBitsToInt(R7f.z)),cubeMapArrayIndex0),R7f.w).xyzw);
R8f.xyzw = (textureLod(textureUnitPS0, vec4(redcCUBEReverse(R8f.xy,floatBitsToInt(R8f.z)),cubeMapArrayIndex0),R8f.w).xyzw);
R4f.xyzw = (textureLod(textureUnitPS0, vec4(redcCUBEReverse(R4f.xy,floatBitsToInt(R4f.z)),cubeMapArrayIndex0),R4f.w).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
PV0f.x = R6f.y * intBitsToFloat(0x3ec80000);
PV0f.y = R6f.x * intBitsToFloat(0x3ec80000);
PV0f.z = R6f.w * intBitsToFloat(0x3ec80000);
PV0f.w = R6f.z * intBitsToFloat(0x3ec80000);
// 1
R123f.x = (R7f.y * intBitsToFloat(0x3de00000) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (R7f.x * intBitsToFloat(0x3de00000) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (R7f.w * intBitsToFloat(0x3de00000) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (R7f.z * intBitsToFloat(0x3de00000) + PV0f.w);
PV1f.w = R123f.w;
// 2
R123f.x = (R8f.z * intBitsToFloat(0x3ec80000) + PV1f.w);
PV0f.x = R123f.x;
R123f.y = (R8f.y * intBitsToFloat(0x3ec80000) + PV1f.x);
PV0f.y = R123f.y;
R123f.z = (R8f.x * intBitsToFloat(0x3ec80000) + PV1f.y);
PV0f.z = R123f.z;
R123f.w = (R8f.w * intBitsToFloat(0x3ec80000) + PV1f.z);
PV0f.w = R123f.w;
// 3
R123f.x = (R4f.w * intBitsToFloat(0x3de00000) + PV0f.w);
PV1f.x = R123f.x;
R123f.y = (R4f.z * intBitsToFloat(0x3de00000) + PV0f.x);
PV1f.y = R123f.y;
R123f.z = (R4f.y * intBitsToFloat(0x3de00000) + PV0f.y);
PV1f.z = R123f.z;
R123f.w = (R4f.x * intBitsToFloat(0x3de00000) + PV0f.z);
PV1f.w = R123f.w;
// 4
R4f.x = max(PV1f.w, 0.0);
R4f.y = max(PV1f.z, 0.0);
R4f.z = max(PV1f.y, 0.0);
R4f.w = max(PV1f.x, 0.0);
}
// export
passPixelColor0 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
}
