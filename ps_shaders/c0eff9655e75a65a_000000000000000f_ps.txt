#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader c0eff9655e75a65a
uniform ivec4 uf_remappedPS[7];
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
// 0
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,-0.0),vec4(R1f.x,R1f.y,R1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R3f.w = 1.0;
PS0f = R3f.w;
// 1
backupReg0f = R0f.x;
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg1f = R0f.y;
backupReg2f = R0f.z;
backupReg2f = R0f.z;
tempf.x = dot(vec4(backupReg0f,backupReg1f,backupReg2f,-0.0),vec4(backupReg0f,backupReg1f,backupReg2f,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 2
R126f.x = mul_nonIEEE(R1f.x, PS1f);
R125f.y = mul_nonIEEE(R1f.y, PS1f);
R126f.z = mul_nonIEEE(R1f.z, PS1f);
PV0f.w = -(R2f.z) * -(R2f.z);
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 3
R127f.x = mul_nonIEEE(R0f.x, PS0f);
R126f.y = mul_nonIEEE(R0f.y, PS0f);
R127f.z = mul_nonIEEE(R0f.z, PS0f);
PV1f.z = R127f.z;
R122f.x = (-(R2f.y) * -(R2f.y) + PV0f.w);
PS1f = R122f.x;
// 4
R123f.x = (-(R2f.x) * -(R2f.x) + PS1f);
PV0f.x = R123f.x;
R127f.y = mul_nonIEEE(R126f.z, PV1f.z);
PS0f = mul_nonIEEE(R126f.z, -(PV1f.z));
// 5
tempf.x = dot(vec4(R126f.x,R125f.y,PS0f,-0.0),vec4(-(R127f.x),-(R126f.y),1.0,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 6
backupReg0f = R127f.y;
R125f.x = mul_nonIEEE(-(R2f.x), PS1f);
R127f.y = mul_nonIEEE(-(R2f.y), PS1f);
R125f.z = mul_nonIEEE(-(R2f.z), PS1f);
PV0f.z = R125f.z;
PV0f.w = PV1f.x + PV1f.x;
R122f.x = (mul_nonIEEE(R126f.x,R127f.x) + backupReg0f);
PS0f = R122f.x;
// 7
R123f.x = (mul_nonIEEE(-(PV0f.w),R126f.x) + -(R127f.x));
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(-(PV0f.w),R125f.y) + -(R126f.y));
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(-(PV0f.w),R126f.z) + -(R127f.z));
PV1f.z = R123f.z;
R127f.w = (mul_nonIEEE(R125f.y,R126f.y) + PS0f);
PS1f = mul_nonIEEE(R126f.z, PV0f.z);
// 8
tempf.x = dot(vec4(R125f.x,R127f.y,R125f.z,-0.0),vec4(PV1f.x,PV1f.y,PV1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R122f.x = (mul_nonIEEE(R125f.y,R127f.y) + PS1f);
PS0f = R122f.x;
// 9
PV1f.x = max(PV0f.x, 0.0);
R127f.y = max(R127f.w, 0.0);
PV1f.y = R127f.y;
R123f.w = (mul_nonIEEE(R126f.x,R125f.x) + PS0f);
PV1f.w = R123f.w;
// 10
R126f.x = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedPS[0].y)) + intBitsToFloat(uf_remappedPS[1].y));
PV0f.z = max(PV1f.w, 0.0);
R127f.w = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedPS[0].x)) + intBitsToFloat(uf_remappedPS[1].x));
tempResultf = log2(PV1f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 11
R125f.z = -(PV0f.z) + 1.0;
PV1f.w = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[2].x));
// 12
backupReg0f = R127f.y;
R127f.y = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[0].z)) + intBitsToFloat(uf_remappedPS[1].z));
PS0f = exp2(PV1f.w);
// 13
PV1f.x = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[3].y));
PV1f.y = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[3].x));
R126f.w = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[3].z));
tempResultf = log2(R125f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 14
PV0f.x = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].x));
R125f.y = (mul_nonIEEE(R126f.x,intBitsToFloat(uf_remappedPS[5].y)) + PV1f.x);
R125f.z = (mul_nonIEEE(R127f.w,intBitsToFloat(uf_remappedPS[5].x)) + PV1f.y);
// 15
R123f.x = (mul_nonIEEE(R127f.y,intBitsToFloat(uf_remappedPS[5].z)) + R126f.w);
PV1f.x = R123f.x;
PS1f = exp2(PV0f.x);
// 16
R3f.x = (mul_nonIEEE(PS1f,intBitsToFloat(uf_remappedPS[6].x)) + R125f.z);
R3f.y = (mul_nonIEEE(PS1f,intBitsToFloat(uf_remappedPS[6].y)) + R125f.y);
R3f.z = (mul_nonIEEE(PS1f,intBitsToFloat(uf_remappedPS[6].z)) + PV1f.x);
// export
passPixelColor0 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
}
