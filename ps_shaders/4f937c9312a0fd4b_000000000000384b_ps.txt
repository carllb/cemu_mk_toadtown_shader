#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 4f937c9312a0fd4b
uniform ivec4 uf_remappedPS[4];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x22e24000 res 64x64x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x22e28000 res 64x64x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 1 1 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf45c5000 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 1 1 0 border: 0
layout(binding = 13) uniform samplerCubeArray textureUnitPS13;// Tex13 addr 0x3fa33000 res 32x32x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x6) Sampler13 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem6;
layout(location = 6) in vec4 passParameterSem7;
layout(location = 7) in vec4 passParameterSem11;
layout(location = 8) in vec4 passParameterSem15;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex13 = 0.0;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f = passParameterSem4;
R5f = passParameterSem6;
R6f = passParameterSem7;
R7f = passParameterSem11;
R8f = passParameterSem15;
R9f.xyzw = (texture(textureUnitPS0, R7f.xy).xyzw);
R7f.xyzw = (texture(textureUnitPS1, R7f.zw).xyzw);
// 0
R126f.x = mul_nonIEEE(R0f.x, intBitsToFloat(uf_remappedPS[0].z));
PV0f.x = R126f.x;
R127f.y = mul_nonIEEE(R9f.x, R7f.x);
R127f.z = mul_nonIEEE(R9f.z, R7f.z);
R127f.w = mul_nonIEEE(R9f.y, R7f.y);
PS0f = 1.0 / R3f.w;
// 1
backupReg0f = R3f.x;
backupReg1f = R3f.y;
R3f.x = mul_nonIEEE(backupReg0f, PS0f);
R3f.y = mul_nonIEEE(backupReg1f, PS0f);
PV1f.z = R1f.x + -(R2f.x);
R0f.w = PV0f.x;
PS1f = R1f.y + -(R2f.y);
// 2
R123f.x = (mul_nonIEEE(PS1f,R127f.w) + R2f.y);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(PV1f.z,R127f.y) + R2f.x);
PV0f.y = R123f.y;
PV0f.z = R1f.z + -(R2f.z);
PV0f.w = intBitsToFloat(uf_remappedPS[1].w) + -(intBitsToFloat(0x3a83126e));
PS0f = 1.0 / R5f.w;
// 3
backupReg0f = R2f.z;
R2f.x = mul_nonIEEE(R6f.x, PV0f.y);
R5f.y = mul_nonIEEE(R6f.y, PV0f.x);
R2f.z = R5f.z * PS0f;
R123f.w = (mul_nonIEEE(PV0f.z,R127f.z) + backupReg0f);
PV1f.w = R123f.w;
R2f.y = intBitsToFloat(((PV0f.w >= 0.0)?(floatBitsToInt(1.0)):(0)));
PS1f = R2f.y;
// 4
R127f.x = -(intBitsToFloat(uf_remappedPS[0].z)) + 1.0;
R127f.y = mul_nonIEEE(R9f.w, R7f.w);
R7f.z = mul_nonIEEE(R6f.z, PV1f.w);
PV0f.z = R7f.z;
PV0f.w = R4f.z * R4f.z;
R7f.w = 1.0 / intBitsToFloat(uf_remappedPS[1].z);
PS0f = R7f.w;
// 5
tempf.x = dot(vec4(R2f.x,R5f.y,PV0f.z,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R122f.x = (R4f.y * R4f.y + PV0f.w);
PS1f = R122f.x;
// 6
PV0f.x = mul_nonIEEE(R6f.w, R127f.y);
PV0f.y = R127f.x + -(1.0);
R123f.z = (R4f.x * R4f.x + PS1f);
PV0f.z = R123f.z;
R6f.w = mul_nonIEEE(PV1f.x, intBitsToFloat(uf_remappedPS[1].w));
R6f.w = clamp(R6f.w, 0.0, 1.0);
R6f.y = -(intBitsToFloat(uf_remappedPS[0].y)) + 1.0;
PS0f = R6f.y;
// 7
R1f.y = mul_nonIEEE(R1f.w, PV0f.x);
R1f.z = (mul_nonIEEE(PV0f.y,R126f.x) + 1.0);
tempResultf = 1.0 / sqrt(PV0f.z);
PS1f = tempResultf;
// 8
R127f.x = mul_nonIEEE(R4f.x, PS1f);
R127f.y = mul_nonIEEE(R4f.y, PS1f);
PV0f.z = mul_nonIEEE(R4f.z, PS1f);
R126f.w = R8f.y;
R126f.z = -(R8f.z);
PS0f = R126f.z;
// 9
R126f.x = R8f.x;
PV1f.x = R126f.x;
PS1f = mul_nonIEEE(R8f.z, PV0f.z);
// 10
backupReg0f = R126f.z;
backupReg1f = R126f.w;
backupReg0f = R126f.z;
redcCUBE(vec4(R126f.z,R126f.z,PV1f.x,backupReg1f),vec4(R126f.w,PV1f.x,backupReg0f,backupReg0f),cubeMapSTM,cubeMapFaceId);
R126f.x = cubeMapSTM.x;
R126f.y = cubeMapSTM.y;
R126f.z = cubeMapSTM.z;
R126f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R126f.x;
PV0f.y = R126f.y;
PV0f.z = R126f.z;
PV0f.w = R126f.w;
R122f.x = (mul_nonIEEE(R8f.y,R127f.y) + PS1f);
PS0f = R122f.x;
// 11
R123f.y = (mul_nonIEEE(R8f.x,R127f.x) + PS0f);
PV1f.y = R123f.y;
R0f.z = PV0f.w;
PS1f = 1.0 / abs(PV0f.z);
// 12
R8f.x = max(PV1f.y, -(PV1f.y));
R123f.y = (mul_nonIEEE(R126f.y,PS1f) + 1.5);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R126f.x,PS1f) + 1.5);
PV0f.z = R123f.z;
// 13
R0f.x = PV0f.y;
R0f.y = PV0f.z;
R3f.x = (texture(textureUnitPS4, R3f.xy).x);
R0f.xyz = (textureLod(textureUnitPS13, vec4(redcCUBEReverse(R0f.xy,floatBitsToInt(R0f.z)),cubeMapArrayIndex13),R0f.w).xyz);
// 0
R126f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),R6f.w) + -(intBitsToFloat(uf_remappedPS[2].y)));
R123f.z = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedPS[2].w)) + -(intBitsToFloat(uf_remappedPS[2].y)));
PV0f.z = R123f.z;
R126f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),R3f.x) + -(intBitsToFloat(uf_remappedPS[2].y)));
// 1
R126f.z = -(intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(uf_remappedPS[3].y);
R125f.w = R8f.x + -(intBitsToFloat(uf_remappedPS[3].x));
PS1f = 1.0 / PV0f.z;
// 2
R127f.w = -(intBitsToFloat(uf_remappedPS[2].z)) * PS1f;
PS0f = 1.0 / R126f.y;
// 3
PV1f.z = -(intBitsToFloat(uf_remappedPS[2].z)) * PS0f;
PS1f = 1.0 / R126f.w;
// 4
R123f.x = (mul_nonIEEE(-(PV1f.z),R2f.y) + R127f.w);
PV0f.x = R123f.x;
PV0f.y = -(intBitsToFloat(uf_remappedPS[2].z)) * PS1f;
PS0f = 1.0 / R126f.z;
// 5
PV1f.x = R125f.w * PS0f;
PV1f.x = clamp(PV1f.x, 0.0, 1.0);
PV1f.z = PV0f.y + -(PV0f.x);
// 6
PV0f.y = PV1f.z * R7f.w;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
R123f.z = (-(2.0) * PV1f.x + intBitsToFloat(0x40400000));
PV0f.z = R123f.z;
PV0f.w = mul_nonIEEE(PV1f.x, PV1f.x);
// 7
PV1f.x = mul_nonIEEE(R1f.y, PV0f.y);
PV1f.y = mul_nonIEEE(PV0f.w, PV0f.z);
// 8
R8f.w = mul_nonIEEE(PV1f.x, PV1f.y);
R8f.w = clamp(R8f.w, 0.0, 1.0);
// 0
R123f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),R0f.x) + R6f.y);
PV0f.x = R123f.x;
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),R0f.z) + R6f.y);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),R0f.y) + R6f.y);
PV0f.w = R123f.w;
// 1
R123f.x = (mul_nonIEEE(R1f.z,PV0f.w) + 0.0);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R1f.z,PV0f.x) + 0.0);
PV1f.y = R123f.y;
R123f.w = (mul_nonIEEE(R1f.z,PV0f.z) + 0.0);
PV1f.w = R123f.w;
// 2
R8f.x = mul_nonIEEE(R2f.x, PV1f.y);
R8f.y = mul_nonIEEE(R5f.y, PV1f.x);
R8f.z = mul_nonIEEE(R7f.z, PV1f.w);
// export
if( ((vec4(R8f.x, R8f.y, R8f.z, R8f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
}
