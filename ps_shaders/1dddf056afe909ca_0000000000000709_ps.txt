#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 1dddf056afe909ca
uniform ivec4 uf_remappedPS[2];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x34918000 res 128x128x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x34900800 res 8x48x1 dim 1 tm: 4 format 0007 compSel: 0 0 0 1 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x34977800 res 8x48x1 dim 1 tm: 4 format 0007 compSel: 0 0 0 1 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem7;
layout(location = 5) in vec4 passParameterSem11;
layout(location = 6) in vec4 passParameterSem12;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem4;
R4f = passParameterSem7;
R5f = passParameterSem11;
R6f = passParameterSem12;
R7f.xw = (texture(textureUnitPS0, R5f.xy).xw);
R6f.x = (texture(textureUnitPS2, R6f.xy).w);
// 0
R123f.x = (R7f.x * 2.0 + -(1.0));
PV0f.x = R123f.x;
R123f.y = (R7f.w * 2.0 + -(1.0));
PV0f.y = R123f.y;
R0f.z = R1f.y + -(R2f.y);
R7f.w = R1f.x + -(R2f.x);
R6f.y = R1f.z + -(R2f.z);
PS0f = R6f.y;
// 1
R123f.x = (mul_nonIEEE(-(R0f.x),intBitsToFloat(uf_remappedPS[0].z)) + 1.0);
PV1f.x = R123f.x;
PV1f.z = mul_nonIEEE(PV0f.y, intBitsToFloat(uf_remappedPS[1].y));
PV1f.w = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[1].x));
// 2
R5f.x = (mul_nonIEEE(R3f.w,PV1f.w) + R5f.z);
R5f.y = (mul_nonIEEE(R3f.w,PV1f.z) + R5f.w);
R3f.w = PV1f.x + 0.0;
R5f.xyzw = (texture(textureUnitPS1, R5f.xy).xyzw);
// 0
PV0f.x = mul_nonIEEE(R5f.w, R6f.x);
PV0f.y = R5f.z * 1.0;
PV0f.z = R5f.y * 1.0;
PV0f.w = R5f.x * 1.0;
// 1
R123f.x = (mul_nonIEEE(R7f.w,PV0f.w) + R2f.x);
PV1f.x = R123f.x;
PV1f.y = mul_nonIEEE(R4f.w, PV0f.x);
R123f.z = (mul_nonIEEE(R6f.y,PV0f.y) + R2f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R0f.z,PV0f.z) + R2f.y);
PV1f.w = R123f.w;
// 2
backupReg0f = R1f.w;
PV0f.x = mul_nonIEEE(R4f.y, PV1f.w);
PV0f.y = mul_nonIEEE(R4f.x, PV1f.x);
PV0f.z = mul_nonIEEE(R4f.z, PV1f.z);
R1f.w = mul_nonIEEE(backupReg0f, PV1f.y);
R1f.w = clamp(R1f.w, 0.0, 1.0);
// 3
R1f.x = mul_nonIEEE(PV0f.y, R3f.w);
R1f.y = mul_nonIEEE(PV0f.x, R3f.w);
R1f.z = mul_nonIEEE(PV0f.z, R3f.w);
// export
if( ((vec4(R1f.x, R1f.y, R1f.z, R1f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
}
