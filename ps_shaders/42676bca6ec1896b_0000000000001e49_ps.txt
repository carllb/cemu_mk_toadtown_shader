#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 42676bca6ec1896b
uniform ivec4 uf_remappedPS[7];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4ed1800 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4b4d000 res 1280x720x1 dim 1 tm: 4 format 0019 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0xf494b800 res 30x16x1 dim 1 tm: 4 format 0019 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 6 6 6 border: 1
layout(location = 0) noperspective in vec4 passParameterSem0;
layout(location = 1) noperspective in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f.x = (texture(textureUnitPS0, R1f.xy).x);
R1f.xyz = (texture(textureUnitPS1, R1f.xy).xyz);
// 0
R123f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),R2f.x) + intBitsToFloat(uf_remappedPS[0].x));
PV0f.x = R123f.x;
R2f.y = (R1f.x * 2.0 + -(1.0));
R2f.z = (R1f.y * 2.0 + -(1.0));
R127f.w = 1.0;
R0f.z = (R1f.z * 2.0 + -(1.0));
PS0f = R0f.z;
// 1
R127f.x = mul_nonIEEE(R0f.x, -(PV0f.x));
PV1f.x = R127f.x;
R127f.y = mul_nonIEEE(R0f.y, -(PV0f.x));
PV1f.y = R127f.y;
R127f.z = -(PV0f.x);
PV1f.z = R127f.z;
// 2
tempf.x = dot(vec4(PV1f.x,PV1f.y,PV1f.z,R127f.w),vec4(intBitsToFloat(uf_remappedPS[1].x),intBitsToFloat(uf_remappedPS[1].y),intBitsToFloat(uf_remappedPS[1].z),intBitsToFloat(uf_remappedPS[1].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
// 3
R126f.x = -(R127f.x) + intBitsToFloat(uf_remappedPS[2].x);
R125f.y = -(R127f.y) + intBitsToFloat(uf_remappedPS[2].y);
PV1f.w = PV0f.x + -(intBitsToFloat(uf_remappedPS[3].z));
// 4
R125f.x = -(R127f.z) + intBitsToFloat(uf_remappedPS[2].z);
PV0f.z = max(PV1f.w, 1.0);
PS0f = mul_nonIEEE(R127f.w, intBitsToFloat(uf_remappedPS[4].w));
// 5
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,PS0f),vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),1.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.w = tempf.x;
R126f.y = 1.0 / PV0f.z;
PS1f = R126f.y;
// 6
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = mul_nonIEEE(R125f.x, R125f.x);
// 7
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].x), R126f.y);
PV1f.x = R127f.x;
PV1f.z = -(PV0f.x) + intBitsToFloat(uf_remappedPS[3].y);
PV1f.w = R126f.w + -(intBitsToFloat(uf_remappedPS[3].x));
R122f.x = (mul_nonIEEE(R125f.y,R125f.y) + PS0f);
PS1f = R122f.x;
// 8
R123f.x = (mul_nonIEEE(R126f.x,R126f.x) + PS1f);
PV0f.x = R123f.x;
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y), PV1f.z);
PV0f.w = mul_nonIEEE(PV1f.x, PV1f.w);
// 9
R0f.x = PV0f.w + 0.5;
R1f.y = PV0f.w;
R1f.y *= 2.0;
PV1f.z = mul_nonIEEE(R127f.x, PV0f.y);
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 10
R1f.x = mul_nonIEEE(R126f.x, PS1f);
R0f.y = PV1f.z + 0.5;
R1f.z = mul_nonIEEE(R125f.x, PS1f);
R1f.w = mul_nonIEEE(R125f.y, PS1f);
R0f.w = PV1f.z;
R0f.w *= 2.0;
PS0f = R0f.w;
R3f.xyz = (texture(textureUnitPS2, R0f.xy).xyz);
// 0
PV0f.x = mul_nonIEEE(R0f.z, R1f.z);
R125f.y = (mul_nonIEEE(-(R0f.w),R0f.w) + 1.0);
R125f.y = clamp(R125f.y, 0.0, 1.0);
R123f.z = (mul_nonIEEE(-(R1f.y),R1f.y) + 1.0);
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV0f.z = R123f.z;
// 1
tempf.x = dot(vec4(R2f.y,R2f.z,PV0f.x,-0.0),vec4(R1f.x,R1f.w,1.0,0.0));
tempf.x = clamp(tempf.x, 0.0, 1.0);
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].z), PV0f.z);
// 2
PV0f.x = mul_nonIEEE(PV1f.x, R3f.y);
PV0f.y = mul_nonIEEE(PV1f.x, R3f.x);
PV0f.z = mul_nonIEEE(R125f.y, PS1f);
PV0f.w = mul_nonIEEE(PV1f.x, R3f.z);
// 3
R3f.x = mul_nonIEEE(PV0f.y, PV0f.z);
R3f.y = mul_nonIEEE(PV0f.x, PV0f.z);
R3f.z = mul_nonIEEE(PV0f.w, PV0f.z);
// export
passPixelColor0 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
}
