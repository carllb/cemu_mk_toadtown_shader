#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 62900762e519244d
uniform ivec4 uf_remappedPS[1];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x348d8800 res 8x48x1 dim 1 tm: 4 format 0007 compSel: 0 0 0 1 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 2 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x348d8800 res 8x48x1 dim 1 tm: 4 format 0007 compSel: 0 0 0 1 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 2 0 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x34977800 res 8x48x1 dim 1 tm: 4 format 0007 compSel: 0 0 0 1 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 2 0 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0xf4240800 res 640x360x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 1 1 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem6;
layout(location = 5) in vec4 passParameterSem10;
layout(location = 6) in vec4 passParameterSem11;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem3;
R3f = passParameterSem4;
R4f = passParameterSem6;
R5f = passParameterSem10;
R6f = passParameterSem11;
R7f.xw = (texture(textureUnitPS0, R5f.xy).xw);
R5f.x = (texture(textureUnitPS1, R5f.zw).w);
R6f.x = (texture(textureUnitPS2, R6f.xy).w);
// 0
PV0f.x = 0.0;
R127f.y = mul_nonIEEE(R2f.w, R7f.w);
R123f.z = (R7f.x * 2.0 + -(1.0));
PV0f.z = R123f.z;
R123f.w = (R7f.w * 2.0 + -(1.0));
PV0f.w = R123f.w;
PS0f = R5f.x * 1.0;
// 1
backupReg0f = R0f.x;
PV1f.x = mul_nonIEEE(R3f.w, PV0f.w);
PV1f.y = mul_nonIEEE(R3f.w, PV0f.z);
R127f.z = mul_nonIEEE(R6f.x, PS0f);
PV1f.w = R3f.w + PV0f.x;
R5f.z = backupReg0f + -(R1f.x);
PS1f = R5f.z;
// 2
R6f.x = R0f.z + -(R1f.z);
R6f.y = R0f.y + -(R1f.y);
PV0f.z = mul_nonIEEE(PV1f.y, intBitsToFloat(uf_remappedPS[0].x));
PV0f.w = mul_nonIEEE(PV1f.x, intBitsToFloat(uf_remappedPS[0].y));
R127f.w = 1.0 / PV1f.w;
PS0f = R127f.w;
// 3
PV1f.x = mul_nonIEEE(R4f.w, R127f.z);
PV1f.z = mul_nonIEEE(PV0f.z, R127f.y);
PV1f.w = mul_nonIEEE(PV0f.w, R127f.y);
// 4
PV0f.x = R3f.x + PV1f.z;
PV0f.z = R3f.y + PV1f.w;
R3f.w = mul_nonIEEE(R0f.w, PV1f.x);
R3f.w = clamp(R3f.w, 0.0, 1.0);
// 5
R0f.x = mul_nonIEEE(PV0f.x, R127f.w);
R0f.y = mul_nonIEEE(PV0f.z, R127f.w);
R0f.xyz = (texture(textureUnitPS3, R0f.xy).xyz);
// 0
backupReg0f = R0f.y;
backupReg1f = R0f.x;
PV0f.x = R0f.z * 1.0;
PV0f.y = backupReg0f * 1.0;
PV0f.z = backupReg1f * 1.0;
// 1
PV1f.x = PV0f.x * 1.0;
PV1f.y = PV0f.y * 1.0;
PV1f.z = PV0f.z * 1.0;
// 2
R123f.y = (mul_nonIEEE(R6f.x,PV1f.x) + R1f.z);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R6f.y,PV1f.y) + R1f.y);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R5f.z,PV1f.z) + R1f.x);
PV0f.w = R123f.w;
// 3
R3f.x = mul_nonIEEE(R4f.x, PV0f.w);
R3f.y = mul_nonIEEE(R4f.y, PV0f.z);
R3f.z = mul_nonIEEE(R4f.z, PV0f.y);
// export
if( ((vec4(R3f.x, R3f.y, R3f.z, R3f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
}
