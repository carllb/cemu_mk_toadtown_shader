#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader fdf33c607cd1d737
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4d4b000 res 640x360x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f.xyz = (texture(textureUnitPS0, R0f.zw).xyz);
R0f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
R5f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R1f.xyz = (texture(textureUnitPS0, R1f.zw).xyz);
R6f.xyz = (texture(textureUnitPS0, R2f.xy).xyz);
R2f.xyz = (texture(textureUnitPS0, R2f.zw).xyz);
R7f.xyz = (texture(textureUnitPS0, R3f.xy).xyz);
R3f.xyz = (texture(textureUnitPS0, R3f.zw).xyz);
// 0
PV0f.x = R4f.y * intBitsToFloat(0x3e000000);
PV0f.y = R4f.x * intBitsToFloat(0x3e000000);
PV0f.w = R4f.z * intBitsToFloat(0x3e000000);
R4f.w = 1.0;
PS0f = R4f.w;
// 1
R123f.x = (R0f.z * intBitsToFloat(0x3e000000) + PV0f.w);
PV1f.x = R123f.x;
R123f.y = (R0f.y * intBitsToFloat(0x3e000000) + PV0f.x);
PV1f.y = R123f.y;
R123f.z = (R0f.x * intBitsToFloat(0x3e000000) + PV0f.y);
PV1f.z = R123f.z;
// 2
R123f.x = (R5f.z * intBitsToFloat(0x3e000000) + PV1f.x);
PV0f.x = R123f.x;
R123f.z = (R5f.y * intBitsToFloat(0x3e000000) + PV1f.y);
PV0f.z = R123f.z;
R123f.w = (R5f.x * intBitsToFloat(0x3e000000) + PV1f.z);
PV0f.w = R123f.w;
// 3
R123f.x = (R1f.y * intBitsToFloat(0x3e000000) + PV0f.z);
PV1f.x = R123f.x;
R123f.y = (R1f.x * intBitsToFloat(0x3e000000) + PV0f.w);
PV1f.y = R123f.y;
R123f.w = (R1f.z * intBitsToFloat(0x3e000000) + PV0f.x);
PV1f.w = R123f.w;
// 4
R123f.y = (R6f.y * intBitsToFloat(0x3e000000) + PV1f.x);
PV0f.y = R123f.y;
R123f.z = (R6f.x * intBitsToFloat(0x3e000000) + PV1f.y);
PV0f.z = R123f.z;
R123f.w = (R6f.z * intBitsToFloat(0x3e000000) + PV1f.w);
PV0f.w = R123f.w;
// 5
R123f.x = (R2f.x * intBitsToFloat(0x3e000000) + PV0f.z);
PV1f.x = R123f.x;
R123f.z = (R2f.z * intBitsToFloat(0x3e000000) + PV0f.w);
PV1f.z = R123f.z;
R123f.w = (R2f.y * intBitsToFloat(0x3e000000) + PV0f.y);
PV1f.w = R123f.w;
// 6
R123f.x = (R7f.y * intBitsToFloat(0x3e000000) + PV1f.w);
PV0f.x = R123f.x;
R123f.y = (R7f.x * intBitsToFloat(0x3e000000) + PV1f.x);
PV0f.y = R123f.y;
R123f.w = (R7f.z * intBitsToFloat(0x3e000000) + PV1f.z);
PV0f.w = R123f.w;
// 7
R4f.x = (R3f.x * intBitsToFloat(0x3e000000) + PV0f.y);
R4f.y = (R3f.y * intBitsToFloat(0x3e000000) + PV0f.x);
R4f.z = (R3f.z * intBitsToFloat(0x3e000000) + PV0f.w);
// export
passPixelColor0 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
}
