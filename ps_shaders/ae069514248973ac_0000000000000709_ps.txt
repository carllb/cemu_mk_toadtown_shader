#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader ae069514248973ac
uniform ivec4 uf_remappedPS[2];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x22e28000 res 128x128x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x22e48000 res 64x64x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 1 1 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf45c5000 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 1 1 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem5;
layout(location = 4) in vec4 passParameterSem9;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem5;
R4f = passParameterSem9;
R5f.xyzw = (texture(textureUnitPS0, R4f.xy).xyzw);
R3f.x = (texture(textureUnitPS1, R4f.zw).w);
// 0
backupReg0f = R0f.y;
backupReg1f = R0f.x;
backupReg2f = R0f.z;
PV0f.x = R5f.x * 1.0;
PV0f.y = backupReg0f + -(R1f.y);
PV0f.z = backupReg1f + -(R1f.x);
R127f.w = backupReg2f + -(R1f.z);
PS0f = R5f.y * 1.0;
// 1
R6f.x = (mul_nonIEEE(PV0f.z,PV0f.x) + R1f.x);
R6f.y = (mul_nonIEEE(PV0f.y,PS0f) + R1f.y);
PV1f.z = intBitsToFloat(uf_remappedPS[0].w) + -(intBitsToFloat(0x3a83126e));
PV1f.w = R5f.z * 1.0;
PS1f = 1.0 / R2f.w;
// 2
backupReg0f = R2f.x;
backupReg1f = R2f.y;
R2f.x = mul_nonIEEE(backupReg0f, PS1f);
R2f.y = mul_nonIEEE(backupReg1f, PS1f);
R6f.z = (mul_nonIEEE(R127f.w,PV1f.w) + R1f.z);
R2f.w = intBitsToFloat(((PV1f.z >= 0.0)?(floatBitsToInt(1.0)):(0)));
R4f.x = 1.0 / R3f.w;
PS0f = R4f.x;
R2f.x = (texture(textureUnitPS4, R2f.xy).x);
// 0
tempf.x = dot(vec4(R6f.x,R6f.y,R6f.z,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.w = R3f.z * R4f.x;
PS0f = R127f.w;
// 1
R123f.x = (mul_nonIEEE(R5f.w,R3f.x) + -(R0f.w));
PV1f.x = R123f.x;
PV1f.y = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[0].w));
PV1f.y = clamp(PV1f.y, 0.0, 1.0);
R127f.y = 1.0 / intBitsToFloat(uf_remappedPS[0].z);
PS1f = R127f.y;
// 2
R127f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w),PV1f.y) + -(intBitsToFloat(uf_remappedPS[1].y)));
R123f.y = (mul_nonIEEE(R127f.w,intBitsToFloat(uf_remappedPS[1].w)) + -(intBitsToFloat(uf_remappedPS[1].y)));
PV0f.y = R123f.y;
R127f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w),R2f.x) + -(intBitsToFloat(uf_remappedPS[1].y)));
R126f.w = mul_nonIEEE(R1f.w, PV1f.x);
// 3
PS1f = 1.0 / PV0f.y;
// 4
R127f.w = -(intBitsToFloat(uf_remappedPS[1].z)) * PS1f;
PS0f = 1.0 / R127f.x;
// 5
PV1f.z = -(intBitsToFloat(uf_remappedPS[1].z)) * PS0f;
PS1f = 1.0 / R127f.z;
// 6
PV0f.x = -(intBitsToFloat(uf_remappedPS[1].z)) * PS1f;
R123f.w = (mul_nonIEEE(-(PV1f.z),R2f.w) + R127f.w);
PV0f.w = R123f.w;
// 7
PV1f.z = PV0f.x + -(PV0f.w);
// 8
PV0f.x = PV1f.z * R127f.y;
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
// 9
R6f.w = mul_nonIEEE(R126f.w, PV0f.x);
R6f.w = clamp(R6f.w, 0.0, 1.0);
// export
if( ((vec4(R6f.x, R6f.y, R6f.z, R6f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
}
