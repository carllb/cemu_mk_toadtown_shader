#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 70e4e316526ac914
uniform ivec4 uf_remappedPS[4];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x3f7e9000 res 128x32x1 dim 1 tm: 4 format 0001 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x3f854000 res 32x32x1 dim 1 tm: 4 format 0823 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 4) out vec4 passPixelColor4;
layout(location = 5) out vec4 passPixelColor5;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R15f = vec4(0.0);
vec4 R16f = vec4(0.0);
vec4 R17f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R0f.xyz = (texture(textureUnitPS1, R0f.xy).xyz);
// 0
R127f.x = -(R0f.x);
R127f.y = R0f.y;
R126f.z = -(R0f.z);
R127f.w = R0f.y;
R127f.z = R0f.z;
PS0f = R127f.z;
// 1
R126f.x = -(R0f.z);
R126f.y = R0f.x;
R125f.z = R0f.y;
R126f.w = R0f.y;
R124f.z = -(R0f.x);
PS1f = R124f.z;
// 2
tempf.x = dot(vec4(R127f.x,R127f.w,R127f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0));
tempf.x /= 2.0;
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.w = tempf.x;
PS0f = mul_nonIEEE(R126f.z, intBitsToFloat(uf_remappedPS[0].z));
// 3
backupReg0f = R0f.x;
tempf.x = dot(vec4(backupReg0f,R127f.y,PS0f,-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),1.0,0.0));
tempf.x /= 2.0;
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R1f.y = intBitsToFloat(uf_remappedPS[1].x);
PS1f = R1f.y;
// 4
tempf.x = dot(vec4(R126f.x,R126f.y,R125f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0));
tempf.x /= 2.0;
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R125f.w = tempf.x;
R1f.x = -(PV1f.x) + 0.5;
PS0f = R1f.x;
// 5
backupReg0f = R124f.z;
tempf.x = dot(vec4(R126f.x,R126f.w,backupReg0f,-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0));
tempf.x /= 2.0;
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R124f.z = tempf.x;
R2f.x = -(R127f.w) + 0.5;
PS1f = R2f.x;
// 6
backupReg0f = R0f.x;
backupReg1f = R0f.y;
tempf.x = dot(vec4(-(R0f.z),-(backupReg0f),-(backupReg1f),-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0));
tempf.x /= 2.0;
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R3f.x = -(R125f.w) + 0.5;
PS0f = R3f.x;
// 7
backupReg0f = R0f.y;
backupReg1f = R0f.x;
tempf.x = dot(vec4(R0f.z,backupReg0f,backupReg1f,-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0));
tempf.x /= 2.0;
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.w = tempf.x;
R0f.x = -(PV0f.x) + 0.5;
PS1f = R0f.x;
// 8
R4f.x = -(R124f.z) + 0.5;
R2f.y = intBitsToFloat(uf_remappedPS[1].x);
R3f.z = intBitsToFloat(uf_remappedPS[1].x);
R0f.w = intBitsToFloat(uf_remappedPS[1].x);
R4f.y = intBitsToFloat(uf_remappedPS[1].x);
PS0f = R4f.y;
// 9
R5f.x = -(R125f.w) + 0.5;
R5f.y = intBitsToFloat(uf_remappedPS[1].x);
R11f.w = R1f.x;
R10f.w = R2f.x;
PS1f = R10f.w;
R1f.xyz = (texture(textureUnitPS0, R1f.xy).xxx);
R2f.xyz = (texture(textureUnitPS0, R2f.xy).xxx);
R6f.xyz = (texture(textureUnitPS0, R3f.xz).xxx);
R7f.xyz = (texture(textureUnitPS0, R0f.xw).xxx);
R8f.xyz = (texture(textureUnitPS0, R4f.xy).xxx);
R9f.xyz = (texture(textureUnitPS0, R5f.xy).xxx);
// 0
R124f.z = intBitsToFloat(uf_remappedPS[2].x) + -(intBitsToFloat(uf_remappedPS[3].x));
R125f.w = intBitsToFloat(uf_remappedPS[2].y) + -(intBitsToFloat(uf_remappedPS[3].y));
R3f.w = R3f.x;
PS0f = R3f.w;
// 1
R125f.z = intBitsToFloat(uf_remappedPS[2].z) + -(intBitsToFloat(uf_remappedPS[3].z));
PV1f.z = R125f.z;
R4f.w = R0f.x;
R0f.w = R4f.x;
PS1f = R0f.w;
// 2
R11f.x = (mul_nonIEEE(R124f.z,R1f.x) + intBitsToFloat(uf_remappedPS[3].x));
R11f.y = (mul_nonIEEE(R125f.w,R1f.y) + intBitsToFloat(uf_remappedPS[3].y));
R11f.z = (mul_nonIEEE(PV1f.z,R1f.z) + intBitsToFloat(uf_remappedPS[3].z));
R1f.w = R5f.x;
R10f.x = (mul_nonIEEE(R124f.z,R2f.x) + intBitsToFloat(uf_remappedPS[3].x));
PS0f = R10f.x;
// 3
R3f.x = (mul_nonIEEE(R124f.z,R6f.x) + intBitsToFloat(uf_remappedPS[3].x));
R10f.y = (mul_nonIEEE(R125f.w,R2f.y) + intBitsToFloat(uf_remappedPS[3].y));
R10f.z = (mul_nonIEEE(R125f.z,R2f.z) + intBitsToFloat(uf_remappedPS[3].z));
R3f.y = (mul_nonIEEE(R125f.w,R6f.y) + intBitsToFloat(uf_remappedPS[3].y));
PS1f = R3f.y;
// 4
R4f.x = (mul_nonIEEE(R124f.z,R7f.x) + intBitsToFloat(uf_remappedPS[3].x));
R4f.y = (mul_nonIEEE(R125f.w,R7f.y) + intBitsToFloat(uf_remappedPS[3].y));
R3f.z = (mul_nonIEEE(R125f.z,R6f.z) + intBitsToFloat(uf_remappedPS[3].z));
R0f.x = (mul_nonIEEE(R124f.z,R8f.x) + intBitsToFloat(uf_remappedPS[3].x));
PS0f = R0f.x;
// 5
R0f.y = (mul_nonIEEE(R125f.w,R8f.y) + intBitsToFloat(uf_remappedPS[3].y));
R4f.z = (mul_nonIEEE(R125f.z,R7f.z) + intBitsToFloat(uf_remappedPS[3].z));
R0f.z = (mul_nonIEEE(R125f.z,R8f.z) + intBitsToFloat(uf_remappedPS[3].z));
PS1f = R0f.z;
// 6
R1f.x = (mul_nonIEEE(R124f.z,R9f.x) + intBitsToFloat(uf_remappedPS[3].x));
PV0f.x = R1f.x;
R1f.y = (mul_nonIEEE(R125f.w,R9f.y) + intBitsToFloat(uf_remappedPS[3].y));
PV0f.y = R1f.y;
R1f.z = (mul_nonIEEE(R125f.z,R9f.z) + intBitsToFloat(uf_remappedPS[3].z));
PV0f.z = R1f.z;
// 7
R17f.xyz = vec3(PV0f.x,PV0f.y,PV0f.z);
R17f.w = R1f.w;
// 8
R16f.xyz = vec3(R0f.x,R0f.y,R0f.z);
R16f.w = R0f.w;
// 9
R15f.xyz = vec3(R4f.x,R4f.y,R4f.z);
R15f.w = R4f.w;
// 10
R14f.xyz = vec3(R3f.x,R3f.y,R3f.z);
R14f.w = R3f.w;
// 11
R13f.xyz = vec3(R10f.x,R10f.y,R10f.z);
R13f.w = R10f.w;
// 12
R12f.xyz = vec3(R11f.x,R11f.y,R11f.z);
R12f.w = R11f.w;
// export
passPixelColor0 = vec4(R12f.x, R12f.y, R12f.z, R12f.w);
passPixelColor1 = vec4(R13f.x, R13f.y, R13f.z, R13f.w);
passPixelColor2 = vec4(R14f.x, R14f.y, R14f.z, R14f.w);
passPixelColor3 = vec4(R15f.x, R15f.y, R15f.z, R15f.w);
passPixelColor4 = vec4(R16f.x, R16f.y, R16f.z, R16f.w);
passPixelColor5 = vec4(R17f.x, R17f.y, R17f.z, R17f.w);
}
