#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 681af03d71182e19
uniform ivec4 uf_remappedPS[4];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x17b1b000 res 2048x580x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x17cc7000 res 1024x290x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x17bc7000 res 2048x1024x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x17bbb000 res 512x145x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem3;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem3;
R2f.xyz = (texture(textureUnitPS3, R0f.xy).xyz);
R3f.xyz = (texture(textureUnitPS2, R1f.zw).xyz);
R0f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
R1f.xyz = (texture(textureUnitPS1, R1f.xy).xyz);
// 0
PV0f.x = -(R2f.z) + 1.0;
PV0f.y = -(R2f.y) + 1.0;
PV0f.z = -(R2f.x) + 1.0;
R126f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w), intBitsToFloat(uf_remappedPS[1].w));
R2f.w = 1.0;
PS0f = R2f.w;
// 1
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), intBitsToFloat(uf_remappedPS[2].x));
R127f.y = mul_nonIEEE(R3f.z, PV0f.x);
R127f.z = mul_nonIEEE(R3f.y, PV0f.y);
R127f.w = mul_nonIEEE(R3f.x, PV0f.z);
PS1f = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), intBitsToFloat(uf_remappedPS[2].y));
// 2
R126f.y = (mul_nonIEEE(R0f.y,PS1f) + 0.0);
R126f.z = (mul_nonIEEE(R0f.x,PV1f.x) + 0.0);
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), intBitsToFloat(uf_remappedPS[2].z));
// 3
backupReg0f = R127f.y;
backupReg1f = R127f.z;
R123f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].x),R127f.w) + R1f.x);
PV1f.x = R123f.x;
R127f.y = (mul_nonIEEE(R0f.z,PV0f.w) + 0.0);
R127f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].x),backupReg0f) + R1f.z);
R127f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].x),backupReg1f) + R1f.y);
PS1f = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), R126f.w);
// 4
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), R126f.w);
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), R126f.w);
R2f.x = (mul_nonIEEE(PS1f,PV1f.x) + R126f.z);
PS0f = R2f.x;
// 5
R2f.y = (mul_nonIEEE(PV0f.w,R127f.w) + R126f.y);
R2f.z = (mul_nonIEEE(PV0f.x,R127f.z) + R127f.y);
// export
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
