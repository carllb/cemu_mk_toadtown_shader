#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader f048a5b072eac530
uniform ivec4 uf_remappedPS[6];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4d4b000 res 640x360x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
// 0
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,-0.0),vec4(R3f.x,R3f.y,R3f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = 1.0 / R2f.w;
// 1
backupReg0f = R2f.x;
R2f.x = R2f.y * PS0f;
R2f.y = backupReg0f * PS0f;
R0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[1].x));
R2f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[1].y));
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 2
backupReg0f = R0f.w;
PV0f.x = mul_nonIEEE(R3f.y, PS1f);
PV0f.y = mul_nonIEEE(R3f.x, PS1f);
R2f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[1].z));
PV0f.w = mul_nonIEEE(R3f.z, PS1f);
R4f.w = backupReg0f * 1.0;
R4f.w = clamp(R4f.w, 0.0, 1.0);
PS0f = R4f.w;
// 3
R3f.x = PV0f.y * 1.0;
R3f.y = PV0f.x * 1.0;
R3f.z = PV0f.w * 1.0;
// 0
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[2].x),intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(uf_remappedPS[2].z),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.w = tempf.x;
// 1
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
// 2
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].z), PV1f.x);
R3f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].z), R127f.w);
// 3
R3f.x = R2f.y + PV0f.y;
// 0
PV0f.w = mul_nonIEEE(R3f.z, intBitsToFloat(uf_remappedPS[5].z));
// 1
R3f.y = R2f.x + PV0f.w;
R3f.xyz = (texture(textureUnitPS0, R3f.xy).xyz);
// 0
R127f.x = (mul_nonIEEE(R3f.y,R2f.w) + 0.0);
PV0f.x = R127f.x;
R127f.y = (mul_nonIEEE(R3f.x,R0f.z) + 0.0);
PV0f.y = R127f.y;
R127f.w = (mul_nonIEEE(R3f.z,R2f.z) + 0.0);
PV0f.w = R127f.w;
// 1
PV1f.x = R1f.z + -(PV0f.w);
PV1f.y = R1f.y + -(PV0f.x);
PV1f.z = R1f.x + -(PV0f.y);
// 2
R4f.x = (mul_nonIEEE(PV1f.z,R1f.w) + R127f.y);
R4f.y = (mul_nonIEEE(PV1f.y,R1f.w) + R127f.x);
R4f.z = (mul_nonIEEE(PV1f.x,R1f.w) + R127f.w);
// export
passPixelColor0 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
}
