#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader f679c6c08e27a734
uniform ivec4 uf_remappedPS[2];
layout(binding = 8) uniform sampler2D textureUnitPS8;// Tex8 addr 0x17449000 res 1024x1024x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x1) Sampler8 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 9) uniform sampler2D textureUnitPS9;// Tex9 addr 0x17449000 res 1024x1024x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x1) Sampler9 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 1) out vec4 passPixelColor1;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R0f.xy = (texture(textureUnitPS8, R0f.xy).xy);
R3f.xy = (texture(textureUnitPS9, R3f.xy).xy);
// 0
backupReg0f = R0f.y;
R126f.x = (R0f.x * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
PV0f.x = R126f.x;
PV0f.y = mul_nonIEEE(R1f.z, R2f.y);
R127f.z = (backupReg0f * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
R126f.w = (R3f.x * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
PV0f.w = R126f.w;
R127f.x = mul_nonIEEE(R1f.x, R2f.z);
PS0f = R127f.x;
// 1
PV1f.x = mul_nonIEEE(R1f.y, R2f.x);
PV1f.y = mul_nonIEEE(PV0f.w, PV0f.w);
R125f.z = (R3f.y * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
PV1f.z = R125f.z;
PV1f.w = mul_nonIEEE(PV0f.x, PV0f.x);
R122f.x = (mul_nonIEEE(-(R1f.y),R2f.z) + PV0f.y);
PS1f = R122f.x;
// 2
R123f.x = (mul_nonIEEE(-(R1f.z),R2f.x) + R127f.x);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R127f.z,R127f.z) + PV1f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(-(R1f.x),R2f.y) + PV1f.x);
PV0f.z = R123f.z;
R127f.w = (mul_nonIEEE(PV1f.z,PV1f.z) + PV1f.y);
R125f.w = mul_nonIEEE(R1f.w, PS1f);
PS0f = R125f.w;
// 3
PV1f.x = -(PV0f.y) + 1.0;
PV1f.x = clamp(PV1f.x, 0.0, 1.0);
R127f.y = mul_nonIEEE(R1f.w, PV0f.z);
R126f.z = mul_nonIEEE(R1f.w, PV0f.x);
PV1f.z = R126f.z;
PV1f.w = mul_nonIEEE(R1f.x, R126f.x);
PS1f = mul_nonIEEE(R1f.y, R126f.x);
// 4
backupReg0f = R126f.x;
R126f.x = (mul_nonIEEE(R127f.z,PV1f.z) + PS1f);
R126f.y = (mul_nonIEEE(R127f.z,R125f.w) + PV1f.w);
PV0f.z = mul_nonIEEE(R1f.z, backupReg0f);
PV0f.w = -(R127f.w) + 1.0;
PV0f.w = clamp(PV0f.w, 0.0, 1.0);
R124f.z = sqrt(PV1f.x);
PS0f = R124f.z;
// 5
PV1f.x = mul_nonIEEE(R1f.z, R126f.w);
PV1f.y = mul_nonIEEE(R1f.y, R126f.w);
PV1f.z = mul_nonIEEE(R1f.x, R126f.w);
R126f.w = (mul_nonIEEE(R127f.z,R127f.y) + PV0f.z);
R127f.z = sqrt(PV0f.w);
PS1f = R127f.z;
// 6
backupReg0f = R126f.x;
R126f.x = (mul_nonIEEE(R2f.x,R124f.z) + R126f.y);
R123f.y = (mul_nonIEEE(R125f.z,R127f.y) + PV1f.x);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R125f.z,R126f.z) + PV1f.y);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R125f.z,R125f.w) + PV1f.z);
PV0f.w = R123f.w;
R127f.y = (mul_nonIEEE(R2f.y,R124f.z) + backupReg0f);
PS0f = R127f.y;
// 7
backupReg0f = R127f.z;
R127f.x = (mul_nonIEEE(R2f.x,R127f.z) + PV0f.w);
R126f.y = (mul_nonIEEE(R2f.y,R127f.z) + PV0f.z);
R127f.z = (mul_nonIEEE(R2f.z,R124f.z) + R126f.w);
PV1f.z = R127f.z;
R126f.w = (mul_nonIEEE(R2f.z,backupReg0f) + PV0f.y);
R127f.w = -(intBitsToFloat(uf_remappedPS[0].w)) + 1.0;
PS1f = R127f.w;
// 8
tempf.x = dot(vec4(R126f.x,R127f.y,PV1f.z,-0.0),vec4(R126f.x,R127f.y,PV1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R2f.w = intBitsToFloat(uf_remappedPS[1].x);
PS0f = R2f.w;
// 9
tempf.x = dot(vec4(R127f.x,R126f.y,R126f.w,-0.0),vec4(R127f.x,R126f.y,R126f.w,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 10
PV0f.x = mul_nonIEEE(R127f.y, PS1f);
PV0f.y = mul_nonIEEE(R126f.x, PS1f);
R125f.w = mul_nonIEEE(R127f.z, PS1f);
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 11
backupReg0f = R127f.x;
R127f.x = mul_nonIEEE(R126f.w, PS0f);
PV1f.y = mul_nonIEEE(R126f.y, PS0f);
PV1f.z = mul_nonIEEE(backupReg0f, PS0f);
PV1f.w = mul_nonIEEE(PV0f.y, R127f.w);
PS1f = mul_nonIEEE(PV0f.x, R127f.w);
// 12
R126f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w),PV1f.z) + PV1f.w);
R126f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w),PV1f.y) + PS1f);
PV0f.w = mul_nonIEEE(R125f.w, R127f.w);
// 13
R127f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w),R127f.x) + PV0f.w);
PV1f.z = R127f.z;
// 14
tempf.x = dot(vec4(R126f.x,R126f.y,PV1f.z,-0.0),vec4(R126f.x,R126f.y,PV1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
// 15
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
PS1f /= 2.0;
// 16
PV0f.x = mul_nonIEEE(R127f.z, PS1f);
PV0f.y = mul_nonIEEE(R126f.y, PS1f);
PV0f.z = mul_nonIEEE(R126f.x, PS1f);
// 17
R2f.x = (PV0f.z * 1.0 + 0.5);
R2f.y = (PV0f.y * 1.0 + 0.5);
R2f.z = (PV0f.x * 1.0 + 0.5);
// export
passPixelColor1 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
