#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader f49418ca523f4148
uniform ivec4 uf_remappedPS[1];
uniform float uf_alphaTestRef;
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0x16a44000 res 256x512x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f.x = (texture(textureUnitPS5, R0f.xy).w);
// 0
backupReg0f = R0f.w;
backupReg1f = R2f.x;
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,-0.0),vec4(R1f.x,R1f.y,R1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R2f.x = mul_nonIEEE(backupReg0f, backupReg1f);
R2f.x = clamp(R2f.x, 0.0, 1.0);
PS0f = R2f.x;
// 1
R0f.w = intBitsToFloat(uf_remappedPS[0].x);
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
PS1f /= 2.0;
// 2
R0f.x = (mul_nonIEEE(R1f.x,PS1f) + 0.5);
PV0f.x = R0f.x;
R0f.y = (mul_nonIEEE(R1f.y,PS1f) + 0.5);
PV0f.y = R0f.y;
R0f.z = (mul_nonIEEE(R1f.z,PS1f) + 0.5);
PV0f.z = R0f.z;
// 3
R1f.xyz = vec3(PV0f.x,PV0f.y,PV0f.z);
R1f.w = R0f.w;
// 4
R0f.xyz = vec3(R2f.x,R2f.x,R2f.x);
R0f.w = R2f.x;
// export
if( ((vec4(R0f.x, R0f.y, R0f.z, R0f.w)).a >= uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
}
