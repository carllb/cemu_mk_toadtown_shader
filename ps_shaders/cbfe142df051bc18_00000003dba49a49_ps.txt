#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader cbfe142df051bc18
uniform ivec4 uf_remappedPS[13];
layout(binding = 0) uniform samplerCubeArray textureUnitPS0;// Tex0 addr 0x42892000 res 128x128x8 dim 3 tm: 4 format 0033 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x30) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform samplerCubeArray textureUnitPS1;// Tex1 addr 0x3fa11000 res 32x32x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x6) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2DArray textureUnitPS2;// Tex2 addr 0x30d05800 res 4x4x1 dim 5 tm: 2 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x33ce0000 res 256x256x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 0 border: 1
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0x30d03000 res 4x4x1 dim 1 tm: 2 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0x13614000 res 4076x4096x1 dim 1 tm: 4 format 0031 compSel: 0 1 4 4 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 6) uniform sampler2DArray textureUnitPS6;// Tex6 addr 0x12b88000 res 1024x1024x1 dim 5 tm: 4 format 0033 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler6 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 7) uniform sampler2D textureUnitPS7;// Tex7 addr 0x15407000 res 1024x1024x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x1) Sampler7 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 8) uniform sampler2D textureUnitPS8;// Tex8 addr 0x15227000 res 1024x1024x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x1) Sampler8 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 9) uniform sampler2D textureUnitPS9;// Tex9 addr 0x152ff000 res 1024x1024x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x1) Sampler9 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem5;
layout(location = 6) in vec4 passParameterSem6;
layout(location = 7) in vec4 passParameterSem7;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex0 = 0.0;
float cubeMapArrayIndex1 = 0.0;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f = passParameterSem4;
R5f = passParameterSem5;
R6f = passParameterSem6;
R7f = passParameterSem7;
R8f.xy = (texture(textureUnitPS8, R0f.xy).xy);
R9f.xy = (texture(textureUnitPS5, R5f.xy).xy);
R10f.xyz = (texture(textureUnitPS9, R0f.xy).xyz);
R12f.xyz = (texture(textureUnitPS7, R0f.xy).xyz);
// 0
R127f.x = mul_nonIEEE(R3f.z, R4f.y);
R126f.y = (R8f.y * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
R127f.z = (R8f.x * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
PV0f.z = R127f.z;
R127f.w = mul_nonIEEE(R3f.x, R4f.z);
PS0f = 1.0 / R7f.z;
// 1
backupReg0f = R7f.x;
backupReg1f = R7f.y;
R7f.x = mul_nonIEEE(backupReg0f, PS0f);
R7f.y = mul_nonIEEE(backupReg1f, PS0f);
PV1f.z = mul_nonIEEE(PV0f.z, PV0f.z);
R126f.w = mul_nonIEEE(R3f.y, R4f.x);
PS1f = 1.0 / R2f.w;
// 2
R11f.x = R2f.x * PS1f;
R11f.y = R2f.y * PS1f;
R123f.z = (mul_nonIEEE(-(R3f.y),R4f.z) + R127f.x);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R126f.y,R126f.y) + PV1f.z);
PV0f.w = R123f.w;
R122f.x = (mul_nonIEEE(-(R3f.z),R4f.x) + R127f.w);
PS0f = R122f.x;
// 3
PV1f.x = mul_nonIEEE(R3f.w, PV0f.z);
R127f.y = mul_nonIEEE(R3f.w, PS0f);
PV1f.z = -(PV0f.w) + 1.0;
PV1f.z = clamp(PV1f.z, 0.0, 1.0);
R123f.w = (mul_nonIEEE(-(R3f.x),R4f.y) + R126f.w);
PV1f.w = R123f.w;
PS1f = mul_nonIEEE(R3f.x, R127f.z);
// 4
PV0f.x = mul_nonIEEE(R3f.w, PV1f.w);
PV0f.y = mul_nonIEEE(R3f.z, R127f.z);
PV0f.z = mul_nonIEEE(R3f.y, R127f.z);
R123f.w = (mul_nonIEEE(R126f.y,PV1f.x) + PS1f);
PV0f.w = R123f.w;
R125f.y = sqrt(PV1f.z);
PS0f = R125f.y;
// 5
R3f.x = (mul_nonIEEE(R4f.x,PS0f) + PV0f.w);
R3f.y = (intBitsToFloat(uf_remappedPS[0].z) * intBitsToFloat(0x40c00000) + 2.0);
R123f.z = (mul_nonIEEE(R126f.y,PV0f.x) + PV0f.y);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R126f.y,R127f.y) + PV0f.z);
PV1f.w = R123f.w;
R2f.x = R5f.z;
PS1f = R2f.x;
// 6
backupReg0f = R4f.z;
R4f.x = -(R9f.y) + 1.0;
R5f.y = (mul_nonIEEE(R4f.y,R125f.y) + PV1f.w);
PV0f.y = R5f.y;
R4f.z = (mul_nonIEEE(backupReg0f,R125f.y) + PV1f.z);
PV0f.z = R4f.z;
R2f.w = R5f.w;
R2f.z = roundEven(0.0);
PS0f = R2f.z;
// 7
tempf.x = dot(vec4(R3f.x,PV0f.y,PV0f.z,-0.0),vec4(R3f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R4f.y = tempf.x;
R5f.z = intBitsToFloat(uf_remappedPS[1].w);
PS1f = R5f.z;
R7f.x = (texture(textureUnitPS3, R7f.xy).x);
R0f.xzw = (texture(textureUnitPS4, R11f.xy).xzw);
R8f.xyzw = (texture(textureUnitPS6, vec3(R2f.x,R2f.w,R2f.z)).xyzw);
// 0
tempf.x = dot(vec4(R6f.x,R6f.y,R6f.z,-0.0),vec4(R6f.x,R6f.y,R6f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
tempResultf = 1.0 / sqrt(R4f.y);
PS0f = tempResultf;
// 1
R127f.x = -(R7f.x) + 1.0;
R125f.y = mul_nonIEEE(R4f.z, PS0f);
R127f.z = mul_nonIEEE(R5f.y, PS0f);
PV1f.z = R127f.z;
R126f.w = mul_nonIEEE(R3f.x, PS0f);
PV1f.w = R126f.w;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 2
PV0f.x = PV1f.w * 1.0;
R124f.y = PV1f.z * 1.0;
R125f.z = mul_nonIEEE(R6f.y, PS1f);
R124f.w = mul_nonIEEE(R6f.x, PS1f);
PV0f.w = R124f.w;
R125f.w = mul_nonIEEE(R6f.z, PS1f);
PS0f = R125f.w;
// 3
PV1f.x = R126f.w * 1.0;
PV1f.y = mul_nonIEEE(PV0f.w, PV0f.x);
PV1f.z = R127f.z * 1.0;
R127f.w = R125f.y * 1.0;
PV1f.w = R127f.w;
R127f.z = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedPS[2].x)) + 0.0);
PS1f = R127f.z;
// 4
backupReg0f = R0f.x;
R123f.x = (mul_nonIEEE(R125f.z,R124f.y) + PV1f.y);
PV0f.x = R123f.x;
R125f.y = PV1f.x;
R125f.y *= 2.0;
R126f.z = PV1f.w;
R126f.z *= 2.0;
R5f.w = PV1f.z;
R5f.w *= 2.0;
PS0f = -(backupReg0f) + 1.0;
// 5
backupReg0f = R127f.w;
R124f.x = R126f.w * 1.0;
PV1f.y = R127f.z + PS0f;
R123f.z = (mul_nonIEEE(R125f.w,R127f.w) + PV0f.x);
PV1f.z = R123f.z;
R127f.w = mul_nonIEEE(R8f.x, intBitsToFloat(uf_remappedPS[3].x));
R124f.z = -(backupReg0f);
PS1f = R124f.z;
// 6
R123f.x = (mul_nonIEEE(-(PV1f.z),R126f.z) + R125f.w);
PV0f.x = R123f.x;
R126f.y = (mul_nonIEEE(-(PV1f.z),R5f.w) + R125f.z);
R6f.z = PV1f.y + R4f.x;
R6f.z = clamp(R6f.z, 0.0, 1.0);
PV0f.w = PV1f.z + 1.0;
PV0f.w = clamp(PV0f.w, 0.0, 1.0);
R126f.x = (mul_nonIEEE(-(PV1f.z),R125f.y) + R124f.w);
PS0f = R126f.x;
// 7
PV1f.x = mul_nonIEEE(R8f.z, intBitsToFloat(uf_remappedPS[3].z));
PV1f.y = mul_nonIEEE(R8f.y, intBitsToFloat(uf_remappedPS[3].y));
R126f.z = -(PV0f.x);
R11f.w = R2f.z;
tempResultf = log2(PV0f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 8
backupReg0f = R8f.w;
backupReg0f = R8f.w;
PV0f.x = mul_nonIEEE(R3f.y, PS1f);
R3f.y = mul_nonIEEE(R8f.w, R127f.w);
R11f.z = roundEven(1.0);
R8f.w = mul_nonIEEE(backupReg0f, PV1f.y);
R8f.y = mul_nonIEEE(backupReg0f, PV1f.x);
PS0f = R8f.y;
// 9
backupReg0f = R126f.x;
backupReg0f = R126f.x;
backupReg1f = R126f.z;
backupReg2f = R126f.y;
backupReg1f = R126f.z;
redcCUBE(vec4(R126f.z,R126f.z,backupReg0f,backupReg2f),vec4(R126f.y,backupReg0f,backupReg1f,backupReg1f),cubeMapSTM,cubeMapFaceId);
R126f.x = cubeMapSTM.x;
R126f.y = cubeMapSTM.y;
R126f.z = cubeMapSTM.z;
R126f.w = intBitsToFloat(cubeMapFaceId);
PV1f.x = R126f.x;
PV1f.y = R126f.y;
PV1f.z = R126f.z;
PV1f.w = R126f.w;
PS1f = exp2(PV0f.x);
PS1f *= 4.0;
PS1f = clamp(PS1f, 0.0, 1.0);
// 10
R127f.x = -(intBitsToFloat(uf_remappedPS[0].w)) + 1.0;
R125f.y = (intBitsToFloat(uf_remappedPS[0].y) * 0.5 + 1.0);
R123f.z = (mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[0].y)),PS1f) + intBitsToFloat(uf_remappedPS[0].y));
PV0f.z = R123f.z;
R127f.w = -(R0f.z) + 1.0;
PS0f = 1.0 / abs(PV1f.z);
// 11
R123f.x = (mul_nonIEEE(R126f.x,PS0f) + 1.5);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R126f.y,PS0f) + 1.5);
PV1f.y = R123f.y;
R2f.z = R126f.w;
R123f.w = (PV0f.z * intBitsToFloat(0x3ecccccd) + intBitsToFloat(uf_remappedPS[0].x));
R123f.w = clamp(R123f.w, 0.0, 1.0);
PV1f.w = R123f.w;
PS1f = -(PV0f.z) + 1.0;
// 12
R2f.x = PV1f.y;
R2f.y = PV1f.x;
R123f.z = (mul_nonIEEE(R127f.x,PS1f) + intBitsToFloat(uf_remappedPS[0].w));
PV0f.z = R123f.z;
R2f.w = PV1f.w * intBitsToFloat(0x40a00000);
R126f.z = R127f.w + 0.0;
PS0f = R126f.z;
// 13
backupReg0f = R125f.y;
redcCUBE(vec4(R124f.z,R124f.z,R124f.x,R124f.y),vec4(R124f.y,R124f.x,R124f.z,R124f.z),cubeMapSTM,cubeMapFaceId);
R125f.x = cubeMapSTM.x;
R125f.y = cubeMapSTM.y;
R125f.z = cubeMapSTM.z;
R125f.w = intBitsToFloat(cubeMapFaceId);
PV1f.x = R125f.x;
PV1f.y = R125f.y;
PV1f.z = R125f.z;
PV1f.w = R125f.w;
R124f.y = mul_nonIEEE(PV0f.z, backupReg0f);
PS1f = R124f.y;
// 14
PV0f.x = -(R9f.x) + 1.0;
R126f.y = mul_nonIEEE(R10f.x, intBitsToFloat(uf_remappedPS[4].x));
R9f.z = PV1f.w;
R127f.w = mul_nonIEEE(R10f.y, intBitsToFloat(uf_remappedPS[4].y));
PS0f = 1.0 / abs(PV1f.z);
// 15
PV1f.x = mul_nonIEEE(R10f.z, intBitsToFloat(uf_remappedPS[4].z));
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].w), R124f.y);
R123f.z = (mul_nonIEEE(R125f.x,PS0f) + 1.5);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R125f.y,PS0f) + 1.5);
PV1f.w = R123f.w;
R5f.w = R126f.z + PV0f.x;
PS1f = R5f.w;
// 16
R9f.x = PV1f.w;
R9f.y = PV1f.z;
R10f.z = mul_nonIEEE(R126f.y, PV1f.y);
R3f.w = mul_nonIEEE(R127f.w, PV1f.y);
R4f.w = mul_nonIEEE(PV1f.x, PV1f.y);
PS0f = R4f.w;
// 17
PV1f.x = R0f.w;
PV1f.x *= 2.0;
R7f.w = 1.0;
// 18
PV0f.w = max(PV1f.x, intBitsToFloat(0x3dcccccd));
// 19
R4f.z = min(PV0f.w, 1.0);
// 0
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].w), intBitsToFloat(uf_remappedPS[6].w));
// 1
backupReg0f = R6f.z;
R4f.x = intBitsToFloat(uf_remappedPS[7].x) + -(1.0);
R10f.y = intBitsToFloat(uf_remappedPS[7].y) + -(1.0);
R6f.z = mul_nonIEEE(PV0f.y, backupReg0f);
PV1f.z = R6f.z;
PV1f.w = intBitsToFloat(uf_remappedPS[8].y) * 1.0;
// 2
R0f.x = mul_nonIEEE(R3f.y, PV1f.w);
R3f.y = mul_nonIEEE(R8f.w, PV1f.w);
R0f.z = mul_nonIEEE(R8f.y, PV1f.w);
R9f.w = PV1f.z;
R10f.x = (mul_nonIEEE(-(PV1f.z),intBitsToFloat(uf_remappedPS[9].z)) + 1.0);
PS0f = R10f.x;
cubeMapArrayIndex0 = R5f.z;
R8f.xyzw = (textureLod(textureUnitPS0, vec4(redcCUBEReverse(R2f.xy,floatBitsToInt(R2f.z)),cubeMapArrayIndex0),R2f.w).xyzw);
R2f.xyz = (texture(textureUnitPS2, vec3(R11f.x,R11f.y,R11f.w)).xyz);
R9f.xyz = (textureLod(textureUnitPS1, vec4(redcCUBEReverse(R9f.xy,floatBitsToInt(R9f.z)),cubeMapArrayIndex1),R9f.w).xyz);
R11f.xyz = (texture(textureUnitPS2, vec3(R11f.x,R11f.y,R11f.z)).xyz);
// 0
backupReg0f = R0f.x;
backupReg1f = R0f.z;
tempf.x = dot(vec4(backupReg0f,R3f.y,backupReg1f,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
tempResultf = log2(R8f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 1
backupReg0f = R0f.x;
backupReg1f = R0f.z;
PV1f.x = R3f.y + 0.0;
PV1f.y = backupReg0f + 0.0;
PV1f.z = backupReg1f + 0.0;
R127f.w = (mul_nonIEEE(-(PV0f.x),intBitsToFloat(uf_remappedPS[10].z)) + R6f.z);
R127f.w = clamp(R127f.w, 0.0, 1.0);
R126f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[11].y), PS0f);
PS1f = R126f.y;
// 2
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[8].z), intBitsToFloat(uf_remappedPS[5].x));
R125f.y = (mul_nonIEEE(R2f.z,R10f.x) + PV1f.z);
R126f.z = (mul_nonIEEE(R2f.y,R10f.x) + PV1f.x);
R123f.w = (mul_nonIEEE(R2f.x,R10f.x) + PV1f.y);
PV0f.w = R123f.w;
PS0f = mul_nonIEEE(intBitsToFloat(uf_remappedPS[8].z), intBitsToFloat(uf_remappedPS[5].y));
// 3
backupReg0f = R126f.y;
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[8].z), intBitsToFloat(uf_remappedPS[5].z));
R126f.y = PV0f.w + R9f.x;
R125f.z = mul_nonIEEE(R12f.x, PV0f.x);
R125f.w = mul_nonIEEE(R12f.y, PS0f);
R125f.x = exp2(backupReg0f);
PS1f = R125f.x;
// 4
backupReg0f = R125f.y;
PV0f.x = R126f.z + R9f.y;
R125f.y = mul_nonIEEE(R12f.z, PV1f.x);
R126f.z = (mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[10].y)),R127f.w) + 1.0);
R127f.w = backupReg0f + R9f.z;
R124f.x = (mul_nonIEEE(R11f.x,R10f.x) + 0.0);
PS0f = R124f.x;
// 5
backupReg0f = R126f.y;
R127f.x = (mul_nonIEEE(R11f.y,R10f.x) + 0.0);
R126f.y = (mul_nonIEEE(R125f.z,backupReg0f) + 0.0);
R125f.z = (mul_nonIEEE(R11f.z,R10f.x) + 0.0);
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].w), intBitsToFloat(uf_remappedPS[7].w));
R126f.x = (mul_nonIEEE(R125f.w,PV0f.x) + 0.0);
PS1f = R126f.x;
// 6
backupReg0f = R125f.y;
backupReg1f = R125f.x;
R125f.x = mul_nonIEEE(R5f.w, PV1f.w);
R125f.x = clamp(R125f.x, 0.0, 1.0);
R125f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].x), R126f.z);
PV0f.y = R125f.y;
R126f.z = (mul_nonIEEE(backupReg0f,R127f.w) + 0.0);
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[11].x), backupReg1f);
// 7
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(R8f.z,PV0f.w) + R125f.z);
R124f.y = (mul_nonIEEE(R8f.y,PV0f.w) + backupReg0f);
R123f.z = (mul_nonIEEE(R8f.x,PV0f.w) + R124f.x);
PV1f.z = R123f.z;
R127f.w = intBitsToFloat(uf_remappedPS[7].z) + -(1.0);
PS1f = mul_nonIEEE(R10f.z, PV0f.y);
// 8
R123f.x = (mul_nonIEEE(PV1f.z,PS1f) + R126f.y);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R4f.x,R125f.x) + 1.0);
PV0f.y = R123f.y;
PV0f.z = mul_nonIEEE(R4f.w, R125f.y);
PV0f.w = mul_nonIEEE(R3f.w, R125f.y);
R124f.x = (mul_nonIEEE(R10f.y,R125f.x) + 1.0);
PS0f = R124f.x;
// 9
R123f.x = (mul_nonIEEE(R127f.x,PV0f.z) + R126f.z);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R124f.y,PV0f.w) + R126f.x);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R127f.w,R125f.x) + 1.0);
PV1f.z = R123f.z;
PV1f.w = mul_nonIEEE(PV0f.y, PV0f.x);
// 10
backupReg0f = R124f.x;
R124f.x = mul_nonIEEE(PV1f.w, R4f.z);
PV0f.x = R124f.x;
PV0f.y = mul_nonIEEE(PV1f.z, PV1f.x);
PV0f.z = mul_nonIEEE(backupReg0f, PV1f.y);
// 11
R127f.x = mul_nonIEEE(PV0f.z, R4f.z);
PV1f.x = R127f.x;
PV1f.z = R1f.x + -(PV0f.x);
R127f.w = mul_nonIEEE(PV0f.y, R4f.z);
PV1f.w = R127f.w;
// 12
PV0f.x = R1f.z + -(PV1f.w);
PV0f.y = R1f.y + -(PV1f.x);
R7f.x = (mul_nonIEEE(PV1f.z,R1f.w) + R124f.x);
PS0f = R7f.x;
// 13
R7f.y = (mul_nonIEEE(PV0f.y,R1f.w) + R127f.x);
R7f.z = (mul_nonIEEE(PV0f.x,R1f.w) + R127f.w);
// export
passPixelColor0 = vec4(R7f.x, R7f.y, R7f.z, R7f.w);
}
