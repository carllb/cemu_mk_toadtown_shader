#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader f52e2d2c35d91168
uniform ivec4 uf_remappedPS[17];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf50cf800 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x12e68000 res 64x64x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0xf4d4b000 res 1280x720x1 dim 1 tm: 4 format 0019 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x14ca0000 res 256x256x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 0 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
// 0
backupReg0f = R0f.w;
R1f.w = 1.0;
PS0f = 1.0 / backupReg0f;
// 1
PV1f.z = mul_nonIEEE(R0f.x, PS0f);
PV1f.w = mul_nonIEEE(R0f.y, PS0f);
R2f.w = 1.0 / intBitsToFloat(uf_remappedPS[0].y);
PS1f = R2f.w;
// 2
R0f.x = (PV1f.z * 0.5 + 0.5);
R0f.y = (PV1f.w * 0.5 + 0.5);
R2f.z = (mul_nonIEEE(PV1f.z,-(intBitsToFloat(uf_remappedPS[1].x))) + -(intBitsToFloat(uf_remappedPS[1].z)));
R0f.w = (mul_nonIEEE(PV1f.w,-(intBitsToFloat(uf_remappedPS[1].y))) + -(intBitsToFloat(uf_remappedPS[1].w)));
R0f.z = (texture(textureUnitPS0, R0f.xy).x);
R1f.xyz = (texture(textureUnitPS2, R0f.xy).xyz);
// 0
R126f.x = (R1f.x * 2.0 + -(1.0));
R126f.y = (R1f.y * 2.0 + -(1.0));
R126f.z = (R1f.z * 2.0 + -(1.0));
PV0f.z = R126f.z;
R123f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].y),R0f.z) + intBitsToFloat(uf_remappedPS[2].x));
PV0f.w = R123f.w;
// 1
R127f.x = mul_nonIEEE(R2f.z, -(PV0f.w));
PV1f.x = R127f.x;
R127f.y = mul_nonIEEE(R0f.w, -(PV0f.w));
PV1f.y = R127f.y;
R127f.z = -(PV0f.w);
PV1f.z = R127f.z;
PS1f = mul_nonIEEE(PV0f.z, PV0f.z);
// 2
R0f.x = dot(vec4(PV1f.x,PV1f.y,PV1f.z,R1f.w),vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),intBitsToFloat(uf_remappedPS[3].w)));
PV0f.x = R0f.x;
PV0f.y = R0f.x;
PV0f.z = R0f.x;
PV0f.w = R0f.x;
R122f.x = (mul_nonIEEE(R126f.y,R126f.y) + PS1f);
PS0f = R122f.x;
// 3
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R1f.w),vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R2f.y = tempf.x;
R122f.x = (mul_nonIEEE(R126f.x,R126f.x) + PS0f);
PS1f = R122f.x;
// 4
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R1f.w),vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R2f.z = tempf.x;
tempResultf = 1.0 / sqrt(PS1f);
R127f.w = tempResultf;
PS0f = R127f.w;
// 5
backupReg0f = R0f.x;
tempf.x = dot(vec4(backupReg0f,R2f.y,PV0f.x,-0.0),vec4(intBitsToFloat(uf_remappedPS[6].x),intBitsToFloat(uf_remappedPS[6].y),intBitsToFloat(uf_remappedPS[6].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.z = tempf.x;
R2f.x = mul_nonIEEE(R126f.x, PS0f);
PS1f = R2f.x;
// 6
backupReg0f = R0f.x;
backupReg1f = R126f.y;
tempf.x = dot(vec4(backupReg0f,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedPS[7].x),intBitsToFloat(uf_remappedPS[7].y),intBitsToFloat(uf_remappedPS[7].z),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.y = tempf.x;
R0f.y = mul_nonIEEE(backupReg1f, R127f.w);
PS0f = R0f.y;
// 7
PV1f.x = mul_nonIEEE(R127f.z, intBitsToFloat(uf_remappedPS[8].x));
PV1f.y = mul_nonIEEE(R127f.z, intBitsToFloat(uf_remappedPS[9].x));
PV1f.z = mul_nonIEEE(R127f.z, intBitsToFloat(uf_remappedPS[9].y));
PV1f.w = mul_nonIEEE(R127f.z, intBitsToFloat(uf_remappedPS[8].y));
R0f.z = mul_nonIEEE(R126f.z, R127f.w);
PS1f = R0f.z;
// 8
R123f.x = (mul_nonIEEE(R126f.y,intBitsToFloat(uf_remappedPS[9].z)) + PV1f.y);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R126f.y,intBitsToFloat(uf_remappedPS[9].w)) + PV1f.z);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R126f.y,intBitsToFloat(uf_remappedPS[8].z)) + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R126f.y,intBitsToFloat(uf_remappedPS[8].w)) + PV1f.w);
PV0f.w = R123f.w;
// 9
R1f.xyz = vec3(PV0f.z,PV0f.w,PV0f.y) + vec3(intBitsToFloat(uf_remappedPS[10].x),intBitsToFloat(uf_remappedPS[10].y),intBitsToFloat(uf_remappedPS[11].y));
R1f.w = PV0f.x + intBitsToFloat(uf_remappedPS[11].x);
R1f.xy = (texture(textureUnitPS1, R1f.xy).xy);
// 0
backupReg0f = R0f.x;
PV0f.x = backupReg0f + -(intBitsToFloat(uf_remappedPS[12].x));
R126f.y = (R1f.y * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
R127f.z = (R1f.x * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
PV0f.w = R2f.z + -(intBitsToFloat(uf_remappedPS[12].z));
// 1
PV1f.x = R2f.y + -(intBitsToFloat(uf_remappedPS[0].x));
PV1f.y = max(PV0f.w, -(PV0f.w));
PV1f.z = max(PV0f.x, -(PV0f.x));
R126f.w = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[13].z)) + intBitsToFloat(uf_remappedPS[13].w));
R126f.w = clamp(R126f.w, 0.0, 1.0);
// 2
R126f.x = (mul_nonIEEE(PV1f.z,intBitsToFloat(uf_remappedPS[14].w)) + intBitsToFloat(uf_remappedPS[14].x));
R126f.z = mul_nonIEEE(PV1f.x, R2f.w);
R126f.z = clamp(R126f.z, 0.0, 1.0);
PV0f.z = R126f.z;
R127f.w = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedPS[14].w)) + intBitsToFloat(uf_remappedPS[14].z));
// 3
backupReg0f = R0f.y;
backupReg1f = R0f.z;
tempf.x = dot(vec4(R2f.x,backupReg0f,backupReg1f,-0.0),vec4(intBitsToFloat(uf_remappedPS[15].x),intBitsToFloat(uf_remappedPS[15].y),intBitsToFloat(uf_remappedPS[15].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R122f.x = (-(PV0f.z) * 0.25 + 0.25);
PS1f = R122f.x;
// 4
R123f.x = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[13].x)) + intBitsToFloat(uf_remappedPS[13].y));
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV0f.x = R123f.x;
PV0f.y = PS1f + intBitsToFloat(0x3f400000);
R0f.z = min(R126f.x, R127f.w);
R0f.z = clamp(R0f.z, 0.0, 1.0);
R123f.w = (PV1f.x * intBitsToFloat(0x3f400000) + 0.25);
PV0f.w = R123f.w;
R2f.x = (mul_nonIEEE(R127f.z,intBitsToFloat(uf_remappedPS[0].z)) + R1f.w);
PS0f = R2f.x;
// 5
R2f.y = (mul_nonIEEE(R126f.y,intBitsToFloat(uf_remappedPS[0].w)) + R1f.z);
R1f.z = (-(R126f.z) * 0.25 + PV0f.w);
R1f.z = clamp(R1f.z, 0.0, 1.0);
R1f.w = mul_nonIEEE(R126f.w, PV0f.x);
R0f.x = 1.0 / PV0f.y;
PS1f = R0f.x;
R2f.xyz = (texture(textureUnitPS3, R2f.xy).xyz);
// 0
backupReg0f = R0f.z;
R126f.x = mul_nonIEEE(R2f.y, intBitsToFloat(uf_remappedPS[16].y));
R126f.y = mul_nonIEEE(R2f.x, intBitsToFloat(uf_remappedPS[16].x));
PV0f.z = mul_nonIEEE(backupReg0f, R1f.w);
R126f.w = mul_nonIEEE(R1f.z, R0f.x);
R127f.w = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedPS[16].z));
PS0f = R127f.w;
// 1
PV1f.y = mul_nonIEEE(PV0f.z, PV0f.z);
// 2
PV0f.z = mul_nonIEEE(PV1f.y, R126f.w);
// 3
R0f.x = mul_nonIEEE(PV0f.z, R126f.y);
R0f.y = mul_nonIEEE(PV0f.z, R126f.x);
R0f.z = mul_nonIEEE(PV0f.z, R127f.w);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
