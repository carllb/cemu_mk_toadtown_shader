#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader b29d7a6b60e60d23
uniform ivec4 uf_remappedPS[5];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x19018000 res 128x128x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x19024000 res 128x128x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x19020000 res 32x32x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem4;
R3f.xy = (texture(textureUnitPS1, R2f.xy).xy);
R2f.x = (texture(textureUnitPS2, R2f.zw).w);
// 0
R4f.x = -(intBitsToFloat(uf_remappedPS[0].x)) + intBitsToFloat(uf_remappedPS[1].x);
R2f.y = -(intBitsToFloat(uf_remappedPS[0].y)) + intBitsToFloat(uf_remappedPS[1].y);
R123f.z = (R3f.x * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
PV0f.z = R123f.z;
R123f.w = (R3f.y * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
PV0f.w = R123f.w;
// 1
R3f.x = (mul_nonIEEE(PV0f.z,intBitsToFloat(uf_remappedPS[2].x)) + R0f.x);
R3f.y = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[2].y)) + R0f.y);
R3f.xyzw = (texture(textureUnitPS0, R3f.xy).xyzw);
// 0
PV0f.x = mul_nonIEEE(R3f.w, R2f.x);
R127f.y = -(intBitsToFloat(uf_remappedPS[0].z)) + intBitsToFloat(uf_remappedPS[1].z);
PV0f.z = R3f.x + R3f.y;
// 1
backupReg0f = R0f.w;
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].z), intBitsToFloat(uf_remappedPS[4].x));
PV1f.y = R3f.z + PV0f.z;
R127f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].z), intBitsToFloat(uf_remappedPS[4].y));
R0f.w = mul_nonIEEE(backupReg0f, PV0f.x);
R0f.w = clamp(R0f.w, 0.0, 1.0);
PS1f = R0f.w;
// 2
PV0f.x = PV1f.y * intBitsToFloat(0x3eaaaaab);
R127f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].z), intBitsToFloat(uf_remappedPS[4].z));
// 3
R123f.x = (mul_nonIEEE(R4f.x,PV0f.x) + intBitsToFloat(uf_remappedPS[0].x));
PV1f.x = R123f.x;
R123f.z = (mul_nonIEEE(R127f.y,PV0f.x) + intBitsToFloat(uf_remappedPS[0].z));
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R2f.y,PV0f.x) + intBitsToFloat(uf_remappedPS[0].y));
PV1f.w = R123f.w;
// 4
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(PV1f.w,R127f.w) + 0.0);
PV0f.x = R127f.x;
R127f.y = (mul_nonIEEE(PV1f.x,backupReg0f) + 0.0);
PV0f.y = R127f.y;
R127f.w = (mul_nonIEEE(PV1f.z,R127f.z) + 0.0);
PV0f.w = R127f.w;
// 5
PV1f.x = R1f.z + -(PV0f.w);
PV1f.y = R1f.y + -(PV0f.x);
PV1f.z = R1f.x + -(PV0f.y);
// 6
R0f.x = (mul_nonIEEE(PV1f.z,R1f.w) + R127f.y);
R0f.y = (mul_nonIEEE(PV1f.y,R1f.w) + R127f.x);
R0f.z = (mul_nonIEEE(PV1f.x,R1f.w) + R127f.w);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
