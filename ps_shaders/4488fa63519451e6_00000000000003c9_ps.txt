#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 4488fa63519451e6
uniform ivec4 uf_remappedPS[3];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf50cf800 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4d4b000 res 1280x720x1 dim 1 tm: 4 format 0019 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) noperspective in vec4 passParameterSem0;
layout(location = 1) noperspective in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R1f.z = (texture(textureUnitPS0, R1f.xy).x);
R2f.xyz = (texture(textureUnitPS1, R1f.xy).xyz);
// 0
R127f.x = (R2f.x * 2.0 + -(1.0));
R127f.y = (R2f.y * 2.0 + -(1.0));
R126f.z = (R2f.z * 2.0 + -(1.0));
R123f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),R1f.z) + intBitsToFloat(uf_remappedPS[0].x));
PV0f.w = R123f.w;
// 1
R123f.x = (mul_nonIEEE(R0f.x,-(PV0f.w)) + -(intBitsToFloat(uf_remappedPS[1].x)));
PV1f.x = R123f.x;
R126f.y = (mul_nonIEEE(R0f.y,-(PV0f.w)) + -(intBitsToFloat(uf_remappedPS[1].y)));
PV1f.y = R126f.y;
R125f.z = (mul_nonIEEE(R0f.z,-(PV0f.w)) + -(intBitsToFloat(uf_remappedPS[1].z)));
PV1f.z = R125f.z;
// 2
tempf.x = dot(vec4(PV1f.x,PV1f.y,PV1f.z,-0.0),vec4(PV1f.x,PV1f.y,PV1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.z = tempf.x;
PS0f = mul_nonIEEE(R127f.x, PV1f.x);
// 3
R123f.z = (mul_nonIEEE(R127f.y,R126f.y) + PS0f);
PV1f.z = R123f.z;
PS1f = sqrt(PV0f.x);
// 4
R123f.x = (mul_nonIEEE(-(PS1f),intBitsToFloat(uf_remappedPS[2].w)) + 1.0);
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R126f.z,R125f.z) + PV1f.z);
PV0f.y = R123f.y;
tempResultf = 1.0 / sqrt(R127f.z);
PS0f = tempResultf;
// 5
R127f.x = mul_nonIEEE(PS0f, -(PV0f.y));
R127f.x = clamp(R127f.x, 0.0, 1.0);
tempResultf = log2(PV0f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 6
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w), PS1f);
// 7
PS1f = exp2(PV0f.z);
// 8
PV0f.w = mul_nonIEEE(PS1f, R127f.x);
// 9
R0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].x), PV0f.w);
R0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].y), PV0f.w);
R0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), PV0f.w);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
