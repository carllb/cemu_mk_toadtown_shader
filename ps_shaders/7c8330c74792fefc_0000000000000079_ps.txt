#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 7c8330c74792fefc
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf5357000 res 64x64x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i.x = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.xy)).x);
// 0
backupReg0i = R0i.x;
backupReg0i = R0i.x;
backupReg0i = R0i.x;
backupReg0i = R0i.x;
backupReg1i = R0i.y;
PV0i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(0x3f7851ec)));
PV0i.y = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x42055556));
PV0i.y = clampFI32(PV0i.y);
PV0i.z = ((intBitsToFloat(0x3cf5c28f) > intBitsToFloat(backupReg0i))?int(0xFFFFFFFF):int(0x0));
R127i.w = ((intBitsToFloat(backupReg0i) > intBitsToFloat(0x3f7851ec))?int(0xFFFFFFFF):int(0x0));
R127i.y = floatBitsToInt(intBitsToFloat(backupReg1i) * intBitsToFloat(0x42055556));
R127i.y = clampFI32(R127i.y);
PS0i = R127i.y;
// 1
R127i.x = ((PV0i.z == 0)?(0x3f800000):(PV0i.y));
PV1i.x = R127i.x;
R123i.y = floatBitsToInt((-(intBitsToFloat(PV0i.x)) * intBitsToFloat(0x42055556) + 1.0));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
R127i.z = ((intBitsToFloat(0x3cf5c28f) > intBitsToFloat(R0i.y))?int(0xFFFFFFFF):int(0x0));
PV1i.w = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(0x3f7851ec)));
R126i.z = ((intBitsToFloat(R0i.y) > intBitsToFloat(0x3f7851ec))?int(0xFFFFFFFF):int(0x0));
PS1i = R126i.z;
// 2
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PV1i.y)));
R126i.y = floatBitsToInt((-(intBitsToFloat(PV1i.w)) * intBitsToFloat(0x42055556) + 1.0));
R126i.y = clampFI32(R126i.y);
R126i.w = floatBitsToInt(intBitsToFloat(R1i.x) + -(intBitsToFloat(0x3d4ccccd)));
R126i.w = clampFI32(R126i.w);
// 3
backupReg0i = R127i.w;
R127i.w = ((backupReg0i == 0)?(R127i.x):(PV0i.x));
PV1i.w = R127i.w;
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R127i.y)));
// 5
backupReg0i = R127i.w;
R127i.w = ((R127i.z == 0)?(backupReg0i):(PV0i.x));
PV1i.w = R127i.w;
// 6
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R126i.y)));
// 7
R123i.z = ((R126i.z == 0)?(R127i.w):(PV0i.w));
PV1i.z = R123i.z;
// 8
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + -(intBitsToFloat(0x3d4ccccd)));
PV0i.y = clampFI32(PV0i.y);
// 9
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(PV0i.y)));
// export
passPixelColor0 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.x), intBitsToFloat(R1i.x), intBitsToFloat(R1i.x));
}
