#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 5d35fd80c50c0de4
uniform ivec4 uf_remappedPS[7];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf45c5000 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2DArrayShadow textureUnitPS1;// Tex1 addr 0xf494a800 res 1536x1536x1 dim 5 tm: 4 format 0005 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 6 6 6 border: 2
layout(location = 0) noperspective in vec4 passParameterSem0;
layout(location = 1) noperspective in vec4 passParameterSem4;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem4;
R1f.x = (texture(textureUnitPS0, R1f.xy).x);
// 0
R126f.x = 1.0;
R1f.z = roundEven(0.0);
R123f.w = (mul_nonIEEE(-(R1f.x),intBitsToFloat(uf_remappedPS[0].y)) + 1.0);
PV0f.w = R123f.w;
R2f.x = intBitsToFloat(uf_remappedPS[1].x);
PS0f = R2f.x;
// 1
R2f.z = intBitsToFloat(uf_remappedPS[1].z);
R2f.w = intBitsToFloat(uf_remappedPS[1].w);
PS1f = 1.0 / PV0f.w;
// 2
PV0f.y = mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[0].x)), PS1f);
// 3
R127f.x = mul_nonIEEE(R0f.x, PV0f.y);
PV1f.x = R127f.x;
R127f.y = mul_nonIEEE(R0f.y, PV0f.y);
PV1f.y = R127f.y;
R127f.z = PV0f.y;
PV1f.z = R127f.z;
R126f.w = -(PV0f.y) + -(intBitsToFloat(uf_remappedPS[2].x));
// 4
tempf.x = dot(vec4(PV1f.x,PV1f.y,PV1f.z,R126f.x),vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),intBitsToFloat(uf_remappedPS[3].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
// 5
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R126f.x),vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.w = 1.0 / PV0f.x;
PS1f = R127f.w;
// 6
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R126f.x),vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.z = mul_nonIEEE(PV1f.x, PS1f);
PS0f = R126f.z;
// 7
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R126f.x),vec4(intBitsToFloat(uf_remappedPS[6].x),intBitsToFloat(uf_remappedPS[6].y),intBitsToFloat(uf_remappedPS[6].z),intBitsToFloat(uf_remappedPS[6].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R1f.x = mul_nonIEEE(PV0f.x, R127f.w);
PS1f = R1f.x;
// 8
R0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), R126f.w);
R0f.x = clamp(R0f.x, 0.0, 1.0);
R1f.y = mul_nonIEEE(PV1f.x, R127f.w);
R1f.w = R126f.z;
R1f.w = clamp(R1f.w, 0.0, 1.0);
R1f.x = (texture(textureUnitPS1, vec4(R1f.x,R1f.y,R1f.z,R1f.w)));
// 0
R2f.y = R1f.x + R0f.x;
// export
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
