#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 1ceebb325ef84136
uniform ivec4 uf_remappedPS[8];
layout(binding = 0) uniform samplerCubeArray textureUnitPS0;// Tex0 addr 0x42892000 res 128x128x8 dim 3 tm: 4 format 0033 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x30) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2DArray textureUnitPS1;// Tex1 addr 0xf5292000 res 1280x720x2 dim 5 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x2) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x1a73a000 res 8x64x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x1a734000 res 128x256x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 1 0 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0x1a15c000 res 256x256x1 dim 1 tm: 4 format 0235 compSel: 0 1 4 5 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem5;
layout(location = 6) in vec4 passParameterSem6;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex0 = 0.0;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f = passParameterSem4;
R5f = passParameterSem5;
R6f = passParameterSem6;
R7f.xy = (texture(textureUnitPS4, R6f.zw).xy);
R0f.xyz = (texture(textureUnitPS2, R0f.xy).xyz);
R6f.xyz = (texture(textureUnitPS3, R6f.xy).xyz);
// 0
PV0f.x = mul_nonIEEE(R3f.z, R4f.y);
PV0f.y = mul_nonIEEE(R7f.x, R7f.x);
PV0f.z = mul_nonIEEE(R3f.x, R4f.z);
PV0f.w = mul_nonIEEE(R3f.y, R4f.x);
R127f.x = mul_nonIEEE(R3f.x, R7f.x);
PS0f = R127f.x;
// 1
R123f.x = (mul_nonIEEE(R7f.y,R7f.y) + PV0f.y);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(-(R3f.z),R4f.x) + PV0f.z);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(-(R3f.y),R4f.z) + PV0f.x);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(-(R3f.x),R4f.y) + PV0f.w);
PV1f.w = R123f.w;
R127f.w = mul_nonIEEE(R3f.y, R7f.x);
PS1f = R127f.w;
// 2
PV0f.x = mul_nonIEEE(R3f.w, PV1f.z);
PV0f.y = mul_nonIEEE(R3f.w, PV1f.w);
PV0f.z = mul_nonIEEE(R3f.w, PV1f.y);
PV0f.w = -(PV1f.x) + 1.0;
PV0f.w = clamp(PV0f.w, 0.0, 1.0);
PS0f = mul_nonIEEE(R3f.z, R7f.x);
// 3
R123f.x = (mul_nonIEEE(R7f.y,PV0f.z) + R127f.w);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R7f.y,PV0f.x) + R127f.x);
PV1f.y = R123f.y;
R3f.z = intBitsToFloat(uf_remappedPS[0].x);
R123f.w = (mul_nonIEEE(R7f.y,PV0f.y) + PS0f);
PV1f.w = R123f.w;
PS1f = sqrt(PV0f.w);
// 4
R127f.x = (mul_nonIEEE(R4f.x,PS1f) + PV1f.y);
PV0f.x = R127f.x;
R127f.y = (mul_nonIEEE(R4f.y,PS1f) + PV1f.x);
PV0f.y = R127f.y;
R127f.z = (mul_nonIEEE(R4f.z,PS1f) + PV1f.w);
PV0f.z = R127f.z;
R4f.w = intBitsToFloat(uf_remappedPS[1].x) * intBitsToFloat(0x40a00000);
R3f.w = intBitsToFloat(uf_remappedPS[0].y);
PS0f = R3f.w;
// 5
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.z = 1.0 / R2f.w;
PS1f = R126f.z;
// 6
tempf.x = dot(vec4(R5f.x,R5f.y,R5f.z,-0.0),vec4(R5f.x,R5f.y,R5f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 7
backupReg0f = R127f.x;
backupReg1f = R127f.z;
R127f.x = mul_nonIEEE(backupReg0f, PS0f);
PV1f.x = R127f.x;
R7f.y = R2f.y * R126f.z;
R127f.z = mul_nonIEEE(backupReg1f, PS0f);
R127f.w = mul_nonIEEE(R127f.y, PS0f);
PV1f.w = R127f.w;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 8
R126f.x = PV1f.w * 1.0;
PV0f.y = PV1f.x * 1.0;
R124f.z = mul_nonIEEE(R5f.x, PS1f);
PV0f.z = R124f.z;
R126f.w = mul_nonIEEE(R5f.y, PS1f);
R125f.z = mul_nonIEEE(R5f.z, PS1f);
PS0f = R125f.z;
// 9
backupReg0f = R127f.x;
backupReg1f = R127f.z;
R127f.x = R127f.w * 1.0;
PV1f.y = mul_nonIEEE(PV0f.z, PV0f.y);
R127f.z = backupReg0f * 1.0;
R127f.w = backupReg1f * 1.0;
R7f.x = R2f.x * R126f.z;
PS1f = R7f.x;
// 10
R123f.x = (mul_nonIEEE(R126f.w,R126f.x) + PV1f.y);
PV0f.x = R123f.x;
R2f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].y), intBitsToFloat(uf_remappedPS[2].w));
R7f.z = roundEven(1.0);
R2f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].x), intBitsToFloat(uf_remappedPS[2].w));
R2f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(uf_remappedPS[2].w));
PS0f = R2f.x;
// 11
R123f.w = (mul_nonIEEE(R125f.z,R127f.w) + PV0f.x)*2.0;
PV1f.w = R123f.w;
R8f.w = 1.0;
PS1f = R8f.w;
// 12
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(-(PV1f.w),R127f.z) + R124f.z);
R127f.y = (mul_nonIEEE(-(PV1f.w),backupReg0f) + R126f.w);
R123f.z = (mul_nonIEEE(-(PV1f.w),R127f.w) + R125f.z);
PV0f.z = R123f.z;
// 13
R127f.z = -(PV0f.z);
PV1f.z = R127f.z;
// 14
backupReg0f = R127f.x;
backupReg0f = R127f.x;
backupReg1f = R127f.y;
redcCUBE(vec4(PV1f.z,PV1f.z,backupReg0f,backupReg1f),vec4(R127f.y,backupReg0f,PV1f.z,PV1f.z),cubeMapSTM,cubeMapFaceId);
R127f.x = cubeMapSTM.x;
R127f.y = cubeMapSTM.y;
R127f.z = cubeMapSTM.z;
R127f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R127f.x;
PV0f.y = R127f.y;
PV0f.z = R127f.z;
PV0f.w = R127f.w;
// 15
R4f.z = PV0f.w;
PS1f = 1.0 / abs(PV0f.z);
// 16
R123f.x = (mul_nonIEEE(R127f.y,PS1f) + 1.5);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R127f.x,PS1f) + 1.5);
PV0f.y = R123f.y;
// 17
R4f.x = PV0f.x;
R4f.y = PV0f.y;
cubeMapArrayIndex0 = R3f.z;
R5f.xyzw = (textureLod(textureUnitPS0, vec4(redcCUBEReverse(R4f.xy,floatBitsToInt(R4f.z)),cubeMapArrayIndex0),R4f.w).xyzw);
cubeMapArrayIndex0 = R3f.w;
R3f.xyzw = (textureLod(textureUnitPS0, vec4(redcCUBEReverse(R4f.xy,floatBitsToInt(R4f.z)),cubeMapArrayIndex0),R4f.w).xyzw);
R7f.xyz = (texture(textureUnitPS1, vec3(R7f.x,R7f.y,R7f.z)).xyz);
// 0
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].z), intBitsToFloat(uf_remappedPS[4].x));
R4f.y = (R7f.x * 1.0 + 0.0);
R4f.z = (R7f.y * 1.0 + 0.0);
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].z), intBitsToFloat(uf_remappedPS[4].y));
tempResultf = log2(R5f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 1
backupReg0f = R0f.y;
R7f.x = (R7f.z * 1.0 + 0.0);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].y), PS0f);
R7f.z = (mul_nonIEEE(backupReg0f,PV0f.w) + 0.0);
R4f.w = (mul_nonIEEE(R0f.x,PV0f.x) + 0.0);
tempResultf = log2(R3f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 2
backupReg0f = R2f.y;
backupReg1f = R2f.x;
R2f.x = mul_nonIEEE(R2f.w, intBitsToFloat(uf_remappedPS[6].x));
R2f.y = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedPS[6].x));
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].y), PS1f);
R2f.w = mul_nonIEEE(backupReg1f, intBitsToFloat(uf_remappedPS[6].x));
PS0f = exp2(PV1f.y);
// 3
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].x), PS0f);
PS1f = exp2(PV0f.z);
// 4
backupReg0f = R5f.y;
backupReg1f = R5f.x;
R5f.x = mul_nonIEEE(R5f.z, PV1f.w);
PV0f.x = R5f.x;
R5f.y = mul_nonIEEE(backupReg0f, PV1f.w);
PV0f.y = R5f.y;
R5f.z = mul_nonIEEE(backupReg1f, PV1f.w);
PV0f.z = R5f.z;
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].x), PS1f);
// 5
backupReg0f = R3f.y;
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].z), intBitsToFloat(uf_remappedPS[4].z));
R3f.y = (mul_nonIEEE(R3f.z,PV0f.w) + -(PV0f.x));
R3f.z = (mul_nonIEEE(backupReg0f,PV0f.w) + -(PV0f.y));
R3f.w = (mul_nonIEEE(R3f.x,PV0f.w) + -(PV0f.z));
// 6
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].w), intBitsToFloat(uf_remappedPS[3].w));
R0f.y = (mul_nonIEEE(R0f.z,PV1f.x) + 0.0);
// 7
R0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].z), PV0f.x);
R7f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].y), PV0f.x);
R5f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].x), PV0f.x);
// 0
R123f.x = (mul_nonIEEE(R3f.w,intBitsToFloat(uf_remappedPS[0].z)) + R5f.z);
PV0f.x = R123f.x;
R123f.z = (mul_nonIEEE(R3f.y,intBitsToFloat(uf_remappedPS[0].z)) + R5f.x);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R3f.z,intBitsToFloat(uf_remappedPS[0].z)) + R5f.y);
PV0f.w = R123f.w;
// 1
PV1f.x = R4f.z + PV0f.w;
PV1f.y = R4f.y + PV0f.x;
PV1f.w = R7f.x + PV0f.z;
// 2
R123f.x = (mul_nonIEEE(PV1f.y,R2f.x) + R4f.w);
PV0f.x = R123f.x;
R123f.z = (mul_nonIEEE(PV1f.w,R2f.w) + R0f.y);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(PV1f.x,R2f.y) + R7f.z);
PV0f.w = R123f.w;
// 3
R127f.x = (mul_nonIEEE(R7f.y,R6f.y) + PV0f.w);
PV1f.x = R127f.x;
R127f.y = (mul_nonIEEE(R5f.w,R6f.x) + PV0f.x);
PV1f.y = R127f.y;
R127f.w = (mul_nonIEEE(R0f.x,R6f.z) + PV0f.z);
PV1f.w = R127f.w;
// 4
PV0f.x = R1f.z + -(PV1f.w);
PV0f.y = R1f.y + -(PV1f.x);
PV0f.z = R1f.x + -(PV1f.y);
// 5
R8f.x = (mul_nonIEEE(PV0f.z,R1f.w) + R127f.y);
R8f.y = (mul_nonIEEE(PV0f.y,R1f.w) + R127f.x);
R8f.z = (mul_nonIEEE(PV0f.x,R1f.w) + R127f.w);
// export
passPixelColor0 = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
}
