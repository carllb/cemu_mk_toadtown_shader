#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader ad6378425667cdfe
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 4) out vec4 passPixelColor4;
layout(location = 5) out vec4 passPixelColor5;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
// 0
R0f.x = 0.0;
PV0f.x = R0f.x;
R0f.y = 1.0;
PV0f.y = R0f.y;
// 1
R6f.xyz = vec3(PV0f.x,PV0f.y,PV0f.x);
R6f.w = PV0f.y;
// 2
R5f.xyz = vec3(R0f.x,R0f.y,R0f.x);
R5f.w = R0f.y;
// 3
R4f.xyz = vec3(R0f.x,R0f.y,R0f.x);
R4f.w = R0f.y;
// 4
R3f.xyz = vec3(R0f.x,R0f.y,R0f.x);
R3f.w = R0f.y;
// 5
R2f.xyz = vec3(R0f.x,R0f.y,R0f.x);
R2f.w = R0f.y;
// 6
R1f.xyz = vec3(R0f.x,R0f.y,R0f.x);
R1f.w = R0f.y;
// export
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
passPixelColor1 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
passPixelColor2 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
passPixelColor3 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
passPixelColor4 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
passPixelColor5 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
}
