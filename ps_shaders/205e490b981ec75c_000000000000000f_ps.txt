#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 205e490b981ec75c
uniform ivec4 uf_remappedPS[2];
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
// 0
backupReg0f = R0f.x;
backupReg1f = R0f.y;
PV0f.x = backupReg0f + -(0.5);
PV0f.y = backupReg1f + -(0.5);
PV0f.z = 0.0;
R0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), intBitsToFloat(uf_remappedPS[1].x));
PS0f = R0f.x;
// 1
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), intBitsToFloat(uf_remappedPS[1].x));
PS1f = R0f.y;
// 2
R0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[1].x));
PS0f = sqrt(PV1f.x);
// 3
PV1f.w = max(PS0f, 0.0);
// 4
R127f.z = min(PV1f.w, 0.5);
R127f.z *= 2.0;
PV0f.z = R127f.z;
// 5
PV1f.y = -(PV0f.z) + 1.0;
// 6
R123f.x = (mul_nonIEEE(-(R127f.z),PV1f.y) + PV1f.y);
PV0f.x = R123f.x;
// 7
R0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w), PV0f.x);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
