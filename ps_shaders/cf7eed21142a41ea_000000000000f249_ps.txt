#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader cf7eed21142a41ea
uniform ivec4 uf_remappedPS[4];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x14f6e000 res 1024x512x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 1 0 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x168f6000 res 1024x512x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 1 0 0 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x14f6e000 res 1024x512x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 1 0 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x14f56000 res 128x512x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem4;
R4f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
R3f.x = (texture(textureUnitPS2, R0f.xy).w);
R2f.x = (texture(textureUnitPS3, R2f.xy).w);
R5f.xyz = (texture(textureUnitPS1, R0f.xy).xyz);
// 0
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w), intBitsToFloat(uf_remappedPS[1].w));
PV0f.w = R4f.w + R3f.x;
// 1
R125f.x = R2f.x + PV0f.w;
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), intBitsToFloat(uf_remappedPS[2].y));
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), intBitsToFloat(uf_remappedPS[2].x));
// 2
R126f.x = (mul_nonIEEE(R4f.x,PV1f.w) + 0.0);
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), intBitsToFloat(uf_remappedPS[2].z));
R127f.w = (mul_nonIEEE(R4f.y,PV1f.z) + 0.0);
// 3
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), R127f.x);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), R127f.x);
R123f.z = (mul_nonIEEE(R4f.z,PV0f.y) + 0.0);
PV1f.z = R123f.z;
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), R127f.x);
// 4
backupReg0f = R126f.x;
R126f.x = (mul_nonIEEE(PV1f.y,R5f.y) + R127f.w);
PV0f.x = R126f.x;
R127f.y = (mul_nonIEEE(PV1f.x,R5f.x) + backupReg0f);
PV0f.y = R127f.y;
PV0f.z = -(intBitsToFloat(uf_remappedPS[3].z)) + R125f.x;
R127f.w = (mul_nonIEEE(PV1f.w,R5f.z) + PV1f.z);
PV0f.w = R127f.w;
// 5
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].w), PV0f.z);
PV1f.x = clamp(PV1f.x, 0.0, 1.0);
PV1f.y = R1f.y + -(PV0f.x);
PV1f.z = R1f.x + -(PV0f.y);
PV1f.w = R1f.z + -(PV0f.w);
// 6
backupReg0f = R0f.w;
R0f.x = (mul_nonIEEE(PV1f.z,R1f.w) + R127f.y);
R0f.y = (mul_nonIEEE(PV1f.y,R1f.w) + R126f.x);
R0f.z = (mul_nonIEEE(PV1f.w,R1f.w) + R127f.w);
R0f.w = mul_nonIEEE(backupReg0f, PV1f.x);
R0f.w = clamp(R0f.w, 0.0, 1.0);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
