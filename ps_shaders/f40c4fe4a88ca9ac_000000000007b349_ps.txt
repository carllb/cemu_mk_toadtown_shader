#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader f40c4fe4a88ca9ac
uniform ivec4 uf_remappedPS[10];
layout(binding = 0) uniform samplerCubeArray textureUnitPS0;// Tex0 addr 0x3fa11000 res 32x32x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x6) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x19acc000 res 768x1024x1 dim 1 tm: 4 format 0031 compSel: 0 1 4 4 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 2) uniform sampler2DArray textureUnitPS2;// Tex2 addr 0x19a34000 res 388x512x1 dim 5 tm: 4 format 0033 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x19b2c000 res 128x128x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0x19b30000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem5;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex0 = 0.0;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f = passParameterSem4;
R5f = passParameterSem5;
R4f.xy = (texture(textureUnitPS1, R3f.xy).xy);
R5f.xyz = (texture(textureUnitPS3, R0f.xy).xyz);
R8f.xyz = (texture(textureUnitPS4, R0f.xy).xyz);
// 0
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(R2f.x,R2f.y,R2f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R0f.x = R3f.z;
PS0f = R0f.x;
// 1
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w), intBitsToFloat(uf_remappedPS[1].w));
R0f.y = R3f.w;
R0f.z = roundEven(0.0);
PV1f.w = -(R4f.y) + 1.0;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 2
R126f.x = mul_nonIEEE(R2f.x, PS1f);
R126f.y = mul_nonIEEE(R2f.y, PS1f);
PV0f.z = PV1f.w + 0.0;
PV0f.z = clamp(PV0f.z, 0.0, 1.0);
PV0f.w = mul_nonIEEE(R2f.z, PS1f);
PS0f = -(R4f.x) + 1.0;
// 3
R3f.x = intBitsToFloat(uf_remappedPS[2].y) * 1.0;
R127f.y = PS0f + 0.0;
R126f.z = -(PV0f.w);
PV1f.z = R126f.z;
R2f.w = mul_nonIEEE(R127f.x, PV0f.z);
R4f.x = intBitsToFloat(uf_remappedPS[3].x) + -(1.0);
PS1f = R4f.x;
// 4
backupReg0f = R126f.x;
backupReg0f = R126f.x;
backupReg1f = R126f.y;
redcCUBE(vec4(PV1f.z,PV1f.z,backupReg0f,backupReg1f),vec4(R126f.y,backupReg0f,PV1f.z,PV1f.z),cubeMapSTM,cubeMapFaceId);
R126f.x = cubeMapSTM.x;
R126f.y = cubeMapSTM.y;
R126f.z = cubeMapSTM.z;
R126f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R126f.x;
PV0f.y = R126f.y;
PV0f.z = R126f.z;
PV0f.w = R126f.w;
PS0f = mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].w), intBitsToFloat(uf_remappedPS[3].w));
// 5
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(uf_remappedPS[0].x));
R4f.y = mul_nonIEEE(R127f.y, PS0f);
R4f.y = clamp(R4f.y, 0.0, 1.0);
R2f.z = PV0f.w;
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(uf_remappedPS[0].y));
PS1f = 1.0 / abs(PV0f.z);
// 6
R6f.x = mul_nonIEEE(R5f.x, PV1f.x);
R123f.y = (mul_nonIEEE(R126f.x,PS1f) + 1.5);
PV0f.y = R123f.y;
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(uf_remappedPS[0].z));
R123f.w = (mul_nonIEEE(R126f.y,PS1f) + 1.5);
PV0f.w = R123f.w;
R7f.x = mul_nonIEEE(R5f.y, PV1f.w);
PS0f = R7f.x;
// 7
backupReg0f = R5f.z;
R2f.x = PV0f.w;
R2f.y = PV0f.y;
R5f.z = intBitsToFloat(uf_remappedPS[3].y) + -(1.0);
R3f.w = mul_nonIEEE(backupReg0f, PV0f.z);
R3f.z = intBitsToFloat(uf_remappedPS[3].z) + -(1.0);
PS1f = R3f.z;
R0f.xyzw = (texture(textureUnitPS2, vec3(R0f.x,R0f.y,R0f.z)).xyzw);
R2f.xyz = (textureLod(textureUnitPS0, vec4(redcCUBEReverse(R2f.xy,floatBitsToInt(R2f.z)),cubeMapArrayIndex0),R2f.w).xyz);
// 0
backupReg0f = R0f.x;
PV0f.x = mul_nonIEEE(R0f.y, intBitsToFloat(uf_remappedPS[5].y));
PV0f.y = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedPS[5].x));
R126f.z = (mul_nonIEEE(R4f.x,R4f.y) + 1.0);
PV0f.w = mul_nonIEEE(R0f.z, intBitsToFloat(uf_remappedPS[5].z));
R126f.x = (mul_nonIEEE(R5f.z,R4f.y) + 1.0);
PS0f = R126f.x;
// 1
PV1f.x = mul_nonIEEE(R0f.w, PV0f.w);
PV1f.y = mul_nonIEEE(R0f.w, PV0f.x);
PV1f.z = mul_nonIEEE(R0f.w, PV0f.y);
R126f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].w), intBitsToFloat(uf_remappedPS[2].w));
PV1f.w = R126f.w;
R127f.w = (mul_nonIEEE(R3f.z,R4f.y) + 1.0);
PS1f = R127f.w;
// 2
R123f.x = (mul_nonIEEE(PV1f.y,R3f.x) + 0.0);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(PV1f.z,R3f.x) + 0.0);
PV0f.y = R123f.y;
R127f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].x), PV1f.w);
R123f.w = (mul_nonIEEE(PV1f.x,R3f.x) + 0.0);
PV0f.w = R123f.w;
R125f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y), PV1f.w);
PS0f = R125f.z;
// 3
PV1f.x = PV0f.y + R2f.x;
R126f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].z), R126f.w);
PV1f.z = PV0f.w + R2f.z;
PV1f.w = PV0f.x + R2f.y;
R2f.w = 1.0;
PS1f = R2f.w;
// 4
R123f.x = (mul_nonIEEE(R7f.x,PV1f.w) + 0.0);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R6f.x,PV1f.x) + 0.0);
PV0f.y = R123f.y;
R123f.w = (mul_nonIEEE(R3f.w,PV1f.z) + 0.0);
PV0f.w = R123f.w;
// 5
PV1f.x = mul_nonIEEE(R127f.w, PV0f.w);
PV1f.y = mul_nonIEEE(R126f.x, PV0f.x);
PV1f.z = mul_nonIEEE(R126f.z, PV0f.y);
// 6
backupReg0f = R8f.y;
R8f.y = (mul_nonIEEE(R126f.y,R8f.z) + PV1f.x);
R8f.z = (mul_nonIEEE(R125f.z,backupReg0f) + PV1f.y);
R3f.w = (mul_nonIEEE(R127f.z,R8f.x) + PV1f.z);
// 0
R123f.y = (mul_nonIEEE(R5f.w,intBitsToFloat(uf_remappedPS[7].x)) + intBitsToFloat(uf_remappedPS[8].w));
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV0f.y = R123f.y;
// 1
PV1f.x = mul_nonIEEE(R4f.w, PV0f.y);
PV1f.y = -(R3f.w) + intBitsToFloat(uf_remappedPS[9].x);
PV1f.z = -(R8f.y) + intBitsToFloat(uf_remappedPS[9].z);
PV1f.w = -(R8f.z) + intBitsToFloat(uf_remappedPS[9].y);
// 2
R126f.x = (mul_nonIEEE(PV1f.w,PV1f.x) + R8f.z);
PV0f.x = R126f.x;
R126f.y = (mul_nonIEEE(PV1f.y,PV1f.x) + R3f.w);
PV0f.y = R126f.y;
R127f.w = (mul_nonIEEE(PV1f.z,PV1f.x) + R8f.y);
PV0f.w = R127f.w;
// 3
PV1f.x = R1f.z + -(PV0f.w);
PV1f.y = R1f.y + -(PV0f.x);
PV1f.z = R1f.x + -(PV0f.y);
// 4
R2f.x = (mul_nonIEEE(PV1f.z,R1f.w) + R126f.y);
R2f.y = (mul_nonIEEE(PV1f.y,R1f.w) + R126f.x);
R2f.z = (mul_nonIEEE(PV1f.x,R1f.w) + R127f.w);
// export
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
