#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 9d30f5bfc7d9c6db
uniform ivec4 uf_remappedPS[3];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x22dfa000 res 128x128x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x22e02000 res 64x64x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf45c5000 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 1 1 0 border: 0
layout(binding = 13) uniform samplerCubeArray textureUnitPS13;// Tex13 addr 0x3fa33000 res 32x32x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x6) Sampler13 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem1;
layout(location = 1) in vec4 passParameterSem2;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem6;
layout(location = 4) in vec4 passParameterSem10;
layout(location = 5) in vec4 passParameterSem14;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex13 = 0.0;
R0f = passParameterSem1;
R1f = passParameterSem2;
R2f = passParameterSem3;
R3f = passParameterSem6;
R4f = passParameterSem10;
R5f = passParameterSem14;
R6f.xyzw = (texture(textureUnitPS0, R4f.xy).xyzw);
R4f.x = (texture(textureUnitPS1, R4f.zw).w);
// 0
backupReg0f = R5f.z;
R127f.x = R6f.x * 1.0;
R127f.y = R6f.y * 1.0;
R5f.z = -(backupReg0f);
R125f.w = R6f.z * 1.0;
PS0f = 1.0 / R2f.w;
// 1
backupReg0f = R2f.x;
backupReg1f = R2f.y;
backupReg2f = R0f.z;
R2f.x = mul_nonIEEE(backupReg0f, PS0f);
R2f.y = mul_nonIEEE(backupReg1f, PS0f);
PV1f.z = R0f.x + -(R1f.x);
R127f.w = R0f.y + -(R1f.y);
R126f.w = backupReg2f + -(R1f.z);
PS1f = R126f.w;
// 2
backupReg0f = R5f.x;
backupReg0f = R5f.x;
backupReg1f = R5f.z;
backupReg2f = R5f.y;
backupReg1f = R5f.z;
redcCUBE(vec4(R5f.z,R5f.z,backupReg0f,backupReg2f),vec4(R5f.y,backupReg0f,backupReg1f,backupReg1f),cubeMapSTM,cubeMapFaceId);
R5f.x = cubeMapSTM.x;
R5f.y = cubeMapSTM.y;
R5f.z = cubeMapSTM.z;
R5f.w = intBitsToFloat(cubeMapFaceId);
PV0f.x = R5f.x;
PV0f.y = R5f.y;
PV0f.z = R5f.z;
PV0f.w = R5f.w;
R3f.x = (mul_nonIEEE(PV1f.z,R127f.x) + R1f.x);
PS0f = R3f.x;
// 3
PV1f.x = -(intBitsToFloat(uf_remappedPS[0].z)) + 1.0;
R4f.y = (mul_nonIEEE(R127f.w,R127f.y) + R1f.y);
R4f.z = (mul_nonIEEE(R126f.w,R125f.w) + R1f.z);
PV1f.w = intBitsToFloat(uf_remappedPS[1].w) + -(intBitsToFloat(0x3a83126e));
PS1f = 1.0 / abs(PV0f.z);
// 4
backupReg0f = R5f.x;
backupReg1f = R5f.y;
R5f.x = (mul_nonIEEE(backupReg0f,PS1f) + 1.5);
R5f.y = (mul_nonIEEE(backupReg1f,PS1f) + 1.5);
R2f.z = intBitsToFloat(((PV1f.w >= 0.0)?(floatBitsToInt(1.0)):(0)));
R4f.w = PV1f.x + -(1.0);
R2f.w = 1.0 / R3f.w;
PS0f = R2f.w;
R2f.x = (texture(textureUnitPS4, R2f.xy).x);
R5f.xyz = (textureLod(textureUnitPS13, vec4(redcCUBEReverse(R5f.yx,floatBitsToInt(R5f.w)),cubeMapArrayIndex13),0.0).xyz);
// 0
backupReg0f = R3f.z;
tempf.x = dot(vec4(R3f.x,R4f.y,R4f.z,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R3f.z = backupReg0f * R2f.w;
PS0f = R3f.z;
// 1
R123f.x = (mul_nonIEEE(R6f.w,R4f.x) + -(R0f.w));
PV1f.x = R123f.x;
PV1f.y = -(intBitsToFloat(uf_remappedPS[0].y)) + 1.0;
R127f.z = (R4f.w * 0.0 + 1.0);
R0f.w = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[1].w));
R0f.w = clamp(R0f.w, 0.0, 1.0);
R4f.w = 1.0 / intBitsToFloat(uf_remappedPS[1].z);
PS1f = R4f.w;
// 2
R123f.x = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedPS[0].y)) + PV1f.y);
PV0f.x = R123f.x;
R1f.y = mul_nonIEEE(R1f.w, PV1f.x);
R123f.z = (mul_nonIEEE(R5f.z,intBitsToFloat(uf_remappedPS[0].y)) + PV1f.y);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R5f.y,intBitsToFloat(uf_remappedPS[0].y)) + PV1f.y);
PV0f.w = R123f.w;
// 3
R123f.x = (mul_nonIEEE(R127f.z,PV0f.w) + 0.0);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R127f.z,PV0f.x) + 0.0);
PV1f.y = R123f.y;
R123f.w = (mul_nonIEEE(R127f.z,PV0f.z) + 0.0);
PV1f.w = R123f.w;
// 4
R5f.x = mul_nonIEEE(R3f.x, PV1f.y);
R5f.y = mul_nonIEEE(R4f.y, PV1f.x);
R5f.z = mul_nonIEEE(R4f.z, PV1f.w);
// 0
R123f.x = (mul_nonIEEE(R3f.z,intBitsToFloat(uf_remappedPS[2].w)) + -(intBitsToFloat(uf_remappedPS[2].y)));
PV0f.x = R123f.x;
R127f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),R0f.w) + -(intBitsToFloat(uf_remappedPS[2].y)));
R127f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),R2f.x) + -(intBitsToFloat(uf_remappedPS[2].y)));
// 1
PS1f = 1.0 / PV0f.x;
// 2
R126f.w = -(intBitsToFloat(uf_remappedPS[2].z)) * PS1f;
PS0f = 1.0 / R127f.z;
// 3
PV1f.x = -(intBitsToFloat(uf_remappedPS[2].z)) * PS0f;
PS1f = 1.0 / R127f.w;
// 4
PV0f.x = -(intBitsToFloat(uf_remappedPS[2].z)) * PS1f;
R123f.y = (mul_nonIEEE(-(PV1f.x),R2f.z) + R126f.w);
PV0f.y = R123f.y;
// 5
PV1f.x = PV0f.x + -(PV0f.y);
// 6
PV0f.y = PV1f.x * R4f.w;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
// 7
R5f.w = mul_nonIEEE(R1f.y, PV0f.y);
R5f.w = clamp(R5f.w, 0.0, 1.0);
// export
if( ((vec4(R5f.x, R5f.y, R5f.z, R5f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
}
