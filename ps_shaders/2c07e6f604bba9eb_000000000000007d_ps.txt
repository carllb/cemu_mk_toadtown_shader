#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 2c07e6f604bba9eb
uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2DArray textureUnitPS0;// Tex0 addr 0xf4359800 res 128x128x6 dim 5 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x6) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
// 0
R8f.z = roundEven(0.0);
PV0f.z = R8f.z;
R127f.w = 1.0 / intBitsToFloat(uf_remappedPS[0].x);
PS0f = R127f.w;
// 1
R8f.x = (-(PS0f) * 1.5 + R0f.x);
PV1f.x = R8f.x;
R8f.y = (-(PS0f) * 1.5 + R0f.y);
PV1f.y = R8f.y;
R7f.z = PV0f.z;
R0f.z = PV0f.z;
PS1f = R0f.z;
// 2
R7f.x = (R127f.w * 2.0 + PV1f.x);
R0f.y = PV1f.y;
R7f.w = (R127f.w * 2.0 + PV1f.y);
R9f.x = (R127f.w * 2.0 + PV1f.x);
PS0f = R9f.x;
// 3
R0f.x = PS0f;
R9f.y = R8f.y;
R6f.z = R8f.z;
R6f.w = R8f.x;
R6f.y = (R127f.w * 2.0 + R8f.y);
PS1f = R6f.y;
R1f.xyzw = (textureGather(textureUnitPS0, vec3(R8f.x,R8f.y,R8f.z)).xyzw);
R0f.xyzw = (textureGather(textureUnitPS0, vec3(R0f.x,R0f.y,R0f.z)).xyzw);
R2f.xyzw = (textureGather(textureUnitPS0, vec3(R6f.w,R6f.y,R6f.z)).xyzw);
R3f.xyzw = (textureGather(textureUnitPS0, vec3(R7f.x,R7f.w,R7f.z)).xyzw);
// 0
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg2f = R0f.z;
PV0f.x = max(R1f.x, R1f.y);
PV0f.y = max(backupReg0f, backupReg1f);
PV0f.z = max(backupReg2f, R0f.w);
PV0f.w = max(R1f.z, R1f.w);
R127f.z = max(R2f.x, R2f.y);
PS0f = R127f.z;
// 1
PV1f.x = max(R3f.x, R3f.y);
PV1f.y = max(R2f.z, R2f.w);
R126f.z = max(PV0f.x, PV0f.w);
R8f.w = max(PV0f.y, PV0f.z);
PS1f = max(R3f.z, R3f.w);
// 2
PV0f.x = max(R127f.z, PV1f.y);
PV0f.y = max(PV1f.x, PS1f);
R8f.z = roundEven(1.0);
PV0f.z = R8f.z;
R4f.w = R8f.x;
R4f.z = roundEven(2.0);
PS0f = R4f.z;
// 3
R6f.x = PV0f.z;
R4f.y = R8f.y;
R9f.z = PV0f.z;
PV1f.w = max(PV0f.x, PV0f.y);
R7f.z = PV0f.z;
PS1f = R7f.z;
// 4
R5f.x = R9f.x;
R10f.y = max(R126f.z, PV1f.w);
R6f.z = R4f.z;
R5f.w = R9f.y;
R5f.z = R4f.z;
PS0f = R5f.z;
R2f.xyzw = (textureGather(textureUnitPS0, vec3(R8f.x,R8f.y,R8f.z)).xyzw);
R3f.xyzw = (textureGather(textureUnitPS0, vec3(R9f.x,R9f.y,R9f.z)).xyzw);
R0f.xyzw = (textureGather(textureUnitPS0, vec3(R6f.w,R6f.y,R6f.x)).xyzw);
R1f.xyzw = (textureGather(textureUnitPS0, vec3(R7f.x,R7f.w,R7f.z)).xyzw);
// 0
backupReg0f = R0f.x;
backupReg1f = R0f.y;
PV0f.x = max(R2f.x, R2f.y);
PV0f.y = max(R3f.x, R3f.y);
PV0f.z = max(R3f.z, R3f.w);
PV0f.w = max(R2f.z, R2f.w);
R126f.z = max(backupReg0f, backupReg1f);
PS0f = R126f.z;
// 1
PV1f.x = max(R1f.x, R1f.y);
PV1f.y = max(R0f.z, R0f.w);
PV1f.z = max(PV0f.x, PV0f.w);
PV1f.w = max(PV0f.y, PV0f.z);
PS1f = max(R1f.z, R1f.w);
// 2
PV0f.x = max(R126f.z, PV1f.y);
PV0f.y = max(PV1f.x, PS1f);
R7f.z = R4f.z;
R127f.w = max(PV1f.z, PV1f.w);
R8f.z = roundEven(intBitsToFloat(0x40400000));
PS0f = R8f.z;
// 3
R1f.x = R6f.y;
PV1f.y = max(PV0f.x, PV0f.y);
R9f.z = PS0f;
R1f.w = R6f.w;
R1f.z = PS0f;
PS1f = R1f.z;
// 4
R0f.x = max(R127f.w, PV1f.y);
R0f.yzw = vec3(R7f.x,R8f.z,R7f.w);
R4f.xyzw = (textureGather(textureUnitPS0, vec3(R4f.w,R4f.y,R4f.z)).xyzw);
R5f.xyzw = (textureGather(textureUnitPS0, vec3(R5f.x,R5f.w,R5f.z)).xyzw);
R6f.xyzw = (textureGather(textureUnitPS0, vec3(R6f.w,R6f.y,R6f.z)).xyzw);
R7f.xyzw = (textureGather(textureUnitPS0, vec3(R7f.x,R7f.w,R7f.z)).xyzw);
// 0
backupReg0f = R4f.z;
PV0f.x = max(R5f.z, R5f.w);
PV0f.y = max(R5f.x, R5f.y);
R4f.z = max(backupReg0f, R4f.w);
R127f.w = max(R4f.x, R4f.y);
R126f.z = max(R6f.x, R6f.y);
PS0f = R126f.z;
// 1
backupReg0f = R0f.x;
PV1f.x = max(R7f.x, R7f.y);
PV1f.y = max(R6f.z, R6f.w);
PV1f.z = max(R7f.z, R7f.w);
PV1f.w = max(PV0f.y, PV0f.x);
R6f.x = max(backupReg0f, R8f.w);
PS1f = R6f.x;
// 2
PV0f.x = max(R126f.z, PV1f.y);
PV0f.y = max(PV1f.x, PV1f.z);
R6f.w = max(R127f.w, PV1f.w);
// 3
R6f.y = max(PV0f.x, PV0f.y);
R8f.xyzw = (textureGather(textureUnitPS0, vec3(R8f.x,R8f.y,R8f.z)).xyzw);
R9f.xyzw = (textureGather(textureUnitPS0, vec3(R9f.x,R9f.y,R9f.z)).xyzw);
R1f.xyzw = (textureGather(textureUnitPS0, vec3(R1f.w,R1f.x,R1f.z)).xyzw);
R0f.xyzw = (textureGather(textureUnitPS0, vec3(R0f.y,R0f.w,R0f.z)).xyzw);
// 0
PV0f.x = max(R8f.x, R8f.y);
PV0f.y = max(R9f.x, R9f.y);
PV0f.z = max(R9f.z, R9f.w);
PV0f.w = max(R8f.z, R8f.w);
R126f.z = max(R1f.x, R1f.y);
PS0f = R126f.z;
// 1
backupReg0f = R0f.x;
backupReg1f = R0f.z;
backupReg2f = R0f.w;
PV1f.x = max(backupReg0f, R0f.y);
PV1f.y = max(R1f.z, R1f.w);
PV1f.z = max(PV0f.x, PV0f.w);
PV1f.w = max(PV0f.y, PV0f.z);
PS1f = max(backupReg1f, backupReg2f);
// 2
PV0f.x = max(R126f.z, PV1f.y);
PV0f.y = max(PV1f.x, PS1f);
R126f.z = max(PV1f.z, PV1f.w);
PV0f.w = max(R6f.y, R4f.z);
// 3
PV1f.z = max(R6f.x, PV0f.w);
PV1f.w = max(PV0f.x, PV0f.y);
// 4
R127f.y = max(R10f.y, PV1f.z);
PV0f.z = max(R126f.z, PV1f.w);
// 5
PV1f.y = max(R6f.w, PV0f.z);
// 6
R6f.x = max(R127f.y, PV1f.y);
// export
passPixelColor0 = vec4(R6f.x, R6f.x, R6f.x, R6f.x);
}
