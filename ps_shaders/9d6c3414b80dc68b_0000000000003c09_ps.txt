#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 9d6c3414b80dc68b
uniform ivec4 uf_remappedPS[2];
layout(binding = 8) uniform sampler2D textureUnitPS8;// Tex8 addr 0x13414000 res 256x256x1 dim 1 tm: 4 format 0235 compSel: 0 1 4 5 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler8 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 9) uniform sampler2D textureUnitPS9;// Tex9 addr 0x13414000 res 256x256x1 dim 1 tm: 4 format 0235 compSel: 0 1 4 5 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler9 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem1;
layout(location = 1) in vec4 passParameterSem2;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 1) out vec4 passPixelColor1;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem1;
R1f = passParameterSem2;
R2f = passParameterSem3;
R3f.xy = (texture(textureUnitPS8, R2f.xy).xy);
R2f.xy = (texture(textureUnitPS9, R2f.zw).xy);
// 0
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg0f = R0f.x;
PV0f.x = mul_nonIEEE(R3f.x, R3f.x);
PV0f.y = mul_nonIEEE(R0f.z, R1f.y);
PV0f.z = mul_nonIEEE(backupReg0f, R1f.z);
PV0f.w = mul_nonIEEE(backupReg1f, R1f.x);
R127f.x = mul_nonIEEE(backupReg0f, R3f.x);
PS0f = R127f.x;
// 1
R123f.x = (mul_nonIEEE(-(R0f.y),R1f.z) + PV0f.y);
PV1f.x = R123f.x;
PV1f.y = mul_nonIEEE(R2f.x, R2f.x);
R123f.z = (mul_nonIEEE(R3f.y,R3f.y) + PV0f.x);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(-(R0f.z),R1f.x) + PV0f.z);
PV1f.w = R123f.w;
R122f.x = (mul_nonIEEE(-(R0f.x),R1f.y) + PV0f.w);
PS1f = R122f.x;
// 2
backupReg0f = R0f.w;
R123f.x = (mul_nonIEEE(R2f.y,R2f.y) + PV1f.y);
PV0f.x = R123f.x;
R127f.y = mul_nonIEEE(R0f.w, PV1f.x);
PV0f.y = R127f.y;
R127f.z = mul_nonIEEE(R0f.w, PV1f.w);
PV0f.w = -(PV1f.z) + 1.0;
PV0f.w = clamp(PV0f.w, 0.0, 1.0);
R126f.y = mul_nonIEEE(backupReg0f, PS1f);
PS0f = R126f.y;
// 3
backupReg0f = R127f.x;
backupReg1f = R0f.z;
R127f.x = -(PV0f.x) + 1.0;
R127f.x = clamp(R127f.x, 0.0, 1.0);
R125f.y = (mul_nonIEEE(R3f.y,PV0f.y) + backupReg0f);
PV1f.z = mul_nonIEEE(backupReg1f, R3f.x);
PV1f.w = mul_nonIEEE(R0f.y, R3f.x);
R126f.z = sqrt(PV0f.w);
PS1f = R126f.z;
// 4
backupReg0f = R0f.y;
backupReg1f = R0f.z;
R126f.x = (mul_nonIEEE(R3f.y,R127f.z) + PV1f.w);
PV0f.y = mul_nonIEEE(backupReg0f, R2f.x);
PV0f.z = mul_nonIEEE(R0f.x, R2f.x);
R123f.w = (mul_nonIEEE(R3f.y,R126f.y) + PV1f.z);
PV0f.w = R123f.w;
PS0f = mul_nonIEEE(backupReg1f, R2f.x);
// 5
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(R1f.z,R126f.z) + PV0f.w);
R123f.y = (mul_nonIEEE(R2f.y,R126f.y) + PS0f);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R2f.y,R127f.z) + PV0f.y);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R2f.y,R127f.y) + PV0f.z);
PV1f.w = R123f.w;
PS1f = sqrt(backupReg0f);
// 6
backupReg0f = R126f.x;
R126f.x = (mul_nonIEEE(R1f.x,R126f.z) + R125f.y);
PV0f.x = R126f.x;
R125f.y = (mul_nonIEEE(R1f.y,R126f.z) + backupReg0f);
PV0f.y = R125f.y;
R126f.z = (mul_nonIEEE(R1f.x,PS1f) + PV1f.w);
R127f.w = (mul_nonIEEE(R1f.y,PS1f) + PV1f.z);
R127f.z = (mul_nonIEEE(R1f.z,PS1f) + PV1f.y);
PS0f = R127f.z;
// 7
tempf.x = dot(vec4(PV0f.x,PV0f.y,R127f.x,-0.0),vec4(PV0f.x,PV0f.y,R127f.x,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.w = -(intBitsToFloat(uf_remappedPS[0].w)) + 1.0;
PS1f = R125f.w;
// 8
tempf.x = dot(vec4(R126f.z,R127f.w,R127f.z,-0.0),vec4(R126f.z,R127f.w,R127f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 9
PV1f.x = mul_nonIEEE(R125f.y, PS0f);
PV1f.y = mul_nonIEEE(R126f.x, PS0f);
R126f.w = mul_nonIEEE(R127f.x, PS0f);
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 10
R127f.x = mul_nonIEEE(R127f.z, PS1f);
PV0f.y = mul_nonIEEE(R127f.w, PS1f);
PV0f.z = mul_nonIEEE(R126f.z, PS1f);
PV0f.w = mul_nonIEEE(PV1f.y, R125f.w);
PS0f = mul_nonIEEE(PV1f.x, R125f.w);
// 11
R126f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w),PV0f.z) + PV0f.w);
R125f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w),PV0f.y) + PS0f);
PV1f.w = mul_nonIEEE(R126f.w, R125f.w);
R1f.w = intBitsToFloat(uf_remappedPS[1].x);
PS1f = R1f.w;
// 12
R127f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w),R127f.x) + PV1f.w);
PV0f.z = R127f.z;
// 13
tempf.x = dot(vec4(R126f.x,R125f.y,PV0f.z,-0.0),vec4(R126f.x,R125f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
// 14
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
PS0f /= 2.0;
// 15
PV1f.x = mul_nonIEEE(R127f.z, PS0f);
PV1f.y = mul_nonIEEE(R125f.y, PS0f);
PV1f.z = mul_nonIEEE(R126f.x, PS0f);
// 16
R1f.x = (PV1f.z * 1.0 + 0.5);
R1f.y = (PV1f.y * 1.0 + 0.5);
R1f.z = (PV1f.x * 1.0 + 0.5);
// export
passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
}
