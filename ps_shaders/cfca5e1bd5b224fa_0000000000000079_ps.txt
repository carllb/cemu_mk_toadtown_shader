#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader cfca5e1bd5b224fa
uniform ivec4 uf_remappedPS[3];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x12c5a000 res 256x256x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
// 0
backupReg0f = R0f.w;
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[1].y));
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[1].x));
R0f.w = mul_nonIEEE(backupReg0f, R2f.w);
R0f.w = clamp(R0f.w, 0.0, 1.0);
PS0f = R0f.w;
// 1
R127f.x = (mul_nonIEEE(R2f.x,PV0f.w) + 0.0);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[1].z));
R127f.w = (mul_nonIEEE(R2f.y,PV0f.z) + 0.0);
// 2
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w), intBitsToFloat(uf_remappedPS[0].w));
R123f.z = (mul_nonIEEE(R2f.z,PV1f.y) + 0.0);
PV0f.z = R123f.z;
// 3
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].y),PV0f.x) + R127f.w);
PV1f.x = R127f.x;
R127f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].x),PV0f.x) + backupReg0f);
PV1f.y = R127f.y;
R127f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z),PV0f.x) + PV0f.z);
PV1f.w = R127f.w;
// 4
PV0f.x = R1f.z + -(PV1f.w);
PV0f.y = R1f.y + -(PV1f.x);
PV0f.z = R1f.x + -(PV1f.y);
// 5
R0f.x = (mul_nonIEEE(PV0f.z,R1f.w) + R127f.y);
R0f.y = (mul_nonIEEE(PV0f.y,R1f.w) + R127f.x);
R0f.z = (mul_nonIEEE(PV0f.x,R1f.w) + R127f.w);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
