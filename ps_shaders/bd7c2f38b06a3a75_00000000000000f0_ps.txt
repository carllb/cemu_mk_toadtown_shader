#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader bd7c2f38b06a3a75
uniform ivec4 uf_remappedPS[1];
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem254;
layout(location = 1) out vec4 passPixelColor1;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem254);
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R0i.z) * intBitsToFloat(R0i.z));
PV0i.y = floatBitsToInt((0.0 > intBitsToFloat(R1i.w))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(R1i.w) > 0.0)?1.0:0.0);
R1i.w = uf_remappedPS[0].x;
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + -(intBitsToFloat(PV0i.y)));
PV1i.x = clampFI32(PV1i.x);
R122i.x = floatBitsToInt((intBitsToFloat(R0i.y) * intBitsToFloat(R0i.y) + intBitsToFloat(PV0i.x)));
PS1i = R122i.x;
// 2
R123i.y = floatBitsToInt((intBitsToFloat(R0i.x) * intBitsToFloat(R0i.x) + intBitsToFloat(PS1i)));
PV0i.y = R123i.y;
PV0i.w = ((intBitsToFloat(PV1i.x) != 0.0)?int(0xFFFFFFFF):int(0x0));
// 3
R123i.z = ((PV0i.w == 0)?(0):(0x3f800000));
PV1i.z = R123i.z;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.y));
PS1i = floatBitsToInt(tempResultf);
PS1i = floatBitsToInt(intBitsToFloat(PS1i) / 2.0);
// 4
backupReg0i = R0i.y;
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.z) * 2.0 + -(1.0)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(PS1i)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(PS1i)));
// 5
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(PV0i.x)) + 0.5));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.x)) + 0.5));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.x)) + 0.5));
// export
passPixelColor1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
}
