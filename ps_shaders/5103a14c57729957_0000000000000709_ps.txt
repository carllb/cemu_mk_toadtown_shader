#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 5103a14c57729957
uniform ivec4 uf_remappedPS[3];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x22e88000 res 128x128x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x22e84000 res 64x64x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 1 1 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf45c5000 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 1 1 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem5;
layout(location = 5) in vec4 passParameterSem9;
layout(location = 6) in vec4 passParameterSem13;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f = passParameterSem5;
R5f = passParameterSem9;
R6f = passParameterSem13;
R7f.xyzw = (texture(textureUnitPS0, R5f.xy).xyzw);
R5f.xyzw = (texture(textureUnitPS1, R5f.zw).xyzw);
// 0
R127f.x = intBitsToFloat(uf_remappedPS[0].w) + -(intBitsToFloat(0x3a83126e));
R127f.y = mul_nonIEEE(R7f.y, R5f.y);
R127f.z = mul_nonIEEE(R7f.z, R5f.z);
R127f.w = mul_nonIEEE(R7f.x, R5f.x);
PS0f = 1.0 / R2f.w;
// 1
backupReg0f = R2f.x;
backupReg1f = R2f.y;
backupReg2f = R0f.z;
R2f.x = mul_nonIEEE(backupReg0f, PS0f);
R2f.y = mul_nonIEEE(backupReg1f, PS0f);
PV1f.z = R0f.y + -(R1f.y);
PV1f.w = R0f.x + -(R1f.x);
PS1f = backupReg2f + -(R1f.z);
// 2
R8f.x = (mul_nonIEEE(PV1f.w,R127f.w) + R1f.x);
R8f.y = (mul_nonIEEE(PV1f.z,R127f.y) + R1f.y);
R8f.z = (mul_nonIEEE(PS1f,R127f.z) + R1f.z);
R2f.w = intBitsToFloat(((R127f.x >= 0.0)?(floatBitsToInt(1.0)):(0)));
R1f.x = 1.0 / R4f.w;
PS0f = R1f.x;
R2f.x = (texture(textureUnitPS4, R2f.xy).x);
// 0
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,-0.0),vec4(R3f.x,R3f.y,R3f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R2f.y = R4f.z * R1f.x;
PS0f = R2f.y;
// 1
tempf.x = dot(vec4(R8f.x,R8f.y,R8f.z,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 2
backupReg0f = R3f.y;
PV0f.x = mul_nonIEEE(R3f.x, PS1f);
R3f.y = mul_nonIEEE(PV1f.x, intBitsToFloat(uf_remappedPS[0].w));
R3f.y = clamp(R3f.y, 0.0, 1.0);
PV0f.z = mul_nonIEEE(backupReg0f, PS1f);
PV0f.w = mul_nonIEEE(R3f.z, PS1f);
PS0f = -(intBitsToFloat(uf_remappedPS[1].x)) + intBitsToFloat(uf_remappedPS[1].y);
// 3
tempf.x = dot(vec4(R6f.x,R6f.y,R6f.z,-0.0),vec4(PV0f.x,PV0f.z,PV0f.w,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.x = 1.0 / PS0f;
PS1f = R127f.x;
// 4
PV0f.x = mul_nonIEEE(R7f.w, R5f.w);
PV0f.w = max(PV1f.x, -(PV1f.x));
R5f.y = 1.0 / intBitsToFloat(uf_remappedPS[0].z);
PS0f = R5f.y;
// 5
R0f.x = mul_nonIEEE(R0f.w, PV0f.x);
PV1f.z = PV0f.w + -(intBitsToFloat(uf_remappedPS[1].x));
// 6
PV0f.w = PV1f.z * R127f.x;
PV0f.w = clamp(PV0f.w, 0.0, 1.0);
// 7
R123f.y = (-(2.0) * PV0f.w + intBitsToFloat(0x40400000));
PV1f.y = R123f.y;
PV1f.z = mul_nonIEEE(PV0f.w, PV0f.w);
// 8
R5f.x = mul_nonIEEE(PV1f.z, PV1f.y);
// 0
R123f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),R3f.y) + -(intBitsToFloat(uf_remappedPS[2].y)));
PV0f.x = R123f.x;
R127f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),R2f.x) + -(intBitsToFloat(uf_remappedPS[2].y)));
R127f.w = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[2].w)) + -(intBitsToFloat(uf_remappedPS[2].y)));
// 1
PS1f = 1.0 / PV0f.x;
// 2
R127f.z = -(intBitsToFloat(uf_remappedPS[2].z)) * PS1f;
PS0f = 1.0 / R127f.w;
// 3
PV1f.w = -(intBitsToFloat(uf_remappedPS[2].z)) * PS0f;
PS1f = 1.0 / R127f.y;
// 4
PV0f.x = -(intBitsToFloat(uf_remappedPS[2].z)) * PS1f;
R123f.w = (mul_nonIEEE(-(R127f.z),R2f.w) + PV1f.w);
PV0f.w = R123f.w;
// 5
PV1f.z = PV0f.x + -(PV0f.w);
// 6
PV0f.x = PV1f.z * R5f.y;
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
// 7
PV1f.w = mul_nonIEEE(R0f.x, PV0f.x);
// 8
R8f.w = mul_nonIEEE(PV1f.w, R5f.x);
R8f.w = clamp(R8f.w, 0.0, 1.0);
// export
if( ((vec4(R8f.x, R8f.y, R8f.z, R8f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
}
