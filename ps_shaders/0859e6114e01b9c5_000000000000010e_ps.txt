#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 0859e6114e01b9c5
uniform float uf_alphaTestRef;
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0x15b80000 res 512x512x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f.x = (texture(textureUnitPS5, R0f.xy).w);
// 0
R0f.x = intBitsToFloat(0x3f000000);
PV0f.x = R0f.x;
R0f.y = mul_nonIEEE(R0f.w, R1f.x);
R0f.y = clamp(R0f.y, 0.0, 1.0);
R0f.w = 1.0;
PV0f.w = R0f.w;
// 1
R2f.xyz = vec3(PV0f.x,PV0f.x,PV0f.x);
R2f.w = PV0f.w;
// 2
R1f.xyz = vec3(R0f.x,R0f.x,R0f.x);
R1f.w = R0f.y;
// export
if( ((vec4(R1f.x, R1f.y, R1f.z, R1f.w)).a >= uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
passPixelColor1 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
