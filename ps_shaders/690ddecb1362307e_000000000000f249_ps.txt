#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 690ddecb1362307e
uniform ivec4 uf_remappedPS[6];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x2584f000 res 128x128x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x2584f000 res 128x128x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x2584f000 res 128x128x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x25853000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem3;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem3;
R2f.xy = (texture(textureUnitPS1, R1f.zw).xy);
R3f.x = (texture(textureUnitPS2, R0f.xy).w);
// 0
R4f.x = -(intBitsToFloat(uf_remappedPS[0].x)) + intBitsToFloat(uf_remappedPS[1].x);
R123f.y = (R2f.x * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
PV0f.y = R123f.y;
R0f.z = -(intBitsToFloat(uf_remappedPS[0].y)) + intBitsToFloat(uf_remappedPS[1].y);
R123f.w = (R2f.y * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204)));
PV0f.w = R123f.w;
// 1
PV1f.z = mul_nonIEEE(PV0f.y, intBitsToFloat(uf_remappedPS[2].x));
PV1f.w = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[2].y));
// 2
backupReg0f = R1f.x;
backupReg1f = R1f.y;
R1f.xyz = vec3(R0f.x,R0f.y,backupReg0f) + vec3(PV1f.z,PV1f.w,PV1f.z);
R1f.w = backupReg1f + PV1f.w;
R3f.z = -(intBitsToFloat(uf_remappedPS[0].z)) + intBitsToFloat(uf_remappedPS[1].z);
PS0f = R3f.z;
R2f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R1f.x = (texture(textureUnitPS3, R1f.zw).w);
// 0
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].z), intBitsToFloat(uf_remappedPS[4].y));
R127f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].z), intBitsToFloat(uf_remappedPS[4].x));
PV0f.w = R2f.x + R2f.y;
// 1
PV1f.z = R2f.z + PV0f.w;
R127f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].z), intBitsToFloat(uf_remappedPS[4].z));
// 2
PV0f.y = PV1f.z * intBitsToFloat(0x3eaaaaab);
R123f.z = (mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[0].w)),R1f.x) + R3f.x);
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV0f.z = R123f.z;
// 3
backupReg0f = R0f.w;
R123f.x = (mul_nonIEEE(R0f.z,PV0f.y) + intBitsToFloat(uf_remappedPS[0].y));
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R4f.x,PV0f.y) + intBitsToFloat(uf_remappedPS[0].x));
PV1f.y = R123f.y;
R123f.w = (mul_nonIEEE(R3f.z,PV0f.y) + intBitsToFloat(uf_remappedPS[0].z));
PV1f.w = R123f.w;
R0f.w = mul_nonIEEE(backupReg0f, PV0f.z);
R0f.w = clamp(R0f.w, 0.0, 1.0);
PS1f = R0f.w;
// 4
R123f.x = (mul_nonIEEE(PV1f.w,R127f.w) + 0.0);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(PV1f.x,R127f.x) + 0.0);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(PV1f.y,R127f.y) + 0.0);
PV0f.z = R123f.z;
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].w), intBitsToFloat(uf_remappedPS[3].w));
// 5
R0f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].x),PV0f.w) + PV0f.z);
R0f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].y),PV0f.w) + PV0f.y);
R0f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].z),PV0f.w) + PV0f.x);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
