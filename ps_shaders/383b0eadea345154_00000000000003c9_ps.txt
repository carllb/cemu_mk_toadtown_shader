#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 383b0eadea345154
uniform ivec4 uf_remappedPS[9];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf50cf800 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4d4b000 res 1280x720x1 dim 1 tm: 4 format 0019 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) noperspective in vec4 passParameterSem0;
layout(location = 1) noperspective in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R0f.z = (texture(textureUnitPS0, R1f.xy).x);
R1f.xyz = (texture(textureUnitPS1, R1f.xy).xyz);
// 0
R125f.x = (R1f.x * 2.0 + -(1.0));
R125f.y = (R1f.y * 2.0 + -(1.0));
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),R0f.z) + intBitsToFloat(uf_remappedPS[0].x));
PV0f.z = R123f.z;
R127f.w = 1.0;
R122f.x = (R1f.z * 2.0 + -(1.0));
PS0f = R122f.x;
// 1
R127f.x = mul_nonIEEE(R0f.x, -(PV0f.z));
PV1f.x = R127f.x;
R126f.y = mul_nonIEEE(R0f.y, -(PV0f.z));
PV1f.y = R126f.y;
R127f.z = -(PV0f.z);
PV1f.z = R127f.z;
R126f.x = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[1].z));
PS1f = R126f.x;
// 2
tempf.x = dot(vec4(PV1f.x,PV1f.y,PV1f.z,R127f.w),vec4(intBitsToFloat(uf_remappedPS[2].x),intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(uf_remappedPS[2].z),intBitsToFloat(uf_remappedPS[2].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.y = tempf.x;
// 3
tempf.x = dot(vec4(R127f.x,R126f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),intBitsToFloat(uf_remappedPS[3].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
// 4
backupReg0f = R127f.y;
R127f.y = PV1f.x + -(intBitsToFloat(uf_remappedPS[4].z));
PV0f.z = backupReg0f + -(intBitsToFloat(uf_remappedPS[4].x));
// 5
backupReg0f = R127f.x;
R127f.x = dot(vec4(backupReg0f,R126f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w)));
PV1f.x = R127f.x;
PV1f.y = R127f.x;
PV1f.z = R127f.x;
PV1f.w = R127f.x;
PS1f = max(PV0f.z, -(PV0f.z));
// 6
R127f.z = (mul_nonIEEE(PS1f,intBitsToFloat(uf_remappedPS[6].w)) + intBitsToFloat(uf_remappedPS[6].x));
PV0f.w = max(R127f.y, -(R127f.y));
// 7
R123f.y = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[6].w)) + intBitsToFloat(uf_remappedPS[6].z));
PV1f.y = R123f.y;
R127f.w = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedPS[7].x)) + intBitsToFloat(uf_remappedPS[7].y));
R127f.w = clamp(R127f.w, 0.0, 1.0);
// 8
R123f.x = (mul_nonIEEE(R125f.y,intBitsToFloat(uf_remappedPS[1].y)) + R126f.x);
PV0f.x = R123f.x;
R125f.y = min(R127f.z, PV1f.y);
R125f.y = clamp(R125f.y, 0.0, 1.0);
R123f.z = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedPS[7].z)) + intBitsToFloat(uf_remappedPS[7].w));
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV0f.z = R123f.z;
// 9
PV1f.y = mul_nonIEEE(R127f.w, PV0f.z);
R123f.z = (mul_nonIEEE(R125f.x,intBitsToFloat(uf_remappedPS[1].x)) + PV0f.x);
PV1f.z = R123f.z;
// 10
PV0f.x = mul_nonIEEE(R125f.y, PV1f.y);
PV0f.y = PV1f.z + 0.5;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
// 11
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].w), PV0f.y);
PV1f.w = mul_nonIEEE(PV0f.x, PV0f.x);
// 12
PV0f.w = mul_nonIEEE(PV1f.w, PV1f.x);
// 13
R0f.x = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[8].x));
R0f.y = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[8].y));
R0f.z = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[8].z));
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
