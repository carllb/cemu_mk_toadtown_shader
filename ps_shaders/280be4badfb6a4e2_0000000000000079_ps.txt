#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 280be4badfb6a4e2
uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x36ee6000 res 128x256x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x3) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 1 1 1 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R17i = ivec4(0);
ivec4 R18i = ivec4(0);
ivec4 R19i = ivec4(0);
ivec4 R20i = ivec4(0);
ivec4 R21i = ivec4(0);
ivec4 R22i = ivec4(0);
ivec4 R23i = ivec4(0);
ivec4 R24i = ivec4(0);
ivec4 R25i = ivec4(0);
ivec4 R26i = ivec4(0);
ivec4 R27i = ivec4(0);
ivec4 R28i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
if( activeMaskStackC[1] == true ) {
// 0
R0i.w = uf_remappedPS[0].x;
}
if( activeMaskStackC[1] == true ) {
R13i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w)).xyzw);
R14i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(1,0)).xyzw);
R15i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(2,0)).xyzw);
R16i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(3,0)).xyzw);
R17i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(0,1)).xyzw);
R18i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(1,1)).xyzw);
R19i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(2,1)).xyzw);
R20i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(3,1)).xyzw);
}
if( activeMaskStackC[1] == true ) {
R21i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(0,2)).xyzw);
R22i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(1,2)).xyzw);
R23i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(2,2)).xyzw);
R24i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(3,2)).xyzw);
R25i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(0,3)).xyzw);
R26i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(1,3)).xyzw);
R27i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(2,3)).xyzw);
R28i.xyzw = floatBitsToInt(textureLodOffset(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w),ivec2(3,3)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R14i.x) * intBitsToFloat(0x3e991687));
R127i.y = floatBitsToInt(intBitsToFloat(R15i.x) * intBitsToFloat(0x3e991687));
PV0i.w = floatBitsToInt(intBitsToFloat(R13i.x) * intBitsToFloat(0x3e991687));
// 1
R127i.x = floatBitsToInt(intBitsToFloat(R17i.x) * intBitsToFloat(0x3e991687));
PV1i.y = floatBitsToInt(intBitsToFloat(R16i.x) * intBitsToFloat(0x3e991687));
R127i.z = floatBitsToInt(intBitsToFloat(R18i.x) * intBitsToFloat(0x3e991687));
R126i.w = floatBitsToInt((intBitsToFloat(R13i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(PV0i.w)));
R125i.w = floatBitsToInt((intBitsToFloat(R14i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(PV0i.x)));
PS1i = R125i.w;
// 2
R126i.x = floatBitsToInt(intBitsToFloat(R21i.x) * intBitsToFloat(0x3e991687));
R125i.y = floatBitsToInt((intBitsToFloat(R15i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(R127i.y)));
PV0i.z = floatBitsToInt(intBitsToFloat(R19i.x) * intBitsToFloat(0x3e991687));
R127i.w = floatBitsToInt(intBitsToFloat(R20i.x) * intBitsToFloat(0x3e991687));
R125i.x = floatBitsToInt((intBitsToFloat(R16i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(PV1i.y)));
PS0i = R125i.x;
// 3
backupReg0i = R127i.z;
PV1i.x = floatBitsToInt(intBitsToFloat(R22i.x) * intBitsToFloat(0x3e991687));
R127i.y = floatBitsToInt(intBitsToFloat(R23i.x) * intBitsToFloat(0x3e991687));
R127i.z = floatBitsToInt(intBitsToFloat(R24i.x) * intBitsToFloat(0x3e991687));
R124i.w = floatBitsToInt((intBitsToFloat(R18i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(backupReg0i)));
R124i.y = floatBitsToInt((intBitsToFloat(R19i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(PV0i.z)));
PS1i = R124i.y;
// 4
backupReg0i = R127i.w;
R124i.x = floatBitsToInt(intBitsToFloat(R27i.x) * intBitsToFloat(0x3e991687));
R126i.y = floatBitsToInt(intBitsToFloat(R25i.x) * intBitsToFloat(0x3e991687));
R126i.z = floatBitsToInt(intBitsToFloat(R26i.x) * intBitsToFloat(0x3e991687));
R127i.w = floatBitsToInt((intBitsToFloat(R20i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(backupReg0i)));
R0i.w = floatBitsToInt((intBitsToFloat(R22i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(PV1i.x)));
PS0i = R0i.w;
// 5
backupReg0i = R127i.x;
backupReg1i = R126i.w;
R127i.x = floatBitsToInt((intBitsToFloat(R17i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(backupReg0i)));
R0i.y = floatBitsToInt((intBitsToFloat(R24i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(R127i.z)));
R127i.z = floatBitsToInt((intBitsToFloat(R21i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(R126i.x)));
R126i.w = floatBitsToInt(intBitsToFloat(R28i.x) * intBitsToFloat(0x3e991687));
R1i.y = floatBitsToInt((intBitsToFloat(R13i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(backupReg1i)));
PS1i = R1i.y;
// 6
backupReg0i = R125i.x;
backupReg1i = R127i.y;
R125i.x = floatBitsToInt((intBitsToFloat(R16i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(backupReg0i)));
R127i.y = floatBitsToInt((intBitsToFloat(R26i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(R126i.z)));
R124i.z = floatBitsToInt((intBitsToFloat(R14i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(R125i.w)));
R125i.w = floatBitsToInt((intBitsToFloat(R23i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(backupReg1i)));
// 7
backupReg0i = R127i.x;
backupReg1i = R127i.w;
R127i.x = floatBitsToInt((intBitsToFloat(R25i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(R126i.y)));
R126i.y = floatBitsToInt((intBitsToFloat(R27i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(R124i.x)));
R125i.z = floatBitsToInt((intBitsToFloat(R18i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(R124i.w)));
PV1i.z = R125i.z;
R127i.w = floatBitsToInt((intBitsToFloat(R17i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(backupReg0i)));
PV1i.w = R127i.w;
R2i.y = floatBitsToInt((intBitsToFloat(R20i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(backupReg1i)));
PS1i = R2i.y;
// 8
R124i.x = floatBitsToInt((intBitsToFloat(R15i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(R125i.y)));
PV0i.x = R124i.x;
R125i.y = floatBitsToInt((intBitsToFloat(R19i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(R124i.y)));
PV0i.y = R125i.y;
R126i.z = floatBitsToInt((intBitsToFloat(R28i.y) * intBitsToFloat(0x3f1645a2) + intBitsToFloat(R126i.w)));
R126i.w = floatBitsToInt((intBitsToFloat(R22i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(R0i.w)));
R4i.w = ((intBitsToFloat(PV1i.z) > intBitsToFloat(PV1i.w))?int(0xFFFFFFFF):int(0x0));
PS0i = R4i.w;
// 9
R4i.x = ((intBitsToFloat(R125i.x) > intBitsToFloat(PV0i.x))?int(0xFFFFFFFF):int(0x0));
PV1i.x = R4i.x;
R124i.y = floatBitsToInt((intBitsToFloat(R21i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(R127i.z)));
PV1i.y = R124i.y;
R127i.z = floatBitsToInt((intBitsToFloat(R23i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(R125i.w)));
R6i.w = ((intBitsToFloat(R2i.y) > intBitsToFloat(PV0i.y))?int(0xFFFFFFFF):int(0x0));
R2i.z = ((PS0i == 0)?(R18i.x):(R17i.x));
PS1i = R2i.z;
// 10
backupReg0i = R127i.x;
backupReg1i = R127i.y;
R127i.x = floatBitsToInt((intBitsToFloat(R25i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(backupReg0i)));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt((intBitsToFloat(R26i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(backupReg1i)));
PV0i.y = R127i.y;
R8i.z = ((intBitsToFloat(R126i.w) > intBitsToFloat(PV1i.y))?int(0xFFFFFFFF):int(0x0));
R125i.w = floatBitsToInt((intBitsToFloat(R24i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(R0i.y)));
R124i.w = ((PV1i.x == 0)?(R125i.x):(R124i.x));
PS0i = R124i.w;
// 11
backupReg0i = R125i.x;
R125i.x = floatBitsToInt((intBitsToFloat(R27i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(R126i.y)));
PV1i.x = R125i.x;
R126i.y = floatBitsToInt((intBitsToFloat(R28i.z) * intBitsToFloat(0x3de978d5) + intBitsToFloat(R126i.z)));
PV1i.y = R126i.y;
R126i.z = ((R4i.x == 0)?(R124i.x):(backupReg0i));
R7i.w = ((intBitsToFloat(PV0i.y) > intBitsToFloat(PV0i.x))?int(0xFFFFFFFF):int(0x0));
R0i.y = ((R6i.w == 0)?(R2i.y):(R125i.y));
PS1i = R0i.y;
// 12
backupReg0i = R127i.w;
backupReg0i = R127i.w;
R7i.x = ((intBitsToFloat(PV1i.y) > intBitsToFloat(PV1i.x))?int(0xFFFFFFFF):int(0x0));
R6i.y = ((intBitsToFloat(R124i.z) > intBitsToFloat(R1i.y))?int(0xFFFFFFFF):int(0x0));
PV0i.y = R6i.y;
R9i.z = ((intBitsToFloat(R125i.w) > intBitsToFloat(R127i.z))?int(0xFFFFFFFF):int(0x0));
PV0i.z = R9i.z;
R127i.w = ((R4i.w == 0)?(R125i.z):(backupReg0i));
R0i.w = ((R4i.w == 0)?(backupReg0i):(R125i.z));
PS0i = R0i.w;
// 13
backupReg0i = R125i.w;
backupReg1i = R127i.z;
backupReg1i = R127i.z;
backupReg0i = R125i.w;
R124i.x = ((R6i.w == 0)?(R125i.y):(R2i.y));
R125i.y = ((PV0i.y == 0)?(R1i.y):(R124i.z));
R127i.z = ((PV0i.y == 0)?(R124i.z):(R1i.y));
R125i.w = ((PV0i.z == 0)?(backupReg0i):(backupReg1i));
R125i.z = ((PV0i.z == 0)?(backupReg1i):(backupReg0i));
PS1i = R125i.z;
// 14
backupReg0i = R127i.x;
backupReg0i = R127i.x;
backupReg1i = R127i.y;
R127i.x = ((R7i.w == 0)?(R127i.y):(backupReg0i));
R127i.y = ((R8i.z == 0)?(R124i.y):(R126i.w));
R124i.z = ((R8i.z == 0)?(R126i.w):(R124i.y));
R126i.w = ((R7i.w == 0)?(backupReg0i):(backupReg1i));
R124i.y = ((R7i.x == 0)?(R126i.y):(R125i.x));
PS0i = R124i.y;
// 15
backupReg0i = R125i.x;
R125i.x = ((R7i.x == 0)?(backupReg0i):(R126i.y));
PV1i.x = R125i.x;
R7i.y = ((intBitsToFloat(R0i.y) > intBitsToFloat(R127i.w))?int(0xFFFFFFFF):int(0x0));
R10i.z = ((intBitsToFloat(R126i.z) > intBitsToFloat(R125i.y))?int(0xFFFFFFFF):int(0x0));
R5i.w = ((intBitsToFloat(R124i.w) > intBitsToFloat(R127i.z))?int(0xFFFFFFFF):int(0x0));
PV1i.w = R5i.w;
R5i.x = ((intBitsToFloat(R124i.x) > intBitsToFloat(R0i.w))?int(0xFFFFFFFF):int(0x0));
PS1i = R5i.x;
// 16
R6i.x = ((intBitsToFloat(R125i.z) > intBitsToFloat(R127i.y))?int(0xFFFFFFFF):int(0x0));
R8i.y = ((intBitsToFloat(R125i.w) > intBitsToFloat(R124i.z))?int(0xFFFFFFFF):int(0x0));
PV0i.y = R8i.y;
R11i.z = ((intBitsToFloat(PV1i.x) > intBitsToFloat(R126i.w))?int(0xFFFFFFFF):int(0x0));
R8i.w = ((intBitsToFloat(R124i.y) > intBitsToFloat(R127i.x))?int(0xFFFFFFFF):int(0x0));
R3i.w = ((PV1i.w == 0)?(R124i.w):(R127i.z));
PS0i = R3i.w;
// 17
R1i.x = ((R5i.x == 0)?(R0i.w):(R124i.x));
PV1i.x = R1i.x;
R3i.y = ((R7i.y == 0)?(R0i.y):(R127i.w));
PV1i.y = R3i.y;
R6i.z = ((R10i.z == 0)?(R125i.y):(R126i.z));
PV1i.z = R6i.z;
R127i.w = ((PV0i.y == 0)?(R125i.w):(R124i.z));
// 18
R2i.x = ((R6i.x == 0)?(R127i.y):(R125i.z));
R9i.y = ((intBitsToFloat(PV1i.y) > intBitsToFloat(R3i.w))?int(0xFFFFFFFF):int(0x0));
R7i.z = ((R11i.z == 0)?(R126i.w):(R125i.x));
R126i.w = ((R8i.w == 0)?(R124i.y):(R127i.x));
PV0i.w = R126i.w;
R12i.z = ((intBitsToFloat(PV1i.x) > intBitsToFloat(PV1i.z))?int(0xFFFFFFFF):int(0x0));
PS0i = R12i.z;
// 19
R127i.x = ((R6i.y == 0)?(R14i.x):(R13i.x));
R0i.y = ((R6i.y == 0)?(R13i.x):(R14i.x));
R1i.z = ((R6i.y == 0)?(R13i.y):(R14i.y));
R125i.w = ((R6i.y == 0)?(R14i.y):(R13i.y));
R10i.y = ((intBitsToFloat(PV0i.w) > intBitsToFloat(R127i.w))?int(0xFFFFFFFF):int(0x0));
PS1i = R10i.y;
// 20
R123i.x = ((R4i.x == 0)?(R16i.y):(R15i.y));
PV0i.x = R123i.x;
R127i.y = ((R4i.x == 0)?(R16i.x):(R15i.x));
R0i.z = ((R4i.x == 0)?(R15i.x):(R16i.x));
R0i.w = ((R4i.x == 0)?(R15i.y):(R16i.y));
R5i.y = ((PS1i == 0)?(R126i.w):(R127i.w));
PS0i = R5i.y;
// 21
R8i.x = ((intBitsToFloat(R7i.z) > intBitsToFloat(R2i.x))?int(0xFFFFFFFF):int(0x0));
R1i.y = ((R4i.w == 0)?(R18i.y):(R17i.y));
R5i.z = ((R4i.w == 0)?(R17i.y):(R18i.y));
R2i.w = ((R4i.w == 0)?(R17i.x):(R18i.x));
R4i.y = ((R5i.w == 0)?(PV0i.x):(R125i.w));
PS1i = R4i.y;
// 22
R0i.x = ((R6i.w == 0)?(R19i.x):(R20i.x));
R2i.y = ((R6i.w == 0)?(R19i.y):(R20i.y));
R4i.z = ((R6i.w == 0)?(R20i.y):(R19i.y));
R1i.w = ((R6i.w == 0)?(R20i.x):(R19i.x));
R3i.z = ((R5i.w == 0)?(R127i.y):(R127i.x));
PS0i = R3i.z;
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
backupReg0i = R0i.y;
R124i.x = ((R8i.z == 0)?(R22i.x):(R21i.x));
R124i.y = ((R8i.z == 0)?(R21i.x):(R22i.x));
R125i.z = ((R8i.z == 0)?(R21i.y):(R22i.y));
R127i.w = ((R8i.z == 0)?(R22i.y):(R21i.y));
R0i.y = ((R10i.z == 0)?(backupReg0i):(R0i.z));
PS0i = R0i.y;
// 1
R127i.x = ((R9i.z == 0)?(R24i.y):(R23i.y));
R127i.y = ((R9i.z == 0)?(R24i.x):(R23i.x));
R126i.z = ((R9i.z == 0)?(R23i.x):(R24i.x));
R125i.w = ((R9i.z == 0)?(R23i.y):(R24i.y));
R3i.x = ((R10i.z == 0)?(R1i.z):(R0i.w));
PS1i = R3i.x;
// 2
R126i.x = ((R7i.w == 0)?(R25i.y):(R26i.y));
R125i.y = ((R7i.w == 0)?(R26i.y):(R25i.y));
R124i.z = ((R7i.w == 0)?(R26i.x):(R25i.x));
R126i.w = ((R7i.w == 0)?(R25i.x):(R26i.x));
R122i.x = ((R7i.y == 0)?(R1i.w):(R2i.z));
PS0i = R122i.x;
// 3
backupReg0i = R3i.z;
R125i.x = ((R7i.x == 0)?(R27i.x):(R28i.x));
R126i.y = ((R7i.x == 0)?(R27i.y):(R28i.y));
R127i.z = ((R7i.x == 0)?(R28i.y):(R27i.y));
R124i.w = ((R7i.x == 0)?(R28i.x):(R27i.x));
R3i.z = ((R9i.y == 0)?(PS0i):(backupReg0i));
PS1i = R3i.z;
// 4
backupReg0i = R0i.x;
backupReg1i = R1i.y;
R0i.x = ((R5i.x == 0)?(R2i.w):(backupReg0i));
R1i.y = ((R6i.x == 0)?(R125i.z):(R125i.w));
R125i.z = ((R5i.x == 0)?(R5i.z):(R2i.y));
R125i.w = ((R7i.y == 0)?(R4i.z):(backupReg1i));
// 5
backupReg0i = R127i.x;
backupReg1i = R6i.z;
backupReg2i = R3i.y;
R127i.x = ((R8i.y == 0)?(backupReg0i):(R127i.w));
R3i.y = ((R11i.z == 0)?(R126i.w):(R125i.x));
R6i.z = ((R12i.z == 0)?(backupReg1i):(R1i.x));
R127i.w = ((R9i.y == 0)?(backupReg2i):(R3i.w));
// 6
R123i.x = ((R8i.y == 0)?(R127i.y):(R124i.x));
PV0i.x = R123i.x;
R123i.z = ((R8i.w == 0)?(R124i.w):(R124i.z));
PV0i.z = R123i.z;
R124i.w = ((R6i.x == 0)?(R124i.y):(R126i.z));
// 7
backupReg0i = R126i.x;
R126i.x = ((R11i.z == 0)?(backupReg0i):(R126i.y));
R126i.y = ((R8i.w == 0)?(R127i.z):(R125i.y));
R123i.z = ((R8i.x == 0)?(R2i.x):(R7i.z));
PV1i.z = R123i.z;
R126i.w = ((R10i.y == 0)?(PV0i.z):(PV0i.x));
// 8
backupReg0i = R6i.z;
R124i.x = ((R12i.z == 0)?(R0i.y):(R0i.x));
R125i.y = ((R9i.y == 0)?(R125i.w):(R4i.y));
R6i.z = ((R12i.z == 0)?(R3i.x):(R125i.z));
R125i.w = ((intBitsToFloat(backupReg0i) > intBitsToFloat(PV1i.z))?int(0xFFFFFFFF):int(0x0));
// 9
backupReg0i = R126i.y;
R123i.x = ((R8i.x == 0)?(R124i.w):(R3i.y));
PV1i.x = R123i.x;
R126i.y = ((R4i.x == 0)?(R16i.z):(R15i.z));
R126i.z = ((R4i.x == 0)?(R15i.z):(R16i.z));
R124i.w = ((R10i.y == 0)?(backupReg0i):(R127i.x));
// 10
R123i.x = ((R6i.y == 0)?(R14i.z):(R13i.z));
PV0i.x = R123i.x;
R127i.y = ((R6i.y == 0)?(R13i.z):(R14i.z));
R124i.z = ((R8i.x == 0)?(R1i.y):(R126i.x));
R3i.w = ((intBitsToFloat(R5i.y) > intBitsToFloat(R127i.w))?int(0xFFFFFFFF):int(0x0));
PV0i.w = R3i.w;
R0i.x = ((R125i.w == 0)?(PV1i.x):(R124i.x));
PS0i = R0i.x;
// 11
backupReg0i = R126i.y;
backupReg1i = R126i.w;
R126i.x = ((R4i.w == 0)?(R18i.z):(R17i.z));
R126i.y = ((R4i.w == 0)?(R17i.z):(R18i.z));
R127i.z = ((R5i.w == 0)?(backupReg0i):(PV0i.x));
R126i.w = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x41ffeb85));
R1i.x = ((PV0i.w == 0)?(backupReg1i):(R3i.z));
PS1i = R1i.x;
// 12
R124i.x = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x41ffeb85));
R123i.y = ((R6i.w == 0)?(R20i.z):(R19i.z));
PV0i.y = R123i.y;
R123i.z = ((R6i.w == 0)?(R19i.z):(R20i.z));
PV0i.z = R123i.z;
R0i.y = ((R3i.w == 0)?(R124i.w):(R125i.y));
PS0i = R0i.y;
// 13
backupReg0i = R126i.x;
R126i.x = ((R7i.y == 0)?(PV0i.y):(backupReg0i));
R124i.y = ((R5i.x == 0)?(R126i.y):(PV0i.z));
R125i.z = ((R8i.z == 0)?(R22i.z):(R21i.z));
R124i.w = ((R8i.z == 0)?(R21i.z):(R22i.z));
R127i.w = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x427ff5c3));
PS1i = R127i.w;
// 14
backupReg0i = R126i.w;
R123i.x = ((R9i.z == 0)?(R23i.z):(R24i.z));
PV0i.x = R123i.x;
R123i.w = ((R9i.z == 0)?(R24i.z):(R23i.z));
PV0i.w = R123i.w;
R126i.w = int(intBitsToFloat(backupReg0i));
PS0i = R126i.w;
// 15
backupReg0i = R125i.z;
backupReg1i = R124i.w;
backupReg2i = R124i.x;
R124i.x = ((R7i.w == 0)?(R26i.z):(R25i.z));
R126i.y = ((R7i.w == 0)?(R25i.z):(R26i.z));
R125i.z = ((R8i.y == 0)?(PV0i.w):(backupReg0i));
R124i.w = ((R6i.x == 0)?(backupReg1i):(PV0i.x));
R125i.y = int(intBitsToFloat(backupReg2i));
PS1i = R125i.y;
// 16
backupReg0i = R126i.x;
backupReg1i = R127i.w;
R126i.x = ((R9i.y == 0)?(backupReg0i):(R127i.z));
R123i.y = ((R7i.x == 0)?(R28i.z):(R27i.z));
PV0i.y = R123i.y;
R123i.z = ((R7i.x == 0)?(R27i.z):(R28i.z));
PV0i.z = R123i.z;
R127i.w = R126i.w << 0x0000000b;
PS0i = int(intBitsToFloat(backupReg1i));
// 17
backupReg0i = R124i.x;
R124i.x = ((R8i.w == 0)?(PV0i.y):(backupReg0i));
R123i.y = ((R11i.z == 0)?(R126i.y):(PV0i.z));
PV1i.y = R123i.y;
PV1i.z = PS0i << 0x00000005;
R123i.w = ((R10i.z == 0)?(R127i.y):(R126i.z));
PV1i.w = R123i.w;
PS1i = R125i.y << 0x0000000b;
// 18
R123i.x = ((R8i.x == 0)?(R124i.w):(PV1i.y));
PV0i.x = R123i.x;
R1i.y = ((R125i.w == 0)?(R124i.z):(R6i.z));
PV0i.y = R1i.y;
R124i.z = PV1i.z | PS1i;
R123i.w = ((R12i.z == 0)?(PV1i.w):(R124i.y));
PV0i.w = R123i.w;
// 19
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x427ff5c3));
R123i.z = ((R10i.y == 0)?(R124i.x):(R125i.z));
PV1i.z = R123i.z;
R0i.z = ((R125i.w == 0)?(PV0i.x):(PV0i.w));
PS1i = R0i.z;
// 20
PV0i.x = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x41ffeb85));
R1i.z = ((R3i.w == 0)?(PV1i.z):(R126i.x));
PV0i.z = R1i.z;
PS0i = int(intBitsToFloat(PV1i.y));
// 21
PV1i.x = PS0i << 0x00000005;
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x41ffeb85));
R124i.y = int(intBitsToFloat(PV0i.x));
PS1i = R124i.y;
// 22
PV0i.w = PV1i.x | R127i.w;
PS0i = int(intBitsToFloat(PV1i.z));
// 23
R4i.x = R124i.y | PV0i.w;
PV1i.x = R4i.x;
R6i.y = PS0i | R124i.z;
PV1i.y = R6i.y;
R2i.z = 0;
R0i.w = 0;
// 24
PV0i.x = (PV1i.x == PV1i.y)?int(0xFFFFFFFF):int(0x0);
// 25
backupReg0i = R2i.z;
backupReg1i = R0i.w;
R2i.x = ((PV0i.x == 0)?(0):(R4i.x));
R2i.y = ((PV0i.x == 0)?(0):(R6i.y));
R2i.z = ((PV0i.x == 0)?(0):(backupReg0i));
R0i.w = ((PV0i.x == 0)?(0):(0x3f800000));
R2i.w = ((PV0i.x == 0)?(0):(backupReg1i));
PS1i = R2i.w;
// 26
predResult = (R0i.w == 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R4i.z = (R6i.y > R4i.x)?int(0xFFFFFFFF):int(0x0);
PV0i.z = R4i.z;
// 1
R2i.x = ((PV0i.z == 0)?(R0i.y):(R1i.y));
PV1i.x = R2i.x;
R4i.y = ((PV0i.z == 0)?(R1i.x):(R0i.x));
PV1i.y = R4i.y;
R123i.z = ((PV0i.z == 0)?(R0i.x):(R1i.x));
PV1i.z = R123i.z;
R5i.w = ((PV0i.z == 0)?(R1i.z):(R0i.z));
R122i.x = ((PV0i.z == 0)?(R1i.y):(R0i.y));
PS1i = R122i.x;
// 2
R127i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.z));
R127i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PS1i));
R126i.z = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(R20i.x));
R123i.w = ((R4i.z == 0)?(R0i.z):(R1i.z));
PV0i.w = R123i.w;
R127i.w = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(R28i.x));
PS0i = R127i.w;
// 3
R125i.x = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R20i.y));
R126i.y = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R28i.y));
R127i.z = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(PV0i.w));
PV1i.z = R127i.z;
R124i.w = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R20i.z));
R126i.x = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R19i.x));
PS1i = R126i.x;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.y = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R28i.z));
PS0i = R124i.y;
// 5
R124i.x = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R19i.z));
R125i.y = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R19i.y));
R125i.z = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R27i.x));
R126i.w = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R27i.y));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
// 6
R3i.x = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(PS1i));
R5i.y = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(PS1i));
R3i.z = floatBitsToInt(intBitsToFloat(R127i.x) * intBitsToFloat(PS1i));
PV0i.z = R3i.z;
R125i.w = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R18i.x));
R127i.x = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R27i.z));
PS0i = R127i.x;
// 7
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R126i.z)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R125i.z)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R127i.w)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R126i.x)));
R126i.x = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R26i.x));
PS1i = R126i.x;
// 8
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(R126i.w)) + intBitsToFloat(PV1i.y)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(R126i.y)) + intBitsToFloat(PV1i.z)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(R125i.y)) + intBitsToFloat(PV1i.w)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(R125i.x)) + intBitsToFloat(PV1i.x)));
PV0i.w = R123i.w;
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R125i.w)));
PS0i = R125i.y;
// 9
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(R124i.y)) + intBitsToFloat(PV0i.y)));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(R124i.x)) + intBitsToFloat(PV0i.z)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(R124i.w)) + intBitsToFloat(PV0i.w)));
PV1i.z = R123i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.x)));
R124i.x = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R18i.z));
PS1i = R124i.x;
// 10
PV0i.x = ((intBitsToFloat(PV1i.z) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PV0i.y = ((intBitsToFloat(PV1i.x) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PV0i.z = ((intBitsToFloat(PV1i.z) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
R124i.w = ((intBitsToFloat(PV1i.x) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
R124i.y = ((intBitsToFloat(PV1i.z) >= 0.5)?int(0xFFFFFFFF):int(0x0));
PS0i = R124i.y;
// 11
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R18i.y));
R123i.y = ((PV0i.z == 0)?(int(1)):(0x00000003));
PV1i.y = R123i.y;
R126i.z = ((intBitsToFloat(backupReg0i) >= 0.5)?int(0xFFFFFFFF):int(0x0));
R123i.w = ((PV0i.x == 0)?(0x00000002):(0));
PV1i.w = R123i.w;
R126i.y = ((PV0i.y == 0)?(0x00000002):(0));
PS1i = R126i.y;
// 12
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R126i.x)));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R26i.y));
R125i.z = ((R124i.y == 0)?(PV1i.y):(PV1i.w));
R123i.w = ((R124i.w == 0)?(int(1)):(0x00000003));
PV0i.w = R123i.w;
R124i.w = ((intBitsToFloat(R127i.y) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PS0i = R124i.w;
// 13
backupReg0i = R127i.x;
backupReg1i = R126i.z;
backupReg2i = R126i.y;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(backupReg0i)) + intBitsToFloat(R125i.y)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.x)));
R126i.z = ((backupReg1i == 0)?(PV0i.w):(backupReg2i));
R125i.w = ((intBitsToFloat(R126i.w) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
R127i.w = ((intBitsToFloat(R126i.w) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
PS1i = R127i.w;
// 14
R126i.x = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R17i.x));
PV0i.y = ((intBitsToFloat(R127i.y) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R26i.z));
R0i.w = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R25i.x));
R1i.w = R125i.z | 0;
PS0i = R1i.w;
// 15
backupReg0i = R126i.y;
backupReg1i = R127i.x;
R127i.x = ((intBitsToFloat(R127i.y) >= 0.5)?int(0xFFFFFFFF):int(0x0));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV0i.z)) + intBitsToFloat(backupReg0i)));
R125i.z = ((R124i.w == 0)?(0x00000002):(0));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(R124i.x)) + intBitsToFloat(backupReg1i)));
R124i.x = ((PV0i.y == 0)?(int(1)):(0x00000003));
PS1i = R124i.x;
// 16
R125i.x = R126i.z | 0;
PV0i.y = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R17i.y));
R126i.z = ((intBitsToFloat(R126i.w) >= 0.5)?int(0xFFFFFFFF):int(0x0));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R126i.x)));
R126i.x = ((R125i.w == 0)?(0x00000002):(0));
PS0i = R126i.x;
// 17
backupReg0i = R127i.x;
R127i.x = ((backupReg0i == 0)?(R124i.x):(R125i.z));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R0i.w)));
R123i.z = ((R127i.w == 0)?(int(1)):(0x00000003));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R25i.y));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.w)));
PS1i = R125i.z;
// 18
backupReg0i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.y)));
R127i.y = ((R126i.z == 0)?(PV1i.z):(backupReg0i));
R126i.z = R1i.w << 0x00000002;
R127i.w = ((intBitsToFloat(R124i.w) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
R126i.w = ((intBitsToFloat(R124i.w) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
PS0i = R126i.w;
// 19
backupReg0i = R125i.x;
R125i.x = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R16i.x));
PV1i.y = backupReg0i << 0x00000002;
PV1i.z = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R17i.z));
R125i.w = ((intBitsToFloat(R126i.y) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
R125i.y = ((intBitsToFloat(R126i.y) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
PS1i = R125i.y;
// 20
PV0i.x = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R25i.z));
R0i.y = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R24i.x));
R2i.z = R127i.x | R126i.z;
R3i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV1i.z)) + intBitsToFloat(R125i.z)));
R2i.w = R127i.y | PV1i.y;
PS0i = R2i.w;
// 21
R0i.x = ((R127i.w == 0)?(0x00000002):(0));
R1i.y = ((R126i.w == 0)?(int(1)):(0x00000003));
R0i.z = ((intBitsToFloat(R124i.w) >= 0.5)?int(0xFFFFFFFF):int(0x0));
R4i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV0i.x)) + intBitsToFloat(R126i.x)));
R0i.w = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R16i.y));
PS1i = R0i.w;
// 22
R1i.x = ((intBitsToFloat(R126i.y) >= 0.5)?int(0xFFFFFFFF):int(0x0));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R125i.x)));
R1i.z = ((R125i.w == 0)?(0x00000002):(0));
R1i.w = ((R125i.y == 0)?(int(1)):(0x00000003));
R3i.y = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R24i.y));
PS0i = R3i.y;
}
if( activeMaskStackC[2] == true ) {
// 0
R126i.x = ((R1i.x == 0)?(R1i.w):(R1i.z));
R126i.y = ((R0i.z == 0)?(R1i.y):(R0i.x));
R127i.z = ((intBitsToFloat(R3i.w) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R0i.y)));
R127i.y = ((intBitsToFloat(R3i.w) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
PS0i = R127i.y;
// 1
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(R0i.w)) + intBitsToFloat(R2i.y)));
R125i.y = R2i.z << 0x00000002;
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(R3i.y)) + intBitsToFloat(PV0i.w)));
R125i.w = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R16i.z));
R126i.z = R2i.w << 0x00000002;
PS1i = R126i.z;
// 2
R127i.x = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R15i.x));
R124i.y = ((intBitsToFloat(R4i.w) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R24i.z));
R127i.w = ((intBitsToFloat(R4i.w) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
R124i.z = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R23i.x));
PS0i = R124i.z;
// 3
backupReg0i = R125i.x;
backupReg1i = R126i.y;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(R125i.w)) + intBitsToFloat(backupReg0i)));
R126i.y = R126i.x | R126i.z;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV0i.z)) + intBitsToFloat(R125i.z)));
R126i.w = backupReg1i | R125i.y;
R126i.x = ((intBitsToFloat(R3i.w) >= 0.5)?int(0xFFFFFFFF):int(0x0));
PS1i = R126i.x;
// 4
R123i.x = ((R127i.y == 0)?(int(1)):(0x00000003));
PV0i.x = R123i.x;
R127i.y = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R15i.y));
R123i.z = ((R127i.z == 0)?(0x00000002):(0));
PV0i.z = R123i.z;
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R127i.x)));
R127i.z = ((intBitsToFloat(R4i.w) >= 0.5)?int(0xFFFFFFFF):int(0x0));
PS0i = R127i.z;
// 5
R123i.x = ((R124i.y == 0)?(0x00000002):(0));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R124i.z)));
R123i.z = ((R127i.w == 0)?(int(1)):(0x00000003));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R23i.y));
R127i.w = ((R126i.x == 0)?(PV0i.x):(PV0i.z));
PS1i = R127i.w;
// 6
backupReg0i = R127i.y;
backupReg1i = R126i.w;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.y)));
R127i.y = ((R127i.z == 0)?(PV1i.z):(PV1i.x));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(backupReg0i)) + intBitsToFloat(R125i.w)));
R126i.w = backupReg1i << 0x00000002;
R124i.y = ((intBitsToFloat(R125i.x) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PS0i = R124i.y;
// 7
backupReg0i = R126i.y;
R127i.x = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R14i.x));
R126i.y = backupReg0i << 0x00000002;
PV1i.z = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R15i.z));
R125i.w = ((intBitsToFloat(R125i.x) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
R124i.w = ((intBitsToFloat(R126i.z) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PS1i = R124i.w;
// 8
backupReg0i = R127i.w;
backupReg1i = R127i.z;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R23i.z));
R125i.y = ((intBitsToFloat(R126i.z) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
R127i.z = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R22i.x));
R127i.w = backupReg0i | R126i.w;
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV1i.z)) + intBitsToFloat(backupReg1i)));
PS0i = R2i.y;
// 9
backupReg0i = R127i.y;
backupReg1i = R125i.w;
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV0i.x)) + intBitsToFloat(R126i.x)));
R127i.y = ((R124i.y == 0)?(0x00000002):(0));
R124i.z = ((intBitsToFloat(R125i.x) >= 0.5)?int(0xFFFFFFFF):int(0x0));
R125i.w = backupReg0i | R126i.y;
R125i.z = ((backupReg1i == 0)?(int(1)):(0x00000003));
PS1i = R125i.z;
// 10
PV0i.x = ((intBitsToFloat(R126i.z) >= 0.5)?int(0xFFFFFFFF):int(0x0));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R127i.x)));
R123i.z = ((R124i.w == 0)?(0x00000002):(0));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R14i.y));
R122i.x = ((R125i.y == 0)?(int(1)):(0x00000003));
PS0i = R122i.x;
// 11
backupReg0i = R127i.z;
R126i.x = ((PV0i.x == 0)?(PS0i):(PV0i.z));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R22i.y));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(backupReg0i)));
R127i.x = R127i.w << 0x00000002;
PS1i = R127i.x;
// 12
backupReg0i = R127i.y;
R124i.x = ((intBitsToFloat(R2i.y) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
R127i.y = ((R124i.z == 0)?(R125i.z):(backupReg0i));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.w)));
R127i.w = ((intBitsToFloat(R2i.y) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
R125i.x = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R14i.z));
PS0i = R125i.x;
// 13
R0i.x = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R13i.x));
R125i.y = ((intBitsToFloat(R1i.x) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PV1i.z = R125i.w << 0x00000002;
R125i.w = ((intBitsToFloat(R1i.x) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
R125i.z = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R22i.z));
PS1i = R125i.z;
// 14
backupReg0i = R127i.y;
backupReg1i = R127i.x;
R127i.x = ((intBitsToFloat(R2i.y) >= 0.5)?int(0xFFFFFFFF):int(0x0));
R127i.y = R126i.x | PV1i.z;
R126i.z = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R21i.x));
PV0i.w = backupReg0i | backupReg1i;
R2i.z = ((R127i.w == 0)?(0x00000002):(0));
PS0i = R2i.z;
// 15
backupReg0i = R125i.x;
backupReg1i = R127i.z;
R125i.x = ((R125i.y == 0)?(0x00000002):(0));
R4i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(R125i.z)) + intBitsToFloat(R124i.z)));
R127i.z = ((R125i.w == 0)?(int(1)):(0x00000003));
R4i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(backupReg1i)));
R125i.z = PV0i.w << 0x00000002;
PS1i = R125i.z;
// 16
R123i.x = ((R124i.x == 0)?(int(1)):(0x00000003));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R13i.y));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(R21i.y));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R0i.x)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R126i.z)));
// 17
backupReg0i = R5i.y;
backupReg1i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.w)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PV0i.z)) + intBitsToFloat(PS0i)));
PV1i.z = ((intBitsToFloat(R1i.x) >= 0.5)?int(0xFFFFFFFF):int(0x0));
R125i.w = ((backupReg1i == 0)?(PV0i.x):(R2i.z));
R2i.y = ((intBitsToFloat(R4i.w) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PS1i = R2i.y;
// 18
PV0i.x = R127i.y << 0x00000002;
R123i.y = ((PV1i.z == 0)?(R127i.z):(R125i.x));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R13i.z));
R3i.w = ((intBitsToFloat(R4i.w) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
R0i.w = ((intBitsToFloat(R4i.y) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PS0i = R0i.w;
// 19
R1i.x = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R21i.z));
R3i.y = ((intBitsToFloat(R4i.y) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
R2i.z = R125i.w | R125i.z;
R2i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV0i.z)) + intBitsToFloat(R127i.x)));
R5i.w = PV0i.y | PV0i.x;
PS1i = R5i.w;
}
if( activeMaskStackC[2] == true ) {
// 0
R123i.x = ((R2i.y == 0)?(0x00000002):(0));
PV0i.x = R123i.x;
R123i.y = ((R3i.w == 0)?(int(1)):(0x00000003));
PV0i.y = R123i.y;
PV0i.z = ((intBitsToFloat(R4i.w) >= 0.5)?int(0xFFFFFFFF):int(0x0));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(R1i.x)) + intBitsToFloat(R5i.y)));
R127i.x = ((intBitsToFloat(R4i.y) >= 0.5)?int(0xFFFFFFFF):int(0x0));
PS0i = R127i.x;
// 1
R123i.x = ((R3i.y == 0)?(int(1)):(0x00000003));
PV1i.x = R123i.x;
R127i.y = ((PV0i.z == 0)?(PV0i.y):(PV0i.x));
R123i.z = ((R0i.w == 0)?(0x00000002):(0));
PV1i.z = R123i.z;
R125i.w = R2i.z << 0x00000002;
R127i.w = ((intBitsToFloat(R2i.w) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PS1i = R127i.w;
// 2
backupReg0i = R127i.x;
R127i.x = ((intBitsToFloat(R124i.w) >= intBitsToFloat(0x3f553f7d))?int(0xFFFFFFFF):int(0x0));
PV0i.y = ((intBitsToFloat(R2i.w) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
PV0i.z = R5i.w << 0x00000002;
R123i.w = ((backupReg0i == 0)?(PV1i.x):(PV1i.z));
PV0i.w = R123i.w;
R126i.w = ((intBitsToFloat(R124i.w) >= intBitsToFloat(0x3e29fbe7))?int(0xFFFFFFFF):int(0x0));
PS0i = R126i.w;
// 3
backupReg0i = R127i.y;
PV1i.x = ((intBitsToFloat(R2i.w) >= 0.5)?int(0xFFFFFFFF):int(0x0));
R127i.y = PV0i.w | PV0i.z;
R123i.z = ((R127i.w == 0)?(0x00000002):(0));
PV1i.z = R123i.z;
PV1i.w = backupReg0i | R125i.w;
R122i.x = ((PV0i.y == 0)?(int(1)):(0x00000003));
PS1i = R122i.x;
// 4
R123i.x = ((R127i.x == 0)?(0x00000002):(0));
PV0i.x = R123i.x;
R123i.y = ((R126i.w == 0)?(int(1)):(0x00000003));
PV0i.y = R123i.y;
PV0i.z = ((intBitsToFloat(R124i.w) >= 0.5)?int(0xFFFFFFFF):int(0x0));
R126i.w = ((PV1i.x == 0)?(PS1i):(PV1i.z));
R125i.z = PV1i.w << 0x00000002;
PS0i = R125i.z;
// 5
PV1i.x = R127i.y << 0x00000002;
R123i.y = ((PV0i.z == 0)?(PV0i.y):(PV0i.x));
PV1i.y = R123i.y;
R2i.x = ((R4i.z == 0)?(R4i.x):(R6i.y));
PS1i = R2i.x;
// 6
R2i.y = ((R4i.z == 0)?(R6i.y):(R4i.x));
R2i.z = R126i.w | R125i.z;
R2i.w = PV1i.y | PV1i.x;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
// export
passPixelColor0 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
}
