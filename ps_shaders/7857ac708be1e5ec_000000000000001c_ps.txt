#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 7857ac708be1e5ec
uniform ivec4 uf_remappedPS[1];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x22e8b000 res 16x16x1 dim 1 tm: 4 format 041a compSel: 0 1 2 3 mipView: 0x0 (num 0x5) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 1 1 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem11;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f = passParameterSem11;
R4f.xyzw = (texture(textureUnitPS0, R4f.xy).xyzw);
// 0
backupReg0f = R2f.w;
PV0f.x = R2f.z + -(R3f.z);
PV0f.y = R2f.y + -(R3f.y);
PV0f.z = R2f.x + -(R3f.x);
R2f.w = mul_nonIEEE(backupReg0f, R4f.w);
R2f.w = clamp(R2f.w, 0.0, 1.0);
// 1
R127f.x = (mul_nonIEEE(PV0f.x,R4f.z) + R3f.z);
PV1f.x = R127f.x;
R127f.y = (mul_nonIEEE(PV0f.y,R4f.y) + R3f.y);
PV1f.y = R127f.y;
R127f.z = (mul_nonIEEE(PV0f.z,R4f.x) + R3f.x);
PV1f.z = R127f.z;
// 2
PV0f.y = -(PV1f.x) + intBitsToFloat(uf_remappedPS[0].z);
PV0f.z = -(PV1f.y) + intBitsToFloat(uf_remappedPS[0].y);
PV0f.w = -(PV1f.z) + intBitsToFloat(uf_remappedPS[0].x);
// 3
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(PV0f.w,R1f.z) + R127f.z);
PV1f.x = R127f.x;
R127f.z = (mul_nonIEEE(PV0f.y,R1f.z) + backupReg0f);
PV1f.z = R127f.z;
R127f.w = (mul_nonIEEE(PV0f.z,R1f.z) + R127f.y);
PV1f.w = R127f.w;
// 4
backupReg0f = R0f.x;
PV0f.x = R0f.y + -(PV1f.w);
PV0f.y = backupReg0f + -(PV1f.x);
PV0f.w = R0f.z + -(PV1f.z);
// 5
R2f.x = (mul_nonIEEE(PV0f.y,R0f.w) + R127f.x);
R2f.y = (mul_nonIEEE(PV0f.x,R0f.w) + R127f.w);
R2f.z = (mul_nonIEEE(PV0f.w,R0f.w) + R127f.z);
// export
if( ((vec4(R2f.x, R2f.y, R2f.z, R2f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
