#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader b49a1aa9916e3799
uniform ivec4 uf_remappedPS[3];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x348de000 res 128x128x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x348ee000 res 64x64x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 1 1 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf45c5000 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 1 1 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem6;
layout(location = 5) in vec4 passParameterSem10;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f = passParameterSem6;
R5f = passParameterSem10;
R6f.xyzw = (texture(textureUnitPS0, R5f.xy).xyzw);
R4f.x = (texture(textureUnitPS1, R5f.zw).w);
// 0
R127f.x = R6f.y * 1.0;
PV0f.y = R1f.x + -(R2f.x);
PV0f.z = R6f.x * 1.0;
R127f.w = R6f.z * 1.0;
R127f.z = 1.0 / R3f.w;
PS0f = R127f.z;
// 1
R7f.x = (mul_nonIEEE(PV0f.y,PV0f.z) + R2f.x);
R5f.y = mul_nonIEEE(R3f.y, PS0f);
PV1f.z = R1f.y + -(R2f.y);
PV1f.w = R1f.z + -(R2f.z);
PS1f = 1.0 / R4f.w;
// 2
backupReg0f = R3f.x;
R3f.x = R4f.z * PS1f;
R3f.y = (mul_nonIEEE(PV1f.z,R127f.x) + R2f.y);
R4f.z = (mul_nonIEEE(PV1f.w,R127f.w) + R2f.z);
R3f.w = intBitsToFloat(uf_remappedPS[0].w) + -(intBitsToFloat(0x3a83126e));
R5f.x = mul_nonIEEE(backupReg0f, R127f.z);
PS0f = R5f.x;
R5f.x = (texture(textureUnitPS4, R5f.xy).x);
// 0
tempf.x = dot(vec4(R7f.x,R3f.y,R4f.z,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R122f.x = (mul_nonIEEE(R3f.x,intBitsToFloat(uf_remappedPS[1].w)) + -(intBitsToFloat(uf_remappedPS[1].y)));
PS0f = R122f.x;
// 1
R123f.x = (mul_nonIEEE(R6f.w,R4f.x) + -(R1f.w));
PV1f.x = R123f.x;
R127f.z = intBitsToFloat(((R3f.w >= 0.0)?(floatBitsToInt(1.0)):(0)));
PV1f.w = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[0].w));
PV1f.w = clamp(PV1f.w, 0.0, 1.0);
PS1f = 1.0 / PS0f;
// 2
R127f.x = -(intBitsToFloat(uf_remappedPS[1].z)) * PS1f;
R127f.y = mul_nonIEEE(R2f.w, PV1f.x);
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w),PV1f.w) + -(intBitsToFloat(uf_remappedPS[1].y)));
PV0f.z = R123f.z;
R127f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w),R5f.x) + -(intBitsToFloat(uf_remappedPS[1].y)));
// 3
PS1f = 1.0 / PV0f.z;
// 4
PV0f.x = -(intBitsToFloat(uf_remappedPS[1].z)) * PS1f;
PS0f = 1.0 / R127f.w;
// 5
PV1f.x = -(intBitsToFloat(uf_remappedPS[1].z)) * PS0f;
R123f.y = (mul_nonIEEE(-(PV0f.x),R127f.z) + R127f.x);
PV1f.y = R123f.y;
R127f.z = 1.0 / intBitsToFloat(uf_remappedPS[0].z);
PS1f = R127f.z;
// 6
PV0f.x = PV1f.x + -(PV1f.y);
// 7
PV1f.y = PV0f.x * R127f.z;
PV1f.y = clamp(PV1f.y, 0.0, 1.0);
// 8
R2f.w = mul_nonIEEE(R127f.y, PV1f.y);
R2f.w = clamp(R2f.w, 0.0, 1.0);
// 0
R123f.x = (mul_nonIEEE(-(R0f.x),intBitsToFloat(uf_remappedPS[2].z)) + 1.0);
PV0f.x = R123f.x;
// 1
PV1f.w = PV0f.x + 0.0;
// 2
R2f.x = mul_nonIEEE(R7f.x, PV1f.w);
R2f.y = mul_nonIEEE(R3f.y, PV1f.w);
R2f.z = mul_nonIEEE(R4f.z, PV1f.w);
// export
if( ((vec4(R2f.x, R2f.y, R2f.z, R2f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
