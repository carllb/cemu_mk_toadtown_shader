#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 35ad5b5b81d1b680
uniform ivec4 uf_remappedPS[4];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x22e0a000 res 128x128x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x22df2000 res 128x128x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x22e62000 res 64x48x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 1 1 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf45c5000 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 1 1 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem6;
layout(location = 6) in vec4 passParameterSem7;
layout(location = 7) in vec4 passParameterSem11;
layout(location = 8) in vec4 passParameterSem12;
layout(location = 9) in vec4 passParameterSem15;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f = passParameterSem4;
R5f = passParameterSem6;
R6f = passParameterSem7;
R7f = passParameterSem11;
R8f = passParameterSem12;
R9f = passParameterSem15;
R10f.xw = (texture(textureUnitPS0, R7f.xy).xw);
R12f.xyzw = (texture(textureUnitPS2, R8f.xy).xyzw);
// 0
backupReg0f = R10f.x;
R10f.x = R1f.x + -(R2f.x);
R8f.y = R1f.y + -(R2f.y);
R123f.z = (R10f.w * 2.0 + -(1.0));
PV0f.z = R123f.z;
R123f.w = (backupReg0f * 2.0 + -(1.0));
PV0f.w = R123f.w;
PS0f = 1.0 / R3f.w;
// 1
backupReg0f = R3f.x;
R3f.x = mul_nonIEEE(backupReg0f, PS0f);
PV1f.y = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[0].x));
R3f.z = mul_nonIEEE(R3f.y, PS0f);
PV1f.w = mul_nonIEEE(PV0f.z, intBitsToFloat(uf_remappedPS[0].y));
R3f.y = R1f.z + -(R2f.z);
PS1f = R3f.y;
// 2
R7f.x = (mul_nonIEEE(R4f.w,PV1f.y) + R7f.z);
R7f.y = (mul_nonIEEE(R4f.w,PV1f.w) + R7f.w);
R7f.z = intBitsToFloat(uf_remappedPS[0].w) + -(intBitsToFloat(0x3a83126e));
R7f.w = -(intBitsToFloat(uf_remappedPS[1].x)) + intBitsToFloat(uf_remappedPS[1].y);
R0f.z = 1.0 / R5f.w;
PS0f = R0f.z;
R11f.xyzw = (texture(textureUnitPS1, R7f.xy).xyzw);
R3f.x = (texture(textureUnitPS4, R3f.xz).x);
// 0
PV0f.x = mul_nonIEEE(R11f.y, R12f.y);
PV0f.y = mul_nonIEEE(R11f.z, R12f.z);
PV0f.z = mul_nonIEEE(R11f.x, R12f.x);
R123f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),R3f.x) + -(intBitsToFloat(uf_remappedPS[2].y)));
PV0f.w = R123f.w;
R125f.y = intBitsToFloat(((R7f.z >= 0.0)?(floatBitsToInt(1.0)):(0)));
PS0f = R125f.y;
// 1
R123f.x = (mul_nonIEEE(R3f.y,PV0f.y) + R2f.z);
PV1f.x = R123f.x;
PV1f.y = R5f.z * R0f.z;
R123f.z = (mul_nonIEEE(R8f.y,PV0f.x) + R2f.y);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R10f.x,PV0f.z) + R2f.x);
PV1f.w = R123f.w;
R126f.y = 1.0 / PV0f.w;
PS1f = R126f.y;
// 2
R11f.x = PV1f.w * 1.0;
PV0f.x = R11f.x;
R11f.y = PV1f.z * 1.0;
PV0f.y = R11f.y;
R11f.z = PV1f.x * 1.0;
PV0f.z = R11f.z;
R123f.w = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedPS[2].w)) + -(intBitsToFloat(uf_remappedPS[2].y)));
PV0f.w = R123f.w;
R127f.w = mul_nonIEEE(R11f.w, R12f.w);
PS0f = R127f.w;
// 3
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.y = 1.0 / PV0f.w;
PS1f = R127f.y;
// 4
tempf.x = dot(vec4(R4f.x,R4f.y,R4f.z,-0.0),vec4(R4f.x,R4f.y,R4f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w), PV1f.x);
PS0f = clamp(PS0f, 0.0, 1.0);
// 5
R127f.x = -(intBitsToFloat(uf_remappedPS[2].z)) * R126f.y;
R123f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),PS0f) + -(intBitsToFloat(uf_remappedPS[2].y)));
PV1f.y = R123f.y;
R127f.z = -(intBitsToFloat(uf_remappedPS[2].z)) * R127f.y;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 6
backupReg0f = R127f.w;
PV0f.x = mul_nonIEEE(R4f.x, PS1f);
PV0f.y = mul_nonIEEE(R4f.y, PS1f);
PV0f.z = mul_nonIEEE(R4f.z, PS1f);
R127f.w = (mul_nonIEEE(R6f.w,backupReg0f) + -(R1f.w));
PS0f = 1.0 / PV1f.y;
// 7
tempf.x = dot(vec4(R9f.x,R9f.y,R9f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = -(intBitsToFloat(uf_remappedPS[2].z)) * PS0f;
// 8
R123f.x = (mul_nonIEEE(-(PS1f),R125f.y) + R127f.z);
PV0f.x = R123f.x;
R2f.y = max(PV1f.x, -(PV1f.x));
R127f.z = mul_nonIEEE(R2f.w, R127f.w);
R2f.z = 1.0 / R7f.w;
PS0f = R2f.z;
// 9
PV1f.w = R127f.x + -(PV0f.x);
PS1f = 1.0 / intBitsToFloat(uf_remappedPS[0].z);
// 10
PV0f.y = PV1f.w * PS1f;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
// 11
R2f.x = mul_nonIEEE(R127f.z, PV0f.y);
// 0
backupReg0f = R0f.x;
PV0f.x = R2f.y + -(intBitsToFloat(uf_remappedPS[1].x));
R123f.y = (mul_nonIEEE(-(backupReg0f),intBitsToFloat(uf_remappedPS[3].z)) + 1.0);
PV0f.y = R123f.y;
// 1
PV1f.y = PV0f.x * R2f.z;
PV1f.y = clamp(PV1f.y, 0.0, 1.0);
R127f.w = PV0f.y + 0.0;
PV1f.w = R127f.w;
// 2
PV0f.x = mul_nonIEEE(PV1f.y, PV1f.y);
R0f.y = mul_nonIEEE(R11f.y, PV1f.w);
R123f.z = (-(2.0) * PV1f.y + intBitsToFloat(0x40400000));
PV0f.z = R123f.z;
R0f.x = mul_nonIEEE(R11f.x, PV1f.w);
PS0f = R0f.x;
// 3
PV1f.y = mul_nonIEEE(PV0f.x, PV0f.z);
R0f.z = mul_nonIEEE(R11f.z, R127f.w);
// 4
R0f.w = mul_nonIEEE(R2f.x, PV1f.y);
R0f.w = clamp(R0f.w, 0.0, 1.0);
// export
if( ((vec4(R0f.x, R0f.y, R0f.z, R0f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
